{"version":3,"file":"ng-form-rules.js.map","sources":["ng://ng-form-rules/lib/form-rules/injection-tokens/model-settings.token.ts","ng://ng-form-rules/lib/form-rules/injection-tokens/trace-settings.token.ts","ng://ng-form-rules/lib/utils/trace/trace.service.ts","ng://ng-form-rules/lib/utils/common/common.service.ts","ng://ng-form-rules/lib/form-rules/models/test-results-base.ts","ng://ng-form-rules/lib/form-rules/models/property-base.ts","ng://ng-form-rules/lib/rules-engine/services/rules-engine/rules-engine.service.ts","ng://ng-form-rules/lib/form-rules/models/control-state.ts","ng://ng-form-rules/lib/rules-engine/services/reactive-forms-rule/reactive-forms-rule.service.ts","ng://ng-form-rules/lib/utils/utils.module.ts","ng://ng-form-rules/lib/rules-engine/rules-engine.module.ts","ng://ng-form-rules/lib/form-rules/form-rules.module.ts","ng://ng-form-rules/lib/form-rules/models/property.ts","ng://ng-form-rules/lib/form-rules/models/array-item-property.ts","ng://ng-form-rules/lib/form-rules/helper/model-settings-builder.ts","ng://ng-form-rules/lib/form-rules/models/abstract-model-settings.ts","ng://ng-form-rules/lib/form-rules/models/property-test-result.ts","ng://ng-form-rules/lib/form-rules/models/adhoc-model-settings.ts","ng://ng-form-rules/lib/form-rules/models/value-change-options.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\n/**\r\n * Injection token for providing an array of model settings\r\n */\r\nexport let MODEL_SETTINGS_TOKEN = new InjectionToken<string>('ngfr.model-settings');","import { InjectionToken } from \"@angular/core\";\r\n\r\n/**\r\n * Injection token for enabling ng-form-rules tracing\r\n */\r\nexport let TRACE_SETTINGS_TOKEN = new InjectionToken<string>('ngfr.trace-settings');","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { TRACE_SETTINGS_TOKEN } from '../../form-rules/injection-tokens/trace-settings.token';\r\n\r\n@Injectable()\r\nexport class TraceService {\r\n    constructor(\r\n        @Optional() @Inject(TRACE_SETTINGS_TOKEN) private doTrace: boolean = false\r\n    ) {\r\n    }\r\n\r\n    trace(msg: string) {\r\n        if (!this.doTrace) return;\r\n\r\n        const fullMsg = `[NGFR - ${this.getTimeStamp()}] ${msg}`;\r\n        console.log(fullMsg);\r\n    }\r\n\r\n    private getTimeStamp(): string {\r\n        return (new Date).toLocaleTimeString();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CommonService {\r\n    /**\r\n     * Gets unique values from an array\r\n     * @param values Values to get unique items from\r\n     * @returns Unique values array\r\n     */\r\n    unique(values: any[]): any[] {\r\n        if (!Array.isArray(values)) return [];\r\n\r\n        return Array.from(new Set(values));\r\n    }\r\n\r\n    /**\r\n     * Determines if number is zero or greater\r\n     * @param value If number is greater than or equal zero\r\n     */\r\n    isZeroOrGreater(value: number): boolean {\r\n        if (!value && value === 0) return true;\r\n\r\n        if (!value || typeof value !== \"number\") return false;\r\n\r\n        return value > 0;\r\n    }\r\n}\r\n","import { TestResult } from \"./test-result\";\r\n\r\n/**\r\n * Results of executing a collection of tests\r\n */\r\nexport class TestResultsBase<T> {\r\n    constructor(public results: TestResult<T>[]) {\r\n        this.results = this.results || [];\r\n    }\r\n\r\n    /**\r\n     * Whether the tests passed\r\n     */\r\n    get passed(): boolean {\r\n        return !this.failedResults.length;\r\n    }\r\n\r\n    /**\r\n     * Array of test results that passed\r\n     */\r\n    get passedResults(): TestResult<T>[] {\r\n        return this.results.filter(x => !!x.passed && !x.skipped);\r\n    }\r\n\r\n    /**\r\n     * Array of test results that failed\r\n     */\r\n    get failedResults(): TestResult<T>[] {\r\n        return this.results.filter(x => !x.passed);\r\n    }\r\n\r\n    /**\r\n     * Array of test results that were skipped\r\n     */\r\n    get skippedResults(): TestResult<T>[] {\r\n        return this.results.filter(x => !!x.skipped);\r\n    }\r\n\r\n    /**\r\n     * Message of the first test that failed\r\n     */\r\n    get message(): string {\r\n        return this.messages[0];\r\n    }\r\n\r\n    /**\r\n     * Messages of all failed tests\r\n     */\r\n    get messages(): string[] {\r\n        const messages = this.failedResults.map(x => x.message);\r\n        return Array.from(new Set(messages));\r\n    }\r\n}","import { Test } from \"./test\";\r\nimport { Property } from \"./property\";\r\nimport { ArrayItemProperty } from \"./array-item-property\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { ValueChangeOptions } from \"./value-change-options\";\r\nimport { UpdateOn } from \"./update-on\";\r\n\r\n/**\r\n * Base class for a property\r\n */\r\nexport abstract class PropertyBase<T> {\r\n    private _absolutePath: string;\r\n    private _dependencyPropertySubscriptions: Subscription[] = [];\r\n    private _ownerModelSettingsName: string;\r\n\r\n    /**\r\n     * Validation tests\r\n     */\r\n    valid: Test<T>[] = [];\r\n\r\n    /**\r\n     * Editability tests\r\n     */\r\n    edit: Test<T>[] = [];\r\n\r\n    /**\r\n     * Viewability tests\r\n     */\r\n    // view: Test<T>[] = [];\r\n\r\n    /**\r\n     * Properties for a complex object\r\n     */\r\n    properties?: Property<any>[];\r\n\r\n    /**\r\n     * Property for an item of an array\r\n     */\r\n    arrayItemProperty?: ArrayItemProperty<any>;\r\n\r\n    /**\r\n     * The event name for control to update upon.\r\n     */\r\n    updateOn?: UpdateOn = 'change';\r\n\r\n    /**\r\n     * Absolute path to the property from root\r\n     */\r\n    get absolutePath(): string {\r\n        return this._absolutePath;\r\n    }\r\n\r\n    /**\r\n     * Absolute path to property from root\r\n     */\r\n    get dependencyPropertySubscriptions(): Subscription[] {\r\n        return this._dependencyPropertySubscriptions;\r\n    }\r\n\r\n    /**\r\n     * Absolute path to property from root\r\n     */\r\n    get ownerModelSettingsName(): string {\r\n        return this._ownerModelSettingsName;\r\n    }\r\n\r\n    /**\r\n     * Options for how to respond to value changes on property control and dependency controls\r\n     */\r\n    valueChangeOptions: {\r\n        dependencyProperties: {\r\n            valid: ValueChangeOptions,\r\n            edit: ValueChangeOptions\r\n        },\r\n        self: {\r\n            asyncValid: ValueChangeOptions,\r\n            edit: ValueChangeOptions\r\n        }\r\n    } = {\r\n        dependencyProperties: {\r\n            valid: { distinctUntilChanged: false, debounceMilliseconds: 0 },\r\n            edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }\r\n        },\r\n        self: {\r\n            asyncValid: { distinctUntilChanged: false, debounceMilliseconds: 0 },\r\n            edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Determines if the property is an ArrayItemProperty\r\n     * @param property Property to check\r\n     * @returns Whether or not the property is an ArrayItemProperty\r\n     */\r\n    static isArrayItemProperty<T>(property: PropertyBase<T>): boolean {\r\n        return !(property as Property<T>).name;\r\n    }\r\n\r\n    /**\r\n     * DO NOT CALL! Internal use only\r\n     * @param absolutePath Absolute path to the property from the root\r\n     */\r\n    setAbsolutePath(absolutePath: string): void {\r\n        this._absolutePath = absolutePath;\r\n    }\r\n\r\n    /**\r\n     * DO NOT CALL! Internal use only\r\n     * @param subscription Subscription for the dependency property\r\n     */\r\n    addDependencyPropertySubscription(subscription: Subscription): void {\r\n        this._dependencyPropertySubscriptions.push(subscription);\r\n    }\r\n\r\n    /**\r\n     * DO NOT CALL! Internal use only\r\n     */\r\n    clearDependencyPropertySubscriptions(): void {\r\n        this.dependencyPropertySubscriptions.forEach(sub$ => sub$.unsubscribe());\r\n        this._dependencyPropertySubscriptions = [];\r\n    }\r\n\r\n    /**\r\n     * DO NOT CALL! Internal use only\r\n     * @param name Name of the owner model settings\r\n     */\r\n    setOwnerModelSettingsName(name: string): void {\r\n        this._ownerModelSettingsName = name;\r\n    }\r\n}","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { MODEL_SETTINGS_TOKEN } from '../../../form-rules/injection-tokens/model-settings.token';\r\nimport { AbstractModelSettings } from '../../../form-rules/models/abstract-model-settings';\r\nimport { Property } from '../../../form-rules/models/property';\r\nimport { RuleGroup } from '../../../form-rules/models/rule-group';\r\nimport { Rule } from '../../../form-rules/models/rule';\r\nimport { Test } from '../../../form-rules/models/test';\r\nimport { TestResult } from '../../../form-rules/models/test-result';\r\nimport { RuleSet } from '../../../form-rules/models/rule-set';\r\nimport { TestRunState } from '../../../form-rules/models/test-run-state';\r\nimport { TraceService } from '../../../utils/trace/trace.service';\r\nimport { CommonService } from '../../../utils/common/common.service';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\nimport {  map, flatMap, mergeMap, take, tap } from 'rxjs/operators';\r\nimport { TestResultsBase } from '../../../form-rules/models/test-results-base';\r\nimport { PropertyTestResults } from '../../../form-rules/models/property-test-result';\r\nimport { PropertyBase } from '../../../form-rules/models/property-base';\r\nimport { ProcessResultType } from '../../../form-rules/models/proccess-result-type';\r\nimport { TestSyncGroups } from '../../../form-rules/models/test-sync-groups';\r\nimport { ResultsPassRequirement } from '../../../form-rules/models/results-pass-requirement';\r\n\r\n/**\r\n * Engine that digests model settings and applies their rules appropriately\r\n */\r\n@Injectable()\r\nexport class RulesEngineService {\r\n    private registeredSettings: { [key: string]: AbstractModelSettings<any>; };\r\n\r\n    constructor(\r\n        @Optional() @Inject(MODEL_SETTINGS_TOKEN) settings: AbstractModelSettings<any>[],\r\n        private traceSvc: TraceService,\r\n        private commonSvc: CommonService\r\n    ) {\r\n        this.registeredSettings = {};\r\n\r\n        if (!Array.isArray(settings)) return;\r\n\r\n        settings.forEach(setting => {\r\n            this.initializeModelSetting(setting);\r\n            this.registeredSettings[setting.name] = setting;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes model settings and prepares them to be used in a form group\r\n     * @param setting Model setting to initialize\r\n     */\r\n    initializeModelSetting(setting: AbstractModelSettings<any>): void {\r\n        this.traceSvc.trace(`Initializing model settings \"${setting.name}\"`);\r\n        this.setPropertyMetadata(setting.properties, setting.name);\r\n    }\r\n\r\n    /**\r\n     * Gets model settings with the provided name\r\n     * @param name Name of model setting\r\n     * @returns Model settings with the provided name\r\n     */\r\n    getModelSettings<T>(name: string): AbstractModelSettings<T> {\r\n        this.traceSvc.trace(`Retrieving model settings \"${name}\"`);\r\n\r\n        const settings = this.registeredSettings[name];\r\n\r\n        // create new object\r\n        return settings\r\n            ? Object.assign({}, this.registeredSettings[name])\r\n            : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the dependency properties for an array of tests\r\n     * @param tests Tests to get the dependency properties for\r\n     * @returns Dependency properties\r\n     */\r\n    getDependencyProperties<T>(tests: Test<T>[]): string[] {\r\n        if (!tests) return [];\r\n\r\n        const deps = tests\r\n            .map(t => this.getDependencyPropertiesFromTest(t))\r\n            .reduce((prev, current) => prev.concat(current), []);\r\n\r\n        return this.commonSvc.unique(deps);\r\n    }\r\n\r\n    /**\r\n     * Gets tests grouped by their sync type (e.g. sync vs. async)\r\n     * @param tests Test to groups\r\n     * @returns Tests grouped by sync type\r\n     */\r\n    groupTestsBySyncType<T>(tests: Test<T>[]): TestSyncGroups<T> {\r\n        const testGroups = {\r\n            sync: [],\r\n            async: []\r\n        } as TestSyncGroups<T>;\r\n\r\n        if (!tests) return testGroups;\r\n\r\n        tests.forEach(test => {\r\n            const testFuncTypes = {\r\n                sync: false,\r\n                async: false\r\n            } as ConfiguredFuncTypes;\r\n\r\n            const conditionResults = this.getConfiguredFuncTypes(test.condition);\r\n            const checkResults = this.getConfiguredFuncTypes(test.check);\r\n\r\n            testFuncTypes.sync = conditionResults.sync || checkResults.sync;\r\n            testFuncTypes.async = conditionResults.async || checkResults.async;\r\n\r\n            // if there is an async func anywhere in the test's rule sets, then it is considered an async test\r\n            if (testFuncTypes.sync && !testFuncTypes.async) testGroups.sync.push(test);\r\n            if (testFuncTypes.async) testGroups.async.push(test);\r\n        });\r\n\r\n        return testGroups;\r\n    }\r\n\r\n    /**\r\n     * Runs validation tests\r\n     * @param data Data to run validation tests against\r\n     * @param property Property to run validation tests for\r\n     * @returns Results of validation tests\r\n     */\r\n    validate<T>(data: T, property: Property<T>, state?: TestRunState): Observable<PropertyTestResults<T>> {\r\n        return this.runAllTests(data, property.valid, state)\r\n            .pipe(\r\n                map((results: PropertyTestResults<T>) => {\r\n                    results.propertyName = property.absolutePath;\r\n                    return results as PropertyTestResults<T>;\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Runs editability tests\r\n     * @param data Data to run editability tests against\r\n     * @param property Property to run editability tests for\r\n     * * @returns Results of editability tests\r\n     */\r\n    editable<T>(data: T, property: PropertyBase<T>, state?: TestRunState): Observable<PropertyTestResults<T>> {\r\n        return this.runAllTests(data, property.edit, state)\r\n            .pipe(\r\n                map((results: PropertyTestResults<T>) => {\r\n                    results.propertyName = property.absolutePath;\r\n                    return results as PropertyTestResults<T>;\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Runs visibility tests\r\n     * @param data Data to run visibility tests against\r\n     * @param property Property to run visibility tests for\r\n     * * @returns Results of visibility tests\r\n     */\r\n    // visible<T>(data: T, property: Property<T>, state?: TestRunState): Observable<PropertyTestResults<T>> {\r\n    //     return this.runAllTests(data, property.view, state)\r\n    //         .pipe(\r\n    //             map((results: PropertyTestResults<T>) => {\r\n    //                 results.propertyName = property.absolutePath;\r\n    //                 return results as PropertyTestResults<T>;\r\n    //             })\r\n    //         );\r\n    // }\r\n\r\n    /**\r\n     * Runs an array of sync tests\r\n     * @param data Data to perform tests against\r\n     * @param tests Tests to run\r\n     * @returns Result of tests\r\n     */\r\n    runTests<T>(data: T, tests: Test<T>[], state?: TestRunState): TestResultsBase<T> {\r\n        if (!tests || !tests.length) return new TestResultsBase([]);\r\n\r\n        const testResults = tests\r\n            .map(t => this.runTest(data, t, state))\r\n            .filter(x => !!x);\r\n\r\n        return new TestResultsBase(testResults);\r\n    }\r\n\r\n    /**\r\n     * Runs an array of async tests\r\n     * @param data Data to perform tests against\r\n     * @param tests Tests to run\r\n     * @returns Result of tests\r\n     */\r\n    runTestsAsync<T>(data: T, tests: Test<T>[], state?: TestRunState): Observable<TestResultsBase<T>> {\r\n        if (!tests || !tests.length) return of(new TestResultsBase([]));\r\n\r\n        const runTest$ = tests\r\n            .map(test => this.runTestAsync(data, test, state));\r\n\r\n        return forkJoin(runTest$)\r\n            .pipe(\r\n                map(testResults => new TestResultsBase(testResults.filter(x => !!x)))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Runs an array of sync and async tests\r\n     * @param data Data to perform tests against\r\n     * @param tests Tests to run\r\n     * @returns Result of tests\r\n     */\r\n    runAllTests<T>(data: T, tests: Test<T>[], state?: TestRunState): Observable<TestResultsBase<T>> {\r\n        if (!tests || !tests.length) return of(new TestResultsBase([]));\r\n\r\n        const syncGroups = this.groupTestsBySyncType(tests);\r\n        const syncTestResults = of(this.runTests(data, syncGroups.sync, state));\r\n\r\n        return syncTestResults.pipe(\r\n            mergeMap(result => {\r\n                if (!result.passed) return of(result);\r\n\r\n                return this.runTestsAsync(data, syncGroups.async, state);\r\n            }),\r\n            take(1)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Performs sync test on a set of data\r\n     * @param data Data to perform test against\r\n     * @param test Test to run\r\n     * @returns Result of test\r\n     */\r\n    runTest<T>(data: T, test: Test<T>, state?: TestRunState): TestResult<T> {\r\n        if (!test) return null;\r\n\r\n        const passedTestResult: TestResult<T> = { passed: true, name: test.name, message: null };\r\n        const failedTestResult: TestResult<T> = { passed: false, name: test.name, message: test.message };\r\n        const skippedTestResult: TestResult<T> = { passed: true, skipped: true, name: test.name, message: null };\r\n\r\n        const conditionsRuleSetResult = this.processRuleSet(data, test.condition, state);\r\n        if (conditionsRuleSetResult === ProcessResultType.Failed) return skippedTestResult;\r\n\r\n        const checkRuleSetResult = this.processRuleSet(data, test.check, state);\r\n        switch (checkRuleSetResult) {\r\n            case ProcessResultType.Passed:\r\n                return passedTestResult;\r\n            case ProcessResultType.Failed:\r\n                return failedTestResult;\r\n            case ProcessResultType.Skipped:\r\n            default:\r\n                return skippedTestResult;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs async test on a set of data\r\n     * @param data Data to perform test against\r\n     * @param test Test to run\r\n     * @returns Result of test\r\n     */\r\n    runTestAsync<T>(data: T, test: Test<T>, state?: TestRunState): Observable<TestResult<T>> {\r\n        if (!test) return of(null);\r\n\r\n        const passedTestResult: TestResult<T> = { passed: true, name: test.name, message: null };\r\n        const failedTestResult: TestResult<T> = { passed: false, name: test.name, message: test.message };\r\n        const skippedTestResult: TestResult<T> = { passed: true, skipped: true, name: test.name, message: null };\r\n\r\n        const conditionsRuleSetResult$ = this.processRuleSetAsync(data, test.condition, state);\r\n        const checkRuleSetResult$ = this.processRuleSetAsync(data, test.check, state);\r\n\r\n        return conditionsRuleSetResult$\r\n            .pipe(\r\n                flatMap(conditionsRuleSetResult => {\r\n                    if (conditionsRuleSetResult === ProcessResultType.Failed) return of(skippedTestResult);\r\n\r\n                    return checkRuleSetResult$\r\n                        .pipe(\r\n                            map(checkRuleSetResult => {\r\n                                switch (checkRuleSetResult) {\r\n                                    case ProcessResultType.Passed:\r\n                                        return passedTestResult;\r\n                                    case ProcessResultType.Failed:\r\n                                        return failedTestResult;\r\n                                    case ProcessResultType.Skipped:\r\n                                    default:\r\n                                        return skippedTestResult;\r\n                                }\r\n                            })\r\n                        );\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Processes a sync rule set\r\n     * @param data Data to process rule set against\r\n     * @param ruleSet Rule set to process\r\n     * @returns Result of rule set processing\r\n     */\r\n    processRuleSet<T>(data: T, ruleSet: RuleSet<T>, state?: TestRunState): ProcessResultType {\r\n        if (!ruleSet) return ProcessResultType.Skipped;\r\n\r\n        const isRuleGroup = this.isRuleGroup(ruleSet);\r\n        return isRuleGroup\r\n            ? this.processRuleGroup(data, ruleSet as RuleGroup<T>, state)\r\n            : this.processRule(data, ruleSet as Rule<T>, state);\r\n    }\r\n\r\n    /**\r\n     * Processes an async rule set\r\n     * @param data Data to process rule set against\r\n     * @param ruleSet Rule set to process\r\n     * @returns Result of rule set processing\r\n     */\r\n    processRuleSetAsync<T>(data: T, ruleSet: RuleSet<T>, state?: TestRunState): Observable<ProcessResultType> {\r\n        if (!ruleSet) return of(ProcessResultType.Skipped);\r\n\r\n        const isRuleGroup = this.isRuleGroup(ruleSet);\r\n        return isRuleGroup\r\n            ? this.processRuleGroupAsync(data, ruleSet as RuleGroup<T>, state)\r\n            : this.processRuleAsync(data, ruleSet as Rule<T>, state);\r\n    }\r\n\r\n    private processRuleGroup<T>(data: T, ruleGroup: RuleGroup<T>, state?: TestRunState): ProcessResultType {\r\n        if (!ruleGroup.rules) return ProcessResultType.Skipped;\r\n\r\n        let passedCount = 0;\r\n        let skippedCount = 0;\r\n\r\n        for (let i = 0; i < ruleGroup.rules.length; i++) {\r\n            const rule = ruleGroup.rules[i];\r\n            const ruleSetResult = this.processRuleSet(data, rule, state);\r\n\r\n            if (this.canShortCircuitRuleGroup(ruleSetResult, ruleGroup)) return ruleSetResult;\r\n\r\n            if (ruleSetResult == ProcessResultType.Passed) passedCount++;\r\n            else if (ruleSetResult == ProcessResultType.Skipped) skippedCount++;\r\n        }\r\n\r\n        // if we skipped them all, then return skipped\r\n        if (skippedCount === ruleGroup.rules.length) return ProcessResultType.Skipped;\r\n\r\n        // if we got this far, make sure all tests were passed\r\n        return passedCount === ruleGroup.rules.length ? ProcessResultType.Passed : ProcessResultType.Failed;\r\n    }\r\n\r\n    private processRuleGroupAsync<T>(data: T, ruleGroup: RuleGroup<T>, state?: TestRunState): Observable<ProcessResultType> {\r\n        if (!ruleGroup.rules) return of(ProcessResultType.Skipped);\r\n        const asyncRuleSetResults$ = ruleGroup.rules.map(x => this.processRuleSetAsync(data, x, state));\r\n\r\n        return forkJoin(asyncRuleSetResults$).pipe(\r\n            map(ruleSetResults => {\r\n                const counts = {\r\n                    passed: ruleSetResults.filter(x => x === ProcessResultType.Passed).length,\r\n                    failed: ruleSetResults.filter(x => x === ProcessResultType.Failed).length,\r\n                    skipped: ruleSetResults.filter(x => x === ProcessResultType.Skipped).length,\r\n                };\r\n\r\n                const ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };\r\n\r\n                if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass && counts.passed > 0)\r\n                    return ProcessResultType.Passed;\r\n                if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass && counts.passed === ruleSetResults.length)\r\n                    return ProcessResultType.Passed;\r\n                if (counts.skipped === ruleSetResults.length) return ProcessResultType.Skipped;\r\n\r\n                return ProcessResultType.Failed;\r\n            })\r\n        );\r\n    }\r\n\r\n    private processRule<T>(data: T, rule: Rule<T>, state?: TestRunState): ProcessResultType {\r\n        if (!rule.func) return ProcessResultType.Skipped;\r\n\r\n        const rootData = state ? state.rootData : null;\r\n        return rule.func(data, rootData) ? ProcessResultType.Passed : ProcessResultType.Failed;\r\n    }\r\n\r\n    private processRuleAsync<T>(data: T, rule: Rule<T>, state?: TestRunState): Observable<ProcessResultType> {\r\n        if (!rule.func && !rule.asyncFunc) return of(ProcessResultType.Skipped);\r\n\r\n        const rootData = state ? state.rootData : null;\r\n        const funcResult = rule.func\r\n            ? of(rule.func(data, rootData))\r\n            : rule.asyncFunc(data, rootData);\r\n\r\n        return funcResult\r\n            .pipe(\r\n                map(passed => passed ? ProcessResultType.Passed : ProcessResultType.Failed)\r\n            );\r\n    }\r\n\r\n    // private doProcessRule<T>(rule: Rule<T>, state: TestRunState, isAsync: boolean): boolean {\r\n    //     // make sure we have the appropriate func to call\r\n    //     if ((isAsync && !rule.asyncFunc) || (!isAsync && !rule.func)) return false;\r\n\r\n    //     // // if there is missing data, then assume we should process the rule\r\n    //     // if (!rule.options || !rule.options.controlStateOptions || !state || !state.controlState) return true;\r\n\r\n    //     // if (rule.options.controlStateOptions.skipPristine && state.controlState.pristine) return false;\r\n    //     // if (rule.options.controlStateOptions.skipUntouched && state.controlState.untouched) return false;\r\n\r\n    //     return true;\r\n    // }\r\n\r\n    private canShortCircuitRuleGroup<T>(ruleSetResult: ProcessResultType, ruleGroup: RuleGroup<T>): boolean {\r\n        const ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };\r\n\r\n        return (\r\n            // it passed, and we only need one to pass\r\n            (ruleSetResult == ProcessResultType.Passed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass)\r\n            ||\r\n            // if failed, and we need all to pass\r\n            (ruleSetResult == ProcessResultType.Failed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass)\r\n        );\r\n    }\r\n\r\n    private isRuleGroup<T>(ruleSet: RuleSet<T>): boolean {\r\n        const rule = ruleSet as Rule<T>;\r\n        return !rule.func && !rule.asyncFunc;\r\n    }\r\n\r\n    private getDependencyPropertiesFromTest<T>(test: Test<T>): string[] {\r\n        const checkDeps = this.getDependencyPropertiesFromRuleSet<T>(test.check);\r\n        const conditionDeps = this.getDependencyPropertiesFromRuleSet<T>(test.condition);\r\n        return this.commonSvc.unique(checkDeps.concat(conditionDeps));\r\n    }\r\n\r\n    private getDependencyPropertiesFromRuleSet<T>(ruleSet: RuleSet<T>): string[] {\r\n        if (!ruleSet) return [];\r\n\r\n        const result: string[] = [];\r\n\r\n        if (this.isRuleGroup(ruleSet)) {\r\n            const ruleGroup = ruleSet as RuleGroup<T>;\r\n            ruleGroup.rules.forEach(x => {\r\n                result.push(...this.commonSvc.unique(this.getDependencyPropertiesFromRuleSet(x)));\r\n            });\r\n        }\r\n\r\n        const rule = ruleSet as Rule<T>;\r\n        if (rule.options && Array.isArray(rule.options.dependencyProperties)) {\r\n            result.push(...this.commonSvc.unique(rule.options.dependencyProperties));\r\n        }\r\n\r\n        return this.commonSvc.unique(result);\r\n    }\r\n\r\n    private setPropertyMetadata(properties: PropertyBase<any>[], modelSettingsName: string, currentAbsolutePath: string = ''): void {\r\n        if (!properties) return;\r\n\r\n        properties.forEach(prop => {\r\n            const newAbsolutePath = this.setPropertyAbsolutePath(prop, currentAbsolutePath);\r\n            this.fillInEmptyTestNames(prop);\r\n            prop.setOwnerModelSettingsName(modelSettingsName);\r\n\r\n            if (prop.properties) {\r\n                this.setPropertyMetadata(prop.properties, modelSettingsName, newAbsolutePath);\r\n            } else if (prop.arrayItemProperty) {\r\n                this.setPropertyMetadata([prop.arrayItemProperty], modelSettingsName, newAbsolutePath);\r\n            }\r\n        });\r\n    }\r\n\r\n    private setPropertyAbsolutePath(property: PropertyBase<any>, currentAbsolutePath: string = ''): string {\r\n        const isArrayItemProperty = PropertyBase.isArrayItemProperty(property);\r\n        const newAbsolutePathSegment = isArrayItemProperty ? '[]' : (property as Property<any>).name;\r\n        const isAtRoot = !currentAbsolutePath;\r\n        const newAbsolutePath = `${currentAbsolutePath}${isAtRoot ? '' : '.'}${newAbsolutePathSegment}`;\r\n\r\n        // set absolute path for property\r\n        property.setAbsolutePath(newAbsolutePath);\r\n\r\n        return newAbsolutePath;\r\n    }\r\n\r\n    private fillInEmptyTestNames(property: PropertyBase<any>) {\r\n        property.valid\r\n            .filter(test => !test.name)\r\n            .forEach((test, i) => test.name = `validTest${i}`);\r\n\r\n        property.edit\r\n            .filter(test => !test.name)\r\n            .forEach((test, i) => test.name = `editTest${i}`);\r\n    }\r\n\r\n    private getConfiguredFuncTypes<T>(ruleSet: RuleSet<T>): ConfiguredFuncTypes {\r\n        if (!ruleSet) return { sync: false, async: false };\r\n\r\n        const isRuleGroup = this.isRuleGroup(ruleSet);\r\n\r\n        if (isRuleGroup) {\r\n            const ruleGroup = ruleSet as RuleGroup<T>;\r\n            const results = ruleGroup.rules\r\n                .map(rs => {\r\n                    return this.getConfiguredFuncTypes(rs);\r\n                });\r\n\r\n            return {\r\n                sync: results.findIndex(x => !!x.sync) >= 0,\r\n                async: results.findIndex(x => !!x.async) >= 0,\r\n            };\r\n        } else {\r\n            const rule = ruleSet as Rule<T>;\r\n            return {\r\n                sync: !!rule.func,\r\n                async: !!rule.asyncFunc\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\ninterface ConfiguredFuncTypes {\r\n    sync: boolean;\r\n    async: boolean;\r\n}\r\n","import { AbstractControl } from \"@angular/forms\";\r\n\r\n/**\r\n * State of an Angular AbstractControl at the time of running a test\r\n */\r\nexport class ControlState {\r\n    private readonly _pristine: boolean;\r\n    private readonly _untouched: boolean;\r\n\r\n    // get pristine(): boolean { return this._pristine; }\r\n    // get untouched(): boolean { return this._untouched; }\r\n\r\n    private constructor(control: AbstractControl) {\r\n        this._pristine = control.pristine;\r\n        this._untouched = control.untouched;\r\n    }\r\n\r\n    /**\r\n     * Creates a ControlState object based on an Angular control\r\n     * @param control Angular control to generate state from\r\n     * @returns Control state base on Angular control\r\n     */\r\n    static create(control: AbstractControl): ControlState {\r\n        return new ControlState(control);\r\n    }\r\n}","// tslint:disable:max-line-length\r\nimport { Injectable } from \"@angular/core\";\r\nimport { FormGroup, AbstractControl, ValidatorFn, FormBuilder, FormControl, FormArray, ValidationErrors, AsyncValidatorFn } from '@angular/forms';\r\nimport { RulesEngineService } from \"../rules-engine/rules-engine.service\";\r\nimport { Property } from \"../../../form-rules/models/property\";\r\nimport { ArrayItemProperty } from \"../../../form-rules/models/array-item-property\";\r\nimport { PropertyBase } from \"../../../form-rules/models/property-base\";\r\nimport { TraceService } from \"../../../utils/trace/trace.service\";\r\nimport { Observable, BehaviorSubject, of, OperatorFunction, timer, empty, EMPTY } from \"rxjs\";\r\nimport { map, tap, switchMap, take, distinctUntilChanged, debounce } from \"rxjs/operators\";\r\nimport { TestResultsBase } from \"../../../form-rules/models/test-results-base\";\r\nimport { ReactiveFormsValidationErrors } from \"../../../form-rules/models/reactive-forms-validation-errors\";\r\nimport { ReactiveFormsFailedValdation } from \"../../../form-rules/models/reactive-forms-failed-validation\";\r\nimport { ReactiveFormsValidationErrorsData } from \"../../../form-rules/models/reactive-forms-validation-errors-data\";\r\nimport { ControlState } from \"../../../form-rules/models/control-state\";\r\nimport { CommonService } from \"../../../utils/common/common.service\";\r\nimport { AbstractModelSettings } from \"../../../form-rules/models/abstract-model-settings\";\r\nimport { ValueChangeOptions } from \"../../../form-rules/models/value-change-options\";\r\nimport { AddArrayItemPropertyOptions } from \"../../../form-rules/models/add-array-item-property-options\";\r\nimport { UpdateOn } from \"../../../form-rules/models/update-on\";\r\n// tslint:enable:max-line-length\r\n\r\n/**\r\n * Builds reactive forms using configured model settings\r\n */\r\n@Injectable()\r\nexport class ReactiveFormsRuleService {\r\n    private static readonly FORM_MODEL_SETTINGS_PROPERTY_NAME = 'ngFormRulesModelSetting';\r\n    private static readonly FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME = 'ngFormRulesForceAsyncValidTestRun';\r\n    private static readonly CONTROL_LAST_ERROR = 'ngFormRulesControlLastError';\r\n\r\n    constructor(\r\n        private rulesEngineSvc: RulesEngineService,\r\n        private formBuilder: FormBuilder,\r\n        private traceSvc: TraceService,\r\n        private commonSvc: CommonService\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Gets model settings with the provided name\r\n     * @param name Name of model setting\r\n     * @returns Model settings with the provided name\r\n     */\r\n    getModelSettings<T>(name: string): AbstractModelSettings<T> {\r\n        return this.rulesEngineSvc.getModelSettings(name);\r\n    }\r\n\r\n    /**\r\n     * Creates a form group using an instance of model settings\r\n     * @param modelSettings Name of the model setting or an instance of model settings to use\r\n     * @param initialValue Initial data to set the form values to\r\n     * @returns Form group created according to defined model settings\r\n     */\r\n    createFormGroup<T>(\r\n        modelSettings: string | AbstractModelSettings<T>,\r\n        initialValue?: any\r\n    ): FormGroup {\r\n        let settings: AbstractModelSettings<T>;\r\n\r\n        if (typeof modelSettings === \"string\") {\r\n            settings = this.rulesEngineSvc.getModelSettings(modelSettings as string);\r\n            if (!settings) throw new Error(`No model setting found with the name \"${modelSettings}\"`);\r\n        } else {\r\n            if (!modelSettings) throw new Error(`Adhoc model setting provided is invalid`);\r\n            settings = modelSettings as AbstractModelSettings<T>;\r\n            this.rulesEngineSvc.initializeModelSetting(settings);\r\n        }\r\n\r\n        this.traceSvc.trace(`Creating form group using model settings \"${settings.name}\"`);\r\n        const formGroup = this.buildGroup(settings.properties, initialValue);\r\n\r\n        this.traceSvc.trace(`Setting up dependency subscriptions`);\r\n        this.resetDependencySubscriptions(formGroup, settings.properties);\r\n\r\n        this.traceSvc.trace(`Patching form group with initial value`);\r\n        this.triggerValueChange(formGroup);\r\n\r\n        this.traceSvc.trace(`Attaching model settings to form`);\r\n        this.attachModelSettingsToForm(formGroup, settings);\r\n\r\n        return formGroup;\r\n    }\r\n\r\n    /**\r\n     * Adds an array item property to an existing form array\r\n     * @param property ArrayItemProperty to for the array item to be added\r\n     * @param parentFormArray The parent FormArray\r\n     * @param initialValue Initial value of the form array item\r\n     * @param options Options for adding new array item property\r\n     */\r\n    addArrayItemPropertyControl<T>(\r\n        property: ArrayItemProperty<T>,\r\n        parentFormArray: FormArray,\r\n        initialValue?: any,\r\n        options?: AddArrayItemPropertyOptions\r\n    ): void {\r\n        const control = this.buildAbstractControl(property, initialValue);\r\n        const willBeLastItem = !options || !this.commonSvc.isZeroOrGreater(options.index) || options.index >= parentFormArray.length;\r\n\r\n        if (willBeLastItem)\r\n            parentFormArray.push(control);\r\n        else\r\n            parentFormArray.insert(options.index, control);\r\n\r\n        const modelSettings = this.getModelSettingsFromForm(parentFormArray.root as FormGroup);\r\n        this.resetDependencySubscriptions(parentFormArray.root, modelSettings.properties);\r\n\r\n        // we need to do this because the item could have been added at any index in the array, and we need\r\n        // trigger a value change to trigger any dependency propertiy valdidations\r\n        this.triggerValueChange(parentFormArray);\r\n    }\r\n\r\n    /**\r\n     * Extends validators generated by ng-form-rules with your own validators\r\n     * @param control Control to extends the validators for\r\n     * @param validator Validator to add\r\n     */\r\n    extendValidator(control: AbstractControl, validator: ValidatorFn | ValidatorFn[]): void {\r\n        if (!validator) return;\r\n\r\n        const validatorArray = Array.isArray(validator) ? validator : [validator];\r\n        control.setValidators([control.validator, ...validatorArray]\r\n            .filter(validatorFn => !!validatorFn));\r\n    }\r\n\r\n    /**\r\n     * Extends async validators generated by ng-form-rules with your own async validators\r\n     * @param control Control to extends the async validators for\r\n     * @param asyncValidator Async validator to add\r\n     */\r\n    extendAsyncValidator(control: AbstractControl, asyncValidator: AsyncValidatorFn | AsyncValidatorFn[]): void {\r\n        if (!asyncValidator) return;\r\n\r\n        const asyncValidatorArray = Array.isArray(asyncValidator) ? asyncValidator : [asyncValidator];\r\n        control.setAsyncValidators([control.asyncValidator, ...asyncValidatorArray]\r\n            .filter(asyncValidatorFn => !!asyncValidatorFn));\r\n    }\r\n\r\n    private buildAbstractControl<T>(property: PropertyBase<T>, initialValue?: any): AbstractControl {\r\n        let control: AbstractControl;\r\n\r\n        if (property.arrayItemProperty) control = this.buildArray(property.arrayItemProperty, initialValue, property.updateOn);\r\n        else if (property.properties) control = this.buildGroup(property.properties, initialValue, property.updateOn);\r\n        else control = this.buildControl(initialValue, property.updateOn);\r\n\r\n        // setup validation tests on value change\r\n        control.setValidators(this.buildValidatorFunction(property));\r\n        control.setAsyncValidators(this.buildAsyncValidatorFunction(property));\r\n\r\n        // setup edit tests on value change\r\n        control.valueChanges\r\n            .pipe(\r\n                this.applyValueChangeOptions(property.valueChangeOptions.self.edit)\r\n            )\r\n            .subscribe(value => {\r\n                this.persistEditTests(control, property);\r\n            });\r\n\r\n        return control;\r\n    }\r\n\r\n    private buildControl<T>(initialValue: any, updateOn?: UpdateOn): FormControl {\r\n        return new FormControl(initialValue, { updateOn: updateOn });\r\n    }\r\n\r\n    private buildGroup<T>(properties: Property<T>[], initialValue: any, updateOn?: UpdateOn): FormGroup {\r\n        const formGroup = new FormGroup({}, { updateOn: updateOn });\r\n\r\n        (properties || []).forEach(p => {\r\n            const propertyValue = initialValue ? initialValue[p.name] : null;\r\n            const ctrl = this.buildAbstractControl(p, propertyValue);\r\n            formGroup.addControl(p.name, ctrl);\r\n        });\r\n\r\n        return formGroup;\r\n    }\r\n\r\n    private buildArray<T>(property: ArrayItemProperty<T>, initialValue: any[], updateOn?: UpdateOn): FormArray {\r\n        initialValue = Array.isArray(initialValue) ? initialValue : [];\r\n\r\n        return new FormArray(\r\n            initialValue.map(v => this.buildAbstractControl(property, v)),\r\n            { updateOn: updateOn }\r\n        );\r\n    }\r\n\r\n    private buildValidatorFunction<T>(property: PropertyBase<T>): ValidatorFn {\r\n        const syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);\r\n        if (!syncGroups.sync.length) return null;\r\n\r\n        return (control: AbstractControl): ValidationErrors => {\r\n            const controlContextValues = this.getControlContextValues(control, property);\r\n\r\n            const testResults = this.rulesEngineSvc\r\n                .runTests(controlContextValues.relative, syncGroups.sync, {\r\n                    rootData: controlContextValues.root,\r\n                    controlState: ControlState.create(control)\r\n                });\r\n\r\n            if (testResults.results.length) {\r\n                this.traceSvc.trace(`Validated property \"${property.absolutePath}\". ` +\r\n                    this.buildTestResultStatsString(testResults));\r\n            }\r\n\r\n            return this.mapToReactiveFormsValidationErrors(testResults);\r\n        };\r\n    }\r\n\r\n    private buildAsyncValidatorFunction<T>(property: PropertyBase<T>): AsyncValidatorFn {\r\n        const rawAsyncFunc = this.buildAsyncValidatorFunctionRaw(property);\r\n\r\n        if (!rawAsyncFunc) return null;\r\n\r\n        const values = new BehaviorSubject<AbstractControl>(null);\r\n        const valid$ = values.pipe(\r\n            this.applyAsyncValidValueChangeOptions(property.valueChangeOptions.self.asyncValid),\r\n            switchMap(x => {\r\n                // pass through means we did not execute the ng-form-rules async tests\r\n                if (x.passthrough) {\r\n                    const currentErrors = x.control.errors || {};\r\n                    const lastNgFormRulesErrors = this.getLastErrorForControl(x.control);\r\n\r\n                    // return the last ng-form-rules errors (if any) alongside non ng-form-rules errors.\r\n                    // this handles scenario where debounce and distinct are used and state goes from:\r\n                    //    invalid -> make changes and back them out -> valid\r\n                    return of(Object.assign(currentErrors, { ngFormRules: lastNgFormRulesErrors } as ReactiveFormsValidationErrors));\r\n                } else {\r\n                    return rawAsyncFunc(x.control);\r\n                }\r\n            }),\r\n            take(1)\r\n        );\r\n\r\n        return (control: AbstractControl): Promise<ValidationErrors> | Observable<ValidationErrors> => {\r\n            values.next(control);\r\n            return valid$;\r\n        };\r\n    }\r\n\r\n    private buildAsyncValidatorFunctionRaw<T>(property: PropertyBase<T>): AsyncValidatorFn {\r\n        const syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);\r\n        if (!syncGroups.async.length) return null;\r\n\r\n        return (control: AbstractControl) => {\r\n            const controlContextValues = this.getControlContextValues(control, property);\r\n\r\n            return this.rulesEngineSvc.runTestsAsync(controlContextValues.relative, syncGroups.async, {\r\n                rootData: controlContextValues.root,\r\n                controlState: ControlState.create(control)\r\n            }).pipe(\r\n                tap(testResults => {\r\n                    if (testResults.results.length) {\r\n                        this.traceSvc.trace(`Validated (async) property \"${property.absolutePath}\". ` +\r\n                            this.buildTestResultStatsString(testResults));\r\n                    }\r\n                }),\r\n                map(this.mapToReactiveFormsValidationErrors),\r\n                tap(x => this.setLastErrorForControl(control, (x || {}).ngFormRules))\r\n            );\r\n        };\r\n    }\r\n\r\n    private resetDependencySubscriptions<T>(\r\n        parentControl: AbstractControl,\r\n        properties: PropertyBase<T>[],\r\n    ): void {\r\n        this.removeDependencySubscriptions(properties);\r\n        this.addDependencySubscriptions(parentControl, properties);\r\n    }\r\n\r\n    private removeDependencySubscriptions<T>(\r\n        properties: PropertyBase<T>[]\r\n    ): void {\r\n        (properties || []).forEach(property => {\r\n            property.clearDependencyPropertySubscriptions();\r\n\r\n            if (property.properties) {\r\n                this.removeDependencySubscriptions(property.properties);\r\n            }\r\n\r\n            if (property.arrayItemProperty) {\r\n                this.removeDependencySubscriptions([property.arrayItemProperty]);\r\n            }\r\n        });\r\n    }\r\n\r\n    private addDependencySubscriptions<T>(\r\n        parentControl: AbstractControl,\r\n        properties: PropertyBase<T>[],\r\n        arrayIndex?: number\r\n    ): void {\r\n        (properties || []).forEach(property => {\r\n            const propertyControl = this.getPropertyFromParent(parentControl, property, arrayIndex);\r\n            if (!propertyControl) return;\r\n\r\n            this.setupEditabilityDependencySubscriptions(propertyControl, parentControl, property);\r\n            this.setupValidationDependencySubscriptions(propertyControl, parentControl, property);\r\n\r\n            if (property.properties) {\r\n                this.addDependencySubscriptions(propertyControl, property.properties);\r\n            }\r\n\r\n            if (property.arrayItemProperty) {\r\n                // if there is an arrayItemProperty we know that we are working with a FormArray control\r\n                const formArrayControl = (propertyControl as FormArray);\r\n                for (let i = 0; i < formArrayControl.length; i++) {\r\n                    this.addDependencySubscriptions(formArrayControl, [property.arrayItemProperty], i);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private setupValidationDependencySubscriptions<T>(\r\n        propertyControl: AbstractControl, parentControl: AbstractControl, property: PropertyBase<T>\r\n    ): void {\r\n        const dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.valid);\r\n\r\n        dependencyPropNames.forEach(d => {\r\n            const dependencyControl = this.findControlRelatively(parentControl, d);\r\n\r\n            if (!dependencyControl) return;\r\n\r\n            const sub$ = dependencyControl.valueChanges\r\n                .pipe(\r\n                    this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.valid)\r\n                )\r\n                .subscribe(value => {\r\n                    this.setForceAsyncValidationTestForControl(propertyControl, true);\r\n                    propertyControl.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n                });\r\n\r\n            property.addDependencyPropertySubscription(sub$);\r\n        });\r\n    }\r\n\r\n    private setupEditabilityDependencySubscriptions<T>(\r\n        propertyControl: AbstractControl,\r\n        parentControl: AbstractControl,\r\n        property: PropertyBase<T>\r\n    ): void {\r\n        const dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.edit);\r\n\r\n        dependencyPropNames.forEach(dpn => {\r\n            const dependencyControl = this.findControlRelatively(parentControl, dpn);\r\n\r\n            if (!dependencyControl) return;\r\n\r\n            // setup control to perform edit tests when dependency property changes\r\n            const sub$ = dependencyControl.valueChanges\r\n                .pipe(\r\n                    this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.edit)\r\n                )\r\n                .subscribe(value => {\r\n                    this.persistEditTests(propertyControl, property);\r\n                });\r\n\r\n            property.addDependencyPropertySubscription(sub$);\r\n        });\r\n    }\r\n\r\n    private persistEditTests<T>(propertyControl: AbstractControl, property: PropertyBase<T>): void {\r\n        const controlContextValues = this.getControlContextValues(propertyControl, property);\r\n\r\n        this.rulesEngineSvc.editable(controlContextValues.relative, property, {\r\n            rootData: controlContextValues.root,\r\n            controlState: ControlState.create(propertyControl)\r\n        }).subscribe(testResults => {\r\n            if (testResults.results.length) {\r\n                this.traceSvc.trace(`Editable property \"${property.absolutePath}\". ` +\r\n                    this.buildTestResultStatsString(testResults));\r\n            }\r\n\r\n            if (testResults.passed && propertyControl.disabled)\r\n                propertyControl.enable({ emitEvent: false });\r\n            else if (!testResults.passed && propertyControl.enabled)\r\n                propertyControl.disable({ emitEvent: false });\r\n        });\r\n    }\r\n\r\n    private applyAsyncValidValueChangeOptions(\r\n        valueChangeOptions: ValueChangeOptions\r\n    ): OperatorFunction<AbstractControl, AsyncValidationPassthroughable> {\r\n        return (source$: Observable<AbstractControl>): Observable<AsyncValidationPassthroughable> => {\r\n            let lastValue: any;\r\n            let isForce: boolean;\r\n\r\n            return source$.pipe(\r\n                tap(control => {\r\n                    isForce = this.doesControlHaveForcedAsyncValidation(control);\r\n                    this.setForceAsyncValidationTestForControl(control, false);\r\n                }),\r\n                debounce(x => {\r\n                    return isForce || valueChangeOptions.debounceMilliseconds > 0\r\n                        ? timer(valueChangeOptions.debounceMilliseconds)\r\n                        : EMPTY;\r\n                }),\r\n                map(control => {\r\n                    return {\r\n                        control: control,\r\n                        passthrough: !(control.value !== lastValue || !valueChangeOptions.distinctUntilChanged || isForce)\r\n                    } as AsyncValidationPassthroughable;\r\n                }),\r\n                tap(x => {\r\n                    if (!x.passthrough) lastValue = x.control.value;\r\n                })\r\n            );\r\n        };\r\n    }\r\n\r\n    private applyValueChangeOptions(valueChangeOptions: ValueChangeOptions): OperatorFunction<any, any> {\r\n        return (source$: Observable<any>): Observable<any> => {\r\n            return source$.pipe(\r\n                debounce(x => {\r\n                    return valueChangeOptions.debounceMilliseconds > 0\r\n                        ? timer(valueChangeOptions.debounceMilliseconds)\r\n                        : EMPTY;\r\n                }),\r\n                valueChangeOptions.distinctUntilChanged ? distinctUntilChanged() : tap()\r\n            );\r\n        };\r\n    }\r\n\r\n    private getControlContextValues<T>(control: AbstractControl, property: Property<T> | ArrayItemProperty<T>): ControlContextValues {\r\n        const rootValue = (control.root as FormGroup).getRawValue();\r\n\r\n        // use the control value if an array item, otherwise use the parent control\r\n        const relativeValue = PropertyBase.isArrayItemProperty(property)\r\n            ? control.value\r\n            : control.parent.getRawValue();\r\n\r\n        return {\r\n            root: rootValue,\r\n            relative: relativeValue\r\n        };\r\n    }\r\n\r\n    private getPropertyFromParent<T>(\r\n        parentControl: AbstractControl,\r\n        property: PropertyBase<T>,\r\n        arrayIndex?: number\r\n    ) {\r\n        return PropertyBase.isArrayItemProperty(property)\r\n            ? (parentControl as FormArray).at(arrayIndex)\r\n            : parentControl.get((property as Property<T>).name);\r\n    }\r\n\r\n    private mapToReactiveFormsValidationErrors<T>(testResults: TestResultsBase<T>): ReactiveFormsValidationErrors {\r\n        // if passed, Angular reactive forms wants us to return null, otherwise return an object with the validation info\r\n        if (!testResults || testResults.passed) return null;\r\n\r\n        const failed: { [key: string]: ReactiveFormsFailedValdation } = {};\r\n\r\n        testResults.failedResults.forEach(test => {\r\n            failed[test.name] = { message: test.message };\r\n        });\r\n\r\n        return {\r\n            ngFormRules: {\r\n                message: testResults.message,\r\n                failed: failed\r\n            } as ReactiveFormsValidationErrorsData\r\n        };\r\n    }\r\n\r\n    private findControlRelatively(control: AbstractControl, path: string) {\r\n        const relativePaths = this.buildControlRelativePathArray(path);\r\n\r\n        if (!relativePaths.length) return null;\r\n\r\n        let result: AbstractControl;\r\n        relativePaths.forEach(pathSegment => {\r\n            result = this.getControlByPathSegment(result || control, pathSegment);\r\n            if (!result) return;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    private buildControlRelativePathArray(relativePath: string): string[] {\r\n        const result: string[] = [];\r\n\r\n        if (!relativePath || typeof relativePath !== \"string\") return result;\r\n\r\n        // takes care of './', '../', and '/'\r\n        const slashSeparated = relativePath.split(\"/\");\r\n\r\n        slashSeparated.forEach(slashItem => {\r\n            const dotSeparated = slashItem.split(\".\")\r\n                .filter(dotItem => !!dotItem);\r\n\r\n            if (dotSeparated.length)\r\n                result.push(...dotSeparated);\r\n            else\r\n                result.push(slashItem);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    private getControlByPathSegment(control: AbstractControl, pathSegment: string): AbstractControl {\r\n        switch (pathSegment) {\r\n            case \"\":\r\n                return control.root;\r\n            case \"..\":\r\n                return control.parent;\r\n            case \".\":\r\n                return control;\r\n            default:\r\n                return control.get(pathSegment);\r\n        }\r\n    }\r\n\r\n    private buildTestResultStatsString<T>(testResults: TestResultsBase<T>) {\r\n        return `Executed ${testResults.results.length} tests ` +\r\n            `(${testResults.passedResults.length} PASS | ` +\r\n            `${testResults.failedResults.length} FAIL | `\r\n            + `${testResults.skippedResults.length} SKIP)`;\r\n    }\r\n\r\n    private attachModelSettingsToForm<T>(formGroup: FormGroup, modelSettings: AbstractModelSettings<T>): void {\r\n        formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME] = modelSettings;\r\n    }\r\n\r\n    private getModelSettingsFromForm<T>(formGroup: FormGroup): AbstractModelSettings<T> {\r\n        return formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME] as AbstractModelSettings<T>;\r\n    }\r\n\r\n    private setForceAsyncValidationTestForControl(control: AbstractControl, force: boolean): void {\r\n        control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME] = force;\r\n    }\r\n\r\n    private setLastErrorForControl(control: AbstractControl, errors: ReactiveFormsValidationErrorsData): void {\r\n        control[ReactiveFormsRuleService.CONTROL_LAST_ERROR] = errors;\r\n    }\r\n\r\n    private getLastErrorForControl(control: AbstractControl): ReactiveFormsValidationErrorsData {\r\n        return control[ReactiveFormsRuleService.CONTROL_LAST_ERROR];\r\n    }\r\n\r\n    private doesControlHaveForcedAsyncValidation(control: AbstractControl): boolean {\r\n        return !!(control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME]);\r\n    }\r\n\r\n    private triggerValueChange(control: AbstractControl): void {\r\n        control.patchValue(control.value);\r\n    }\r\n}\r\n\r\ninterface ControlContextValues {\r\n    root: any;\r\n    relative: any;\r\n}\r\n\r\ninterface AsyncValidationPassthroughable {\r\n    control: AbstractControl;\r\n    passthrough: boolean;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TraceService } from './trace/trace.service';\r\nimport { CommonService } from './common/common.service';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [],\r\n  providers: [\r\n      TraceService,\r\n      CommonService\r\n  ]\r\n})\r\nexport class UtilsModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RulesEngineService } from './services/rules-engine/rules-engine.service';\r\nimport { ReactiveFormsRuleService } from './services/reactive-forms-rule/reactive-forms-rule.service';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { UtilsModule } from '../utils/utils.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        UtilsModule\r\n    ],\r\n    providers: [\r\n        RulesEngineService,\r\n        ReactiveFormsRuleService\r\n    ],\r\n    declarations: []\r\n})\r\nexport class RulesEngineModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RulesEngineModule } from '../rules-engine/rules-engine.module';\r\n\r\n/**\r\n * Main module for ng-form-rules\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RulesEngineModule,\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n      RulesEngineModule,\r\n  ]\r\n})\r\nexport class FormRulesModule { }\r\n","import { PropertyBase } from \"./property-base\";\r\n\r\n/**\r\n * Non-array item property\r\n */\r\nexport class Property<T> extends PropertyBase<T> {\r\n    private _name: string;\r\n\r\n    /**\r\n     * Name of the property\r\n     */\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this._name = name;\r\n    }\r\n}","import { PropertyBase } from \"./property-base\";\r\n\r\n/**\r\n * A property representing an array item (e.g. an array of Address objects)\r\n */\r\nexport class ArrayItemProperty<T> extends PropertyBase<T> {}","import { Property } from '../models/property';\r\nimport { RuleGroup } from '../models/rule-group';\r\nimport { Rule } from '../models/rule';\r\nimport { Test } from '../models/test';\r\nimport { ArrayItemProperty } from '../models/array-item-property';\r\nimport { RuleSet } from '../models/rule-set';\r\nimport { RuleFunc } from '../models/rule-func';\r\nimport { RuleOptions } from '../models/rule-options';\r\nimport { AsyncRuleFunc } from '../models/async-rule-func';\r\nimport { RuleGroupOptions } from '../models/rule-group-options';\r\nimport { ResultsPassRequirement } from '../models/results-pass-requirement';\r\n\r\n/**\r\n * Utility class for building model settings\r\n */\r\nexport class ModelSettingsBuilder {\r\n    /**\r\n     * Creates a property\r\n     * @param propertyName Property name\r\n     * @param extend Function to extend the property\r\n     * @returns Created property\r\n     */\r\n    property<T>(propertyName: keyof T, extend?: (prop: Property<T>) => void): Property<T> {\r\n        if (!propertyName || typeof propertyName !== 'string') throw Error('Invalid property name');\r\n\r\n        const property = new Property<T>(propertyName);\r\n\r\n        if (extend) extend(property);\r\n\r\n        return property;\r\n    }\r\n\r\n    /**\r\n     * Creates an array item property\r\n     * @param extend Function to extend the array item property\r\n     * @returns Created array item property\r\n     */\r\n    arrayItemProperty<T>(extend?: (prop: ArrayItemProperty<T>) => void): ArrayItemProperty<T> {\r\n        const property = new ArrayItemProperty<T>();\r\n\r\n        if (extend) extend(property);\r\n\r\n        return property;\r\n    }\r\n\r\n    /**\r\n     * Creates a validation test\r\n     * @param message Message when the test fails\r\n     * @param check Check rule set for the test\r\n     * @param condition Condition rule set for the test\r\n     * @returns Created validation test\r\n     */\r\n    validTest<T>(message: string, check: RuleSet<T>, condition?: RuleSet<T>): Test<T> {\r\n        return this.validNamedTest(null, message, check, condition);\r\n    }\r\n\r\n    /**\r\n     * Creates a named validation test\r\n     * @param name Name of the test\r\n     * @param message Message when the test fails\r\n     * @param check Check rule set for the test\r\n     * @param condition Condition rule set for the test\r\n     * @returns Created named validation test\r\n     */\r\n    validNamedTest<T>(name: string, message: string, check: RuleSet<T>, condition?: RuleSet<T>): Test<T> {\r\n        return {\r\n            name: name,\r\n            message: message,\r\n            check: check,\r\n            condition: condition\r\n        } as Test<T>;\r\n    }\r\n\r\n    /**\r\n     * Creates an edit test\r\n     * @param check Check rule set for the test\r\n     * @param condition Condition rule set for the test\r\n     * @returns Created edit test\r\n     */\r\n    editTest<T>(check: RuleSet<T>, condition?: RuleSet<T>): Test<T> {\r\n        return this.editNamedTest(null, check, condition);\r\n    }\r\n\r\n    /**\r\n     * Creates a named edit test\r\n     * @param name Name of the test\r\n     * @param check Check rule set for the test\r\n     * @param condition Condition rule set for the test\r\n     * @returns Created named edit test\r\n     */\r\n    editNamedTest<T>(name: string, check: RuleSet<T>, condition?: RuleSet<T>): Test<T> {\r\n        return {\r\n            name: name,\r\n            check: check,\r\n            condition: condition\r\n        } as Test<T>;\r\n    }\r\n\r\n    /**\r\n     * Creates a rule\r\n     * @param func Function for the rule\r\n     * @param options Additional rule options\r\n     * @returns Created rule\r\n     */\r\n    rule<T, R>(func: RuleFunc<T, R>, options?: RuleOptions): Rule<T> {\r\n        return this.ruleCombo(func, null, options);\r\n    }\r\n\r\n    /**\r\n     * Creates an async rule\r\n     * @param asyncFunc Async function for the rule\r\n     * @param options Additional rule options\r\n     * @returns Created rule\r\n     */\r\n    ruleAsync<T, R>(asyncFunc: AsyncRuleFunc<T, R>, options?: RuleOptions): Rule<T> {\r\n        return this.ruleCombo(null, asyncFunc, options);\r\n    }\r\n\r\n    /**\r\n     * Creates a combo rule that has both syncronous and async functions\r\n     * @param func Function for the rule\r\n     * @param asyncFunc Async function for the rule\r\n     * @param options Additional rule options\r\n     * @returns Created rule\r\n     */\r\n    ruleCombo<T, R>(func: RuleFunc<T, R>, asyncFunc: AsyncRuleFunc<T, R>, options?: RuleOptions): Rule<T> {\r\n        return {\r\n            func: func,\r\n            asyncFunc: asyncFunc,\r\n            options: options\r\n        } as Rule<T>;\r\n    }\r\n\r\n    /**\r\n     * Creates a rule group\r\n     * @param ruleSets Rule sets for the rule group\r\n     * @param options Additional rule group options\r\n     * @returns Created rule group\r\n     */\r\n    ruleGroup<T>(ruleSets: RuleSet<T>[], options?: RuleGroupOptions): RuleGroup<T> {\r\n        return {\r\n            rules: ruleSets,\r\n            options: options || { resultRequirements: ResultsPassRequirement.AllPass }\r\n        } as RuleGroup<T>;\r\n    }\r\n}","import { ModelSettingsBuilder } from \"../helper/model-settings-builder\";\r\nimport { Property } from \"./property\";\r\n\r\n/**\r\n * Base class for model settings\r\n */\r\nexport abstract class AbstractModelSettings<T> {\r\n    private _name: string;\r\n\r\n    /**\r\n     * Name of the model setting\r\n     */\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Helper for building properties, tests, and rules\r\n     */\r\n    protected builder: ModelSettingsBuilder;\r\n\r\n    /**\r\n     * Properties configured for the model settings\r\n     */\r\n    properties: Property<T>[];\r\n\r\n    /**\r\n     * Creates model settings\r\n     * @param name Name of the model settings\r\n     */\r\n    constructor(name: string) {\r\n        this.builder = new ModelSettingsBuilder();\r\n        this._name = name;\r\n        this.properties = this.buildProperties() || [];\r\n    }\r\n\r\n    /**\r\n     * Abstract function for building the properties\r\n     */\r\n    protected abstract buildProperties(): Property<T>[];\r\n}","import { TestResultsBase } from \"./test-results-base\";\r\nimport { TestResult } from \"./test-result\";\r\n\r\nexport class PropertyTestResults<T> extends TestResultsBase<T> {\r\n    constructor(public propertyName: string, results: TestResult<T>[]) {\r\n        super(results);\r\n    }\r\n}","import { AbstractModelSettings } from \"./abstract-model-settings\";\r\nimport { ModelSettingsBuilder } from \"../helper/model-settings-builder\";\r\nimport { Property } from \"./property\";\r\n\r\n/**\r\n * Class for creating adhoc (non-registered) model settings\r\n */\r\nexport class AdhocModelSettings<T> extends AbstractModelSettings<T> {\r\n    /**\r\n     * Creates model settings\r\n     * @param propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties\r\n     * @returns Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter\r\n     */\r\n    static create<T>(propertyBuilderFunc: (builder: ModelSettingsBuilder) => Property<T>[]): AbstractModelSettings<T> {\r\n        const instance = new AdhocModelSettings();\r\n        instance.properties = !!propertyBuilderFunc ? propertyBuilderFunc(instance.builder) || [] : [];\r\n\r\n        return instance;\r\n    }\r\n\r\n    private constructor() {\r\n        // since these settings are not registered, just use a static name\r\n        super('adhoc');\r\n    }\r\n\r\n    protected buildProperties(): Property<T>[] {\r\n        // this is just needed to satisfy the AbstractModelSettings<T> contract\r\n        return [];\r\n    }\r\n}","/**\r\n * Options for how and when to process value changes in a form control\r\n */\r\nexport class ValueChangeOptions {\r\n    /**\r\n     * Consider value changed only if it is different\r\n     */\r\n    distinctUntilChanged?: boolean;\r\n\r\n    /**\r\n     * Milliseconds to debounce value changes\r\n     */\r\n    debounceMilliseconds?: number;\r\n}"],"names":[],"mappings":"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"}
