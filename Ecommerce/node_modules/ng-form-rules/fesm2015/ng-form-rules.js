import { InjectionToken, Injectable, Inject, Optional, NgModule } from '@angular/core';
import { forkJoin, of, BehaviorSubject, timer, EMPTY } from 'rxjs';
import { map, flatMap, mergeMap, take, tap, switchMap, distinctUntilChanged, debounce } from 'rxjs/operators';
import { FormGroup, FormBuilder, FormControl, FormArray } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Injection token for providing an array of model settings
 */
let /** @type {?} */ MODEL_SETTINGS_TOKEN = new InjectionToken('ngfr.model-settings');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Injection token for enabling ng-form-rules tracing
 */
let /** @type {?} */ TRACE_SETTINGS_TOKEN = new InjectionToken('ngfr.trace-settings');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TraceService {
    /**
     * @param {?=} doTrace
     */
    constructor(doTrace = false) {
        this.doTrace = doTrace;
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    trace(msg) {
        if (!this.doTrace)
            return;
        const /** @type {?} */ fullMsg = `[NGFR - ${this.getTimeStamp()}] ${msg}`;
        console.log(fullMsg);
    }
    /**
     * @return {?}
     */
    getTimeStamp() {
        return (new Date).toLocaleTimeString();
    }
}
TraceService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TraceService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRACE_SETTINGS_TOKEN,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CommonService {
    /**
     * Gets unique values from an array
     * @param {?} values Values to get unique items from
     * @return {?} Unique values array
     */
    unique(values) {
        if (!Array.isArray(values))
            return [];
        return Array.from(new Set(values));
    }
    /**
     * Determines if number is zero or greater
     * @param {?} value If number is greater than or equal zero
     * @return {?}
     */
    isZeroOrGreater(value) {
        if (!value && value === 0)
            return true;
        if (!value || typeof value !== "number")
            return false;
        return value > 0;
    }
}
CommonService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Results of executing a collection of tests
 * @template T
 */
class TestResultsBase {
    /**
     * @param {?} results
     */
    constructor(results) {
        this.results = results;
        this.results = this.results || [];
    }
    /**
     * Whether the tests passed
     * @return {?}
     */
    get passed() {
        return !this.failedResults.length;
    }
    /**
     * Array of test results that passed
     * @return {?}
     */
    get passedResults() {
        return this.results.filter(x => !!x.passed && !x.skipped);
    }
    /**
     * Array of test results that failed
     * @return {?}
     */
    get failedResults() {
        return this.results.filter(x => !x.passed);
    }
    /**
     * Array of test results that were skipped
     * @return {?}
     */
    get skippedResults() {
        return this.results.filter(x => !!x.skipped);
    }
    /**
     * Message of the first test that failed
     * @return {?}
     */
    get message() {
        return this.messages[0];
    }
    /**
     * Messages of all failed tests
     * @return {?}
     */
    get messages() {
        const /** @type {?} */ messages = this.failedResults.map(x => x.message);
        return Array.from(new Set(messages));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Base class for a property
 * @abstract
 * @template T
 */
class PropertyBase {
    constructor() {
        this._dependencyPropertySubscriptions = [];
        /**
         * Validation tests
         */
        this.valid = [];
        /**
         * Editability tests
         */
        this.edit = [];
        /**
         * The event name for control to update upon.
         */
        this.updateOn = 'change';
        /**
         * Options for how to respond to value changes on property control and dependency controls
         */
        this.valueChangeOptions = {
            dependencyProperties: {
                valid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
            },
            self: {
                asyncValid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
            }
        };
    }
    /**
     * Absolute path to the property from root
     * @return {?}
     */
    get absolutePath() {
        return this._absolutePath;
    }
    /**
     * Absolute path to property from root
     * @return {?}
     */
    get dependencyPropertySubscriptions() {
        return this._dependencyPropertySubscriptions;
    }
    /**
     * Absolute path to property from root
     * @return {?}
     */
    get ownerModelSettingsName() {
        return this._ownerModelSettingsName;
    }
    /**
     * Determines if the property is an ArrayItemProperty
     * @template T
     * @param {?} property Property to check
     * @return {?} Whether or not the property is an ArrayItemProperty
     */
    static isArrayItemProperty(property) {
        return !(/** @type {?} */ (property)).name;
    }
    /**
     * DO NOT CALL! Internal use only
     * @param {?} absolutePath Absolute path to the property from the root
     * @return {?}
     */
    setAbsolutePath(absolutePath) {
        this._absolutePath = absolutePath;
    }
    /**
     * DO NOT CALL! Internal use only
     * @param {?} subscription Subscription for the dependency property
     * @return {?}
     */
    addDependencyPropertySubscription(subscription) {
        this._dependencyPropertySubscriptions.push(subscription);
    }
    /**
     * DO NOT CALL! Internal use only
     * @return {?}
     */
    clearDependencyPropertySubscriptions() {
        this.dependencyPropertySubscriptions.forEach(sub$ => sub$.unsubscribe());
        this._dependencyPropertySubscriptions = [];
    }
    /**
     * DO NOT CALL! Internal use only
     * @param {?} name Name of the owner model settings
     * @return {?}
     */
    setOwnerModelSettingsName(name) {
        this._ownerModelSettingsName = name;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const ProcessResultType = {
    Passed: 0,
    Failed: 1,
    Skipped: 2,
};
ProcessResultType[ProcessResultType.Passed] = "Passed";
ProcessResultType[ProcessResultType.Failed] = "Failed";
ProcessResultType[ProcessResultType.Skipped] = "Skipped";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const ResultsPassRequirement = {
    /**
         * All results must pass
         */
    AllPass: 0,
    /**
         * Any results have passed
         */
    AnyPass: 1,
};
ResultsPassRequirement[ResultsPassRequirement.AllPass] = "AllPass";
ResultsPassRequirement[ResultsPassRequirement.AnyPass] = "AnyPass";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Engine that digests model settings and applies their rules appropriately
 */
class RulesEngineService {
    /**
     * @param {?} settings
     * @param {?} traceSvc
     * @param {?} commonSvc
     */
    constructor(settings, traceSvc, commonSvc) {
        this.traceSvc = traceSvc;
        this.commonSvc = commonSvc;
        this.registeredSettings = {};
        if (!Array.isArray(settings))
            return;
        settings.forEach(setting => {
            this.initializeModelSetting(setting);
            this.registeredSettings[setting.name] = setting;
        });
    }
    /**
     * Initializes model settings and prepares them to be used in a form group
     * @param {?} setting Model setting to initialize
     * @return {?}
     */
    initializeModelSetting(setting) {
        this.traceSvc.trace(`Initializing model settings "${setting.name}"`);
        this.setPropertyMetadata(setting.properties, setting.name);
    }
    /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    getModelSettings(name) {
        this.traceSvc.trace(`Retrieving model settings "${name}"`);
        const /** @type {?} */ settings = this.registeredSettings[name];
        // create new object
        return settings
            ? Object.assign({}, this.registeredSettings[name])
            : null;
    }
    /**
     * Gets the dependency properties for an array of tests
     * @template T
     * @param {?} tests Tests to get the dependency properties for
     * @return {?} Dependency properties
     */
    getDependencyProperties(tests) {
        if (!tests)
            return [];
        const /** @type {?} */ deps = tests
            .map(t => this.getDependencyPropertiesFromTest(t))
            .reduce((prev, current) => prev.concat(current), []);
        return this.commonSvc.unique(deps);
    }
    /**
     * Gets tests grouped by their sync type (e.g. sync vs. async)
     * @template T
     * @param {?} tests Test to groups
     * @return {?} Tests grouped by sync type
     */
    groupTestsBySyncType(tests) {
        const /** @type {?} */ testGroups = /** @type {?} */ ({
            sync: [],
            async: []
        });
        if (!tests)
            return testGroups;
        tests.forEach(test => {
            const /** @type {?} */ testFuncTypes = /** @type {?} */ ({
                sync: false,
                async: false
            });
            const /** @type {?} */ conditionResults = this.getConfiguredFuncTypes(test.condition);
            const /** @type {?} */ checkResults = this.getConfiguredFuncTypes(test.check);
            testFuncTypes.sync = conditionResults.sync || checkResults.sync;
            testFuncTypes.async = conditionResults.async || checkResults.async;
            // if there is an async func anywhere in the test's rule sets, then it is considered an async test
            if (testFuncTypes.sync && !testFuncTypes.async)
                testGroups.sync.push(test);
            if (testFuncTypes.async)
                testGroups.async.push(test);
        });
        return testGroups;
    }
    /**
     * Runs validation tests
     * @template T
     * @param {?} data Data to run validation tests against
     * @param {?} property Property to run validation tests for
     * @param {?=} state
     * @return {?} Results of validation tests
     */
    validate(data, property, state) {
        return this.runAllTests(data, property.valid, state)
            .pipe(map((results) => {
            results.propertyName = property.absolutePath;
            return /** @type {?} */ (results);
        }));
    }
    /**
     * Runs editability tests
     * @template T
     * @param {?} data Data to run editability tests against
     * @param {?} property Property to run editability tests for
     * * \@returns Results of editability tests
     * @param {?=} state
     * @return {?}
     */
    editable(data, property, state) {
        return this.runAllTests(data, property.edit, state)
            .pipe(map((results) => {
            results.propertyName = property.absolutePath;
            return /** @type {?} */ (results);
        }));
    }
    /**
     * Runs an array of sync tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    runTests(data, tests, state) {
        if (!tests || !tests.length)
            return new TestResultsBase([]);
        const /** @type {?} */ testResults = tests
            .map(t => this.runTest(data, t, state))
            .filter(x => !!x);
        return new TestResultsBase(testResults);
    }
    /**
     * Runs an array of async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    runTestsAsync(data, tests, state) {
        if (!tests || !tests.length)
            return of(new TestResultsBase([]));
        const /** @type {?} */ runTest$ = tests
            .map(test => this.runTestAsync(data, test, state));
        return forkJoin(runTest$)
            .pipe(map(testResults => new TestResultsBase(testResults.filter(x => !!x))));
    }
    /**
     * Runs an array of sync and async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    runAllTests(data, tests, state) {
        if (!tests || !tests.length)
            return of(new TestResultsBase([]));
        const /** @type {?} */ syncGroups = this.groupTestsBySyncType(tests);
        const /** @type {?} */ syncTestResults = of(this.runTests(data, syncGroups.sync, state));
        return syncTestResults.pipe(mergeMap(result => {
            if (!result.passed)
                return of(result);
            return this.runTestsAsync(data, syncGroups.async, state);
        }), take(1));
    }
    /**
     * Performs sync test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    runTest(data, test, state) {
        if (!test)
            return null;
        const /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
        const /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
        const /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
        const /** @type {?} */ conditionsRuleSetResult = this.processRuleSet(data, test.condition, state);
        if (conditionsRuleSetResult === ProcessResultType.Failed)
            return skippedTestResult;
        const /** @type {?} */ checkRuleSetResult = this.processRuleSet(data, test.check, state);
        switch (checkRuleSetResult) {
            case ProcessResultType.Passed:
                return passedTestResult;
            case ProcessResultType.Failed:
                return failedTestResult;
            case ProcessResultType.Skipped:
            default:
                return skippedTestResult;
        }
    }
    /**
     * Performs async test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    runTestAsync(data, test, state) {
        if (!test)
            return of(null);
        const /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
        const /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
        const /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
        const /** @type {?} */ conditionsRuleSetResult$ = this.processRuleSetAsync(data, test.condition, state);
        const /** @type {?} */ checkRuleSetResult$ = this.processRuleSetAsync(data, test.check, state);
        return conditionsRuleSetResult$
            .pipe(flatMap(conditionsRuleSetResult => {
            if (conditionsRuleSetResult === ProcessResultType.Failed)
                return of(skippedTestResult);
            return checkRuleSetResult$
                .pipe(map(checkRuleSetResult => {
                switch (checkRuleSetResult) {
                    case ProcessResultType.Passed:
                        return passedTestResult;
                    case ProcessResultType.Failed:
                        return failedTestResult;
                    case ProcessResultType.Skipped:
                    default:
                        return skippedTestResult;
                }
            }));
        }));
    }
    /**
     * Processes a sync rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    processRuleSet(data, ruleSet, state) {
        if (!ruleSet)
            return ProcessResultType.Skipped;
        const /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        return isRuleGroup
            ? this.processRuleGroup(data, /** @type {?} */ (ruleSet), state)
            : this.processRule(data, /** @type {?} */ (ruleSet), state);
    }
    /**
     * Processes an async rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    processRuleSetAsync(data, ruleSet, state) {
        if (!ruleSet)
            return of(ProcessResultType.Skipped);
        const /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        return isRuleGroup
            ? this.processRuleGroupAsync(data, /** @type {?} */ (ruleSet), state)
            : this.processRuleAsync(data, /** @type {?} */ (ruleSet), state);
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    processRuleGroup(data, ruleGroup, state) {
        if (!ruleGroup.rules)
            return ProcessResultType.Skipped;
        let /** @type {?} */ passedCount = 0;
        let /** @type {?} */ skippedCount = 0;
        for (let /** @type {?} */ i = 0; i < ruleGroup.rules.length; i++) {
            const /** @type {?} */ rule = ruleGroup.rules[i];
            const /** @type {?} */ ruleSetResult = this.processRuleSet(data, rule, state);
            if (this.canShortCircuitRuleGroup(ruleSetResult, ruleGroup))
                return ruleSetResult;
            if (ruleSetResult == ProcessResultType.Passed)
                passedCount++;
            else if (ruleSetResult == ProcessResultType.Skipped)
                skippedCount++;
        }
        // if we skipped them all, then return skipped
        if (skippedCount === ruleGroup.rules.length)
            return ProcessResultType.Skipped;
        // if we got this far, make sure all tests were passed
        return passedCount === ruleGroup.rules.length ? ProcessResultType.Passed : ProcessResultType.Failed;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    processRuleGroupAsync(data, ruleGroup, state) {
        if (!ruleGroup.rules)
            return of(ProcessResultType.Skipped);
        const /** @type {?} */ asyncRuleSetResults$ = ruleGroup.rules.map(x => this.processRuleSetAsync(data, x, state));
        return forkJoin(asyncRuleSetResults$).pipe(map(ruleSetResults => {
            const /** @type {?} */ counts = {
                passed: ruleSetResults.filter(x => x === ProcessResultType.Passed).length,
                failed: ruleSetResults.filter(x => x === ProcessResultType.Failed).length,
                skipped: ruleSetResults.filter(x => x === ProcessResultType.Skipped).length,
            };
            const /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
            if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass && counts.passed > 0)
                return ProcessResultType.Passed;
            if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass && counts.passed === ruleSetResults.length)
                return ProcessResultType.Passed;
            if (counts.skipped === ruleSetResults.length)
                return ProcessResultType.Skipped;
            return ProcessResultType.Failed;
        }));
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    processRule(data, rule, state) {
        if (!rule.func)
            return ProcessResultType.Skipped;
        const /** @type {?} */ rootData = state ? state.rootData : null;
        return rule.func(data, rootData) ? ProcessResultType.Passed : ProcessResultType.Failed;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    processRuleAsync(data, rule, state) {
        if (!rule.func && !rule.asyncFunc)
            return of(ProcessResultType.Skipped);
        const /** @type {?} */ rootData = state ? state.rootData : null;
        const /** @type {?} */ funcResult = rule.func
            ? of(rule.func(data, rootData))
            : rule.asyncFunc(data, rootData);
        return funcResult
            .pipe(map(passed => passed ? ProcessResultType.Passed : ProcessResultType.Failed));
    }
    /**
     * @template T
     * @param {?} ruleSetResult
     * @param {?} ruleGroup
     * @return {?}
     */
    canShortCircuitRuleGroup(ruleSetResult, ruleGroup) {
        const /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
        return (
        // it passed, and we only need one to pass
        (ruleSetResult == ProcessResultType.Passed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass)
            ||
                // if failed, and we need all to pass
                (ruleSetResult == ProcessResultType.Failed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass));
    }
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    isRuleGroup(ruleSet) {
        const /** @type {?} */ rule = /** @type {?} */ (ruleSet);
        return !rule.func && !rule.asyncFunc;
    }
    /**
     * @template T
     * @param {?} test
     * @return {?}
     */
    getDependencyPropertiesFromTest(test) {
        const /** @type {?} */ checkDeps = this.getDependencyPropertiesFromRuleSet(test.check);
        const /** @type {?} */ conditionDeps = this.getDependencyPropertiesFromRuleSet(test.condition);
        return this.commonSvc.unique(checkDeps.concat(conditionDeps));
    }
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    getDependencyPropertiesFromRuleSet(ruleSet) {
        if (!ruleSet)
            return [];
        const /** @type {?} */ result = [];
        if (this.isRuleGroup(ruleSet)) {
            const /** @type {?} */ ruleGroup = /** @type {?} */ (ruleSet);
            ruleGroup.rules.forEach(x => {
                result.push(...this.commonSvc.unique(this.getDependencyPropertiesFromRuleSet(x)));
            });
        }
        const /** @type {?} */ rule = /** @type {?} */ (ruleSet);
        if (rule.options && Array.isArray(rule.options.dependencyProperties)) {
            result.push(...this.commonSvc.unique(rule.options.dependencyProperties));
        }
        return this.commonSvc.unique(result);
    }
    /**
     * @param {?} properties
     * @param {?} modelSettingsName
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    setPropertyMetadata(properties, modelSettingsName, currentAbsolutePath = '') {
        if (!properties)
            return;
        properties.forEach(prop => {
            const /** @type {?} */ newAbsolutePath = this.setPropertyAbsolutePath(prop, currentAbsolutePath);
            this.fillInEmptyTestNames(prop);
            prop.setOwnerModelSettingsName(modelSettingsName);
            if (prop.properties) {
                this.setPropertyMetadata(prop.properties, modelSettingsName, newAbsolutePath);
            }
            else if (prop.arrayItemProperty) {
                this.setPropertyMetadata([prop.arrayItemProperty], modelSettingsName, newAbsolutePath);
            }
        });
    }
    /**
     * @param {?} property
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    setPropertyAbsolutePath(property, currentAbsolutePath = '') {
        const /** @type {?} */ isArrayItemProperty = PropertyBase.isArrayItemProperty(property);
        const /** @type {?} */ newAbsolutePathSegment = isArrayItemProperty ? '[]' : (/** @type {?} */ (property)).name;
        const /** @type {?} */ isAtRoot = !currentAbsolutePath;
        const /** @type {?} */ newAbsolutePath = `${currentAbsolutePath}${isAtRoot ? '' : '.'}${newAbsolutePathSegment}`;
        // set absolute path for property
        property.setAbsolutePath(newAbsolutePath);
        return newAbsolutePath;
    }
    /**
     * @param {?} property
     * @return {?}
     */
    fillInEmptyTestNames(property) {
        property.valid
            .filter(test => !test.name)
            .forEach((test, i) => test.name = `validTest${i}`);
        property.edit
            .filter(test => !test.name)
            .forEach((test, i) => test.name = `editTest${i}`);
    }
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    getConfiguredFuncTypes(ruleSet) {
        if (!ruleSet)
            return { sync: false, async: false };
        const /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        if (isRuleGroup) {
            const /** @type {?} */ ruleGroup = /** @type {?} */ (ruleSet);
            const /** @type {?} */ results = ruleGroup.rules
                .map(rs => {
                return this.getConfiguredFuncTypes(rs);
            });
            return {
                sync: results.findIndex(x => !!x.sync) >= 0,
                async: results.findIndex(x => !!x.async) >= 0,
            };
        }
        else {
            const /** @type {?} */ rule = /** @type {?} */ (ruleSet);
            return {
                sync: !!rule.func,
                async: !!rule.asyncFunc
            };
        }
    }
}
RulesEngineService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
RulesEngineService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [MODEL_SETTINGS_TOKEN,] },] },
    { type: TraceService, },
    { type: CommonService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * State of an Angular AbstractControl at the time of running a test
 */
class ControlState {
    /**
     * @param {?} control
     */
    constructor(control) {
        this._pristine = control.pristine;
        this._untouched = control.untouched;
    }
    /**
     * Creates a ControlState object based on an Angular control
     * @param {?} control Angular control to generate state from
     * @return {?} Control state base on Angular control
     */
    static create(control) {
        return new ControlState(control);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Builds reactive forms using configured model settings
 */
class ReactiveFormsRuleService {
    /**
     * @param {?} rulesEngineSvc
     * @param {?} formBuilder
     * @param {?} traceSvc
     * @param {?} commonSvc
     */
    constructor(rulesEngineSvc, formBuilder, traceSvc, commonSvc) {
        this.rulesEngineSvc = rulesEngineSvc;
        this.formBuilder = formBuilder;
        this.traceSvc = traceSvc;
        this.commonSvc = commonSvc;
    }
    /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    getModelSettings(name) {
        return this.rulesEngineSvc.getModelSettings(name);
    }
    /**
     * Creates a form group using an instance of model settings
     * @template T
     * @param {?} modelSettings Name of the model setting or an instance of model settings to use
     * @param {?=} initialValue Initial data to set the form values to
     * @return {?} Form group created according to defined model settings
     */
    createFormGroup(modelSettings, initialValue) {
        let /** @type {?} */ settings;
        if (typeof modelSettings === "string") {
            settings = this.rulesEngineSvc.getModelSettings(/** @type {?} */ (modelSettings));
            if (!settings)
                throw new Error(`No model setting found with the name "${modelSettings}"`);
        }
        else {
            if (!modelSettings)
                throw new Error(`Adhoc model setting provided is invalid`);
            settings = /** @type {?} */ (modelSettings);
            this.rulesEngineSvc.initializeModelSetting(settings);
        }
        this.traceSvc.trace(`Creating form group using model settings "${settings.name}"`);
        const /** @type {?} */ formGroup = this.buildGroup(settings.properties, initialValue);
        this.traceSvc.trace(`Setting up dependency subscriptions`);
        this.resetDependencySubscriptions(formGroup, settings.properties);
        this.traceSvc.trace(`Patching form group with initial value`);
        this.triggerValueChange(formGroup);
        this.traceSvc.trace(`Attaching model settings to form`);
        this.attachModelSettingsToForm(formGroup, settings);
        return formGroup;
    }
    /**
     * Adds an array item property to an existing form array
     * @template T
     * @param {?} property ArrayItemProperty to for the array item to be added
     * @param {?} parentFormArray The parent FormArray
     * @param {?=} initialValue Initial value of the form array item
     * @param {?=} options Options for adding new array item property
     * @return {?}
     */
    addArrayItemPropertyControl(property, parentFormArray, initialValue, options) {
        const /** @type {?} */ control = this.buildAbstractControl(property, initialValue);
        const /** @type {?} */ willBeLastItem = !options || !this.commonSvc.isZeroOrGreater(options.index) || options.index >= parentFormArray.length;
        if (willBeLastItem)
            parentFormArray.push(control);
        else
            parentFormArray.insert(options.index, control);
        const /** @type {?} */ modelSettings = this.getModelSettingsFromForm(/** @type {?} */ (parentFormArray.root));
        this.resetDependencySubscriptions(parentFormArray.root, modelSettings.properties);
        // we need to do this because the item could have been added at any index in the array, and we need
        // trigger a value change to trigger any dependency propertiy valdidations
        this.triggerValueChange(parentFormArray);
    }
    /**
     * Extends validators generated by ng-form-rules with your own validators
     * @param {?} control Control to extends the validators for
     * @param {?} validator Validator to add
     * @return {?}
     */
    extendValidator(control, validator) {
        if (!validator)
            return;
        const /** @type {?} */ validatorArray = Array.isArray(validator) ? validator : [validator];
        control.setValidators([control.validator, ...validatorArray]
            .filter(validatorFn => !!validatorFn));
    }
    /**
     * Extends async validators generated by ng-form-rules with your own async validators
     * @param {?} control Control to extends the async validators for
     * @param {?} asyncValidator Async validator to add
     * @return {?}
     */
    extendAsyncValidator(control, asyncValidator) {
        if (!asyncValidator)
            return;
        const /** @type {?} */ asyncValidatorArray = Array.isArray(asyncValidator) ? asyncValidator : [asyncValidator];
        control.setAsyncValidators([control.asyncValidator, ...asyncValidatorArray]
            .filter(asyncValidatorFn => !!asyncValidatorFn));
    }
    /**
     * @template T
     * @param {?} property
     * @param {?=} initialValue
     * @return {?}
     */
    buildAbstractControl(property, initialValue) {
        let /** @type {?} */ control;
        if (property.arrayItemProperty)
            control = this.buildArray(property.arrayItemProperty, initialValue, property.updateOn);
        else if (property.properties)
            control = this.buildGroup(property.properties, initialValue, property.updateOn);
        else
            control = this.buildControl(initialValue, property.updateOn);
        // setup validation tests on value change
        control.setValidators(this.buildValidatorFunction(property));
        control.setAsyncValidators(this.buildAsyncValidatorFunction(property));
        // setup edit tests on value change
        control.valueChanges
            .pipe(this.applyValueChangeOptions(property.valueChangeOptions.self.edit))
            .subscribe(value => {
            this.persistEditTests(control, property);
        });
        return control;
    }
    /**
     * @template T
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    buildControl(initialValue, updateOn) {
        return new FormControl(initialValue, { updateOn: updateOn });
    }
    /**
     * @template T
     * @param {?} properties
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    buildGroup(properties, initialValue, updateOn) {
        const /** @type {?} */ formGroup = new FormGroup({}, { updateOn: updateOn });
        (properties || []).forEach(p => {
            const /** @type {?} */ propertyValue = initialValue ? initialValue[p.name] : null;
            const /** @type {?} */ ctrl = this.buildAbstractControl(p, propertyValue);
            formGroup.addControl(p.name, ctrl);
        });
        return formGroup;
    }
    /**
     * @template T
     * @param {?} property
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    buildArray(property, initialValue, updateOn) {
        initialValue = Array.isArray(initialValue) ? initialValue : [];
        return new FormArray(initialValue.map(v => this.buildAbstractControl(property, v)), { updateOn: updateOn });
    }
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    buildValidatorFunction(property) {
        const /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
        if (!syncGroups.sync.length)
            return null;
        return (control) => {
            const /** @type {?} */ controlContextValues = this.getControlContextValues(control, property);
            const /** @type {?} */ testResults = this.rulesEngineSvc
                .runTests(controlContextValues.relative, syncGroups.sync, {
                rootData: controlContextValues.root,
                controlState: ControlState.create(control)
            });
            if (testResults.results.length) {
                this.traceSvc.trace(`Validated property "${property.absolutePath}". ` +
                    this.buildTestResultStatsString(testResults));
            }
            return this.mapToReactiveFormsValidationErrors(testResults);
        };
    }
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    buildAsyncValidatorFunction(property) {
        const /** @type {?} */ rawAsyncFunc = this.buildAsyncValidatorFunctionRaw(property);
        if (!rawAsyncFunc)
            return null;
        const /** @type {?} */ values = new BehaviorSubject(null);
        const /** @type {?} */ valid$ = values.pipe(this.applyAsyncValidValueChangeOptions(property.valueChangeOptions.self.asyncValid), switchMap(x => {
            // pass through means we did not execute the ng-form-rules async tests
            if (x.passthrough) {
                const /** @type {?} */ currentErrors = x.control.errors || {};
                const /** @type {?} */ lastNgFormRulesErrors = this.getLastErrorForControl(x.control);
                // return the last ng-form-rules errors (if any) alongside non ng-form-rules errors.
                // this handles scenario where debounce and distinct are used and state goes from:
                //    invalid -> make changes and back them out -> valid
                return of(Object.assign(currentErrors, /** @type {?} */ ({ ngFormRules: lastNgFormRulesErrors })));
            }
            else {
                return rawAsyncFunc(x.control);
            }
        }), take(1));
        return (control) => {
            values.next(control);
            return valid$;
        };
    }
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    buildAsyncValidatorFunctionRaw(property) {
        const /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
        if (!syncGroups.async.length)
            return null;
        return (control) => {
            const /** @type {?} */ controlContextValues = this.getControlContextValues(control, property);
            return this.rulesEngineSvc.runTestsAsync(controlContextValues.relative, syncGroups.async, {
                rootData: controlContextValues.root,
                controlState: ControlState.create(control)
            }).pipe(tap(testResults => {
                if (testResults.results.length) {
                    this.traceSvc.trace(`Validated (async) property "${property.absolutePath}". ` +
                        this.buildTestResultStatsString(testResults));
                }
            }), map(this.mapToReactiveFormsValidationErrors), tap(x => this.setLastErrorForControl(control, (x || {})["ngFormRules"])));
        };
    }
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @return {?}
     */
    resetDependencySubscriptions(parentControl, properties) {
        this.removeDependencySubscriptions(properties);
        this.addDependencySubscriptions(parentControl, properties);
    }
    /**
     * @template T
     * @param {?} properties
     * @return {?}
     */
    removeDependencySubscriptions(properties) {
        (properties || []).forEach(property => {
            property.clearDependencyPropertySubscriptions();
            if (property.properties) {
                this.removeDependencySubscriptions(property.properties);
            }
            if (property.arrayItemProperty) {
                this.removeDependencySubscriptions([property.arrayItemProperty]);
            }
        });
    }
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @param {?=} arrayIndex
     * @return {?}
     */
    addDependencySubscriptions(parentControl, properties, arrayIndex) {
        (properties || []).forEach(property => {
            const /** @type {?} */ propertyControl = this.getPropertyFromParent(parentControl, property, arrayIndex);
            if (!propertyControl)
                return;
            this.setupEditabilityDependencySubscriptions(propertyControl, parentControl, property);
            this.setupValidationDependencySubscriptions(propertyControl, parentControl, property);
            if (property.properties) {
                this.addDependencySubscriptions(propertyControl, property.properties);
            }
            if (property.arrayItemProperty) {
                // if there is an arrayItemProperty we know that we are working with a FormArray control
                const /** @type {?} */ formArrayControl = (/** @type {?} */ (propertyControl));
                for (let /** @type {?} */ i = 0; i < formArrayControl.length; i++) {
                    this.addDependencySubscriptions(formArrayControl, [property.arrayItemProperty], i);
                }
            }
        });
    }
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    setupValidationDependencySubscriptions(propertyControl, parentControl, property) {
        const /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.valid);
        dependencyPropNames.forEach(d => {
            const /** @type {?} */ dependencyControl = this.findControlRelatively(parentControl, d);
            if (!dependencyControl)
                return;
            const /** @type {?} */ sub$ = dependencyControl.valueChanges
                .pipe(this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.valid))
                .subscribe(value => {
                this.setForceAsyncValidationTestForControl(propertyControl, true);
                propertyControl.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            });
            property.addDependencyPropertySubscription(sub$);
        });
    }
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    setupEditabilityDependencySubscriptions(propertyControl, parentControl, property) {
        const /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.edit);
        dependencyPropNames.forEach(dpn => {
            const /** @type {?} */ dependencyControl = this.findControlRelatively(parentControl, dpn);
            if (!dependencyControl)
                return;
            // setup control to perform edit tests when dependency property changes
            const /** @type {?} */ sub$ = dependencyControl.valueChanges
                .pipe(this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.edit))
                .subscribe(value => {
                this.persistEditTests(propertyControl, property);
            });
            property.addDependencyPropertySubscription(sub$);
        });
    }
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} property
     * @return {?}
     */
    persistEditTests(propertyControl, property) {
        const /** @type {?} */ controlContextValues = this.getControlContextValues(propertyControl, property);
        this.rulesEngineSvc.editable(controlContextValues.relative, property, {
            rootData: controlContextValues.root,
            controlState: ControlState.create(propertyControl)
        }).subscribe(testResults => {
            if (testResults.results.length) {
                this.traceSvc.trace(`Editable property "${property.absolutePath}". ` +
                    this.buildTestResultStatsString(testResults));
            }
            if (testResults.passed && propertyControl.disabled)
                propertyControl.enable({ emitEvent: false });
            else if (!testResults.passed && propertyControl.enabled)
                propertyControl.disable({ emitEvent: false });
        });
    }
    /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    applyAsyncValidValueChangeOptions(valueChangeOptions) {
        return (source$) => {
            let /** @type {?} */ lastValue;
            let /** @type {?} */ isForce;
            return source$.pipe(tap(control => {
                isForce = this.doesControlHaveForcedAsyncValidation(control);
                this.setForceAsyncValidationTestForControl(control, false);
            }), debounce(x => {
                return isForce || valueChangeOptions.debounceMilliseconds > 0
                    ? timer(valueChangeOptions.debounceMilliseconds)
                    : EMPTY;
            }), map(control => {
                return /** @type {?} */ ({
                    control: control,
                    passthrough: !(control.value !== lastValue || !valueChangeOptions.distinctUntilChanged || isForce)
                });
            }), tap(x => {
                if (!x.passthrough)
                    lastValue = x.control.value;
            }));
        };
    }
    /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    applyValueChangeOptions(valueChangeOptions) {
        return (source$) => {
            return source$.pipe(debounce(x => {
                return valueChangeOptions.debounceMilliseconds > 0
                    ? timer(valueChangeOptions.debounceMilliseconds)
                    : EMPTY;
            }), valueChangeOptions.distinctUntilChanged ? distinctUntilChanged() : tap());
        };
    }
    /**
     * @template T
     * @param {?} control
     * @param {?} property
     * @return {?}
     */
    getControlContextValues(control, property) {
        const /** @type {?} */ rootValue = (/** @type {?} */ (control.root)).getRawValue();
        // use the control value if an array item, otherwise use the parent control
        const /** @type {?} */ relativeValue = PropertyBase.isArrayItemProperty(property)
            ? control.value
            : control.parent.getRawValue();
        return {
            root: rootValue,
            relative: relativeValue
        };
    }
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} property
     * @param {?=} arrayIndex
     * @return {?}
     */
    getPropertyFromParent(parentControl, property, arrayIndex) {
        return PropertyBase.isArrayItemProperty(property)
            ? (/** @type {?} */ (parentControl)).at(arrayIndex)
            : parentControl.get((/** @type {?} */ (property)).name);
    }
    /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    mapToReactiveFormsValidationErrors(testResults) {
        // if passed, Angular reactive forms wants us to return null, otherwise return an object with the validation info
        if (!testResults || testResults.passed)
            return null;
        const /** @type {?} */ failed = {};
        testResults.failedResults.forEach(test => {
            failed[test.name] = { message: test.message };
        });
        return {
            ngFormRules: /** @type {?} */ ({
                message: testResults.message,
                failed: failed
            })
        };
    }
    /**
     * @param {?} control
     * @param {?} path
     * @return {?}
     */
    findControlRelatively(control, path) {
        const /** @type {?} */ relativePaths = this.buildControlRelativePathArray(path);
        if (!relativePaths.length)
            return null;
        let /** @type {?} */ result;
        relativePaths.forEach(pathSegment => {
            result = this.getControlByPathSegment(result || control, pathSegment);
            if (!result)
                return;
        });
        return result;
    }
    /**
     * @param {?} relativePath
     * @return {?}
     */
    buildControlRelativePathArray(relativePath) {
        const /** @type {?} */ result = [];
        if (!relativePath || typeof relativePath !== "string")
            return result;
        // takes care of './', '../', and '/'
        const /** @type {?} */ slashSeparated = relativePath.split("/");
        slashSeparated.forEach(slashItem => {
            const /** @type {?} */ dotSeparated = slashItem.split(".")
                .filter(dotItem => !!dotItem);
            if (dotSeparated.length)
                result.push(...dotSeparated);
            else
                result.push(slashItem);
        });
        return result;
    }
    /**
     * @param {?} control
     * @param {?} pathSegment
     * @return {?}
     */
    getControlByPathSegment(control, pathSegment) {
        switch (pathSegment) {
            case "":
                return control.root;
            case "..":
                return control.parent;
            case ".":
                return control;
            default:
                return control.get(pathSegment);
        }
    }
    /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    buildTestResultStatsString(testResults) {
        return `Executed ${testResults.results.length} tests ` +
            `(${testResults.passedResults.length} PASS | ` +
            `${testResults.failedResults.length} FAIL | `
            + `${testResults.skippedResults.length} SKIP)`;
    }
    /**
     * @template T
     * @param {?} formGroup
     * @param {?} modelSettings
     * @return {?}
     */
    attachModelSettingsToForm(formGroup, modelSettings) {
        formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME] = modelSettings;
    }
    /**
     * @template T
     * @param {?} formGroup
     * @return {?}
     */
    getModelSettingsFromForm(formGroup) {
        return /** @type {?} */ (formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME]);
    }
    /**
     * @param {?} control
     * @param {?} force
     * @return {?}
     */
    setForceAsyncValidationTestForControl(control, force) {
        control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME] = force;
    }
    /**
     * @param {?} control
     * @param {?} errors
     * @return {?}
     */
    setLastErrorForControl(control, errors) {
        control[ReactiveFormsRuleService.CONTROL_LAST_ERROR] = errors;
    }
    /**
     * @param {?} control
     * @return {?}
     */
    getLastErrorForControl(control) {
        return control[ReactiveFormsRuleService.CONTROL_LAST_ERROR];
    }
    /**
     * @param {?} control
     * @return {?}
     */
    doesControlHaveForcedAsyncValidation(control) {
        return !!(control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME]);
    }
    /**
     * @param {?} control
     * @return {?}
     */
    triggerValueChange(control) {
        control.patchValue(control.value);
    }
}
ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME = 'ngFormRulesModelSetting';
ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME = 'ngFormRulesForceAsyncValidTestRun';
ReactiveFormsRuleService.CONTROL_LAST_ERROR = 'ngFormRulesControlLastError';
ReactiveFormsRuleService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ReactiveFormsRuleService.ctorParameters = () => [
    { type: RulesEngineService, },
    { type: FormBuilder, },
    { type: TraceService, },
    { type: CommonService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UtilsModule {
}
UtilsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                providers: [
                    TraceService,
                    CommonService
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RulesEngineModule {
}
RulesEngineModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    UtilsModule
                ],
                providers: [
                    RulesEngineService,
                    ReactiveFormsRuleService
                ],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Main module for ng-form-rules
 */
class FormRulesModule {
}
FormRulesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    RulesEngineModule,
                ],
                declarations: [],
                exports: [
                    RulesEngineModule,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Non-array item property
 * @template T
 */
class Property extends PropertyBase {
    /**
     * @param {?} name
     */
    constructor(name) {
        super();
        this._name = name;
    }
    /**
     * Name of the property
     * @return {?}
     */
    get name() {
        return this._name;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * A property representing an array item (e.g. an array of Address objects)
 * @template T
 */
class ArrayItemProperty extends PropertyBase {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Utility class for building model settings
 */
class ModelSettingsBuilder {
    /**
     * Creates a property
     * @template T
     * @param {?} propertyName Property name
     * @param {?=} extend Function to extend the property
     * @return {?} Created property
     */
    property(propertyName, extend) {
        if (!propertyName || typeof propertyName !== 'string')
            throw Error('Invalid property name');
        const /** @type {?} */ property = new Property(propertyName);
        if (extend)
            extend(property);
        return property;
    }
    /**
     * Creates an array item property
     * @template T
     * @param {?=} extend Function to extend the array item property
     * @return {?} Created array item property
     */
    arrayItemProperty(extend) {
        const /** @type {?} */ property = new ArrayItemProperty();
        if (extend)
            extend(property);
        return property;
    }
    /**
     * Creates a validation test
     * @template T
     * @param {?} message Message when the test fails
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created validation test
     */
    validTest(message, check, condition) {
        return this.validNamedTest(null, message, check, condition);
    }
    /**
     * Creates a named validation test
     * @template T
     * @param {?} name Name of the test
     * @param {?} message Message when the test fails
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created named validation test
     */
    validNamedTest(name, message, check, condition) {
        return /** @type {?} */ ({
            name: name,
            message: message,
            check: check,
            condition: condition
        });
    }
    /**
     * Creates an edit test
     * @template T
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created edit test
     */
    editTest(check, condition) {
        return this.editNamedTest(null, check, condition);
    }
    /**
     * Creates a named edit test
     * @template T
     * @param {?} name Name of the test
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created named edit test
     */
    editNamedTest(name, check, condition) {
        return /** @type {?} */ ({
            name: name,
            check: check,
            condition: condition
        });
    }
    /**
     * Creates a rule
     * @template T, R
     * @param {?} func Function for the rule
     * @param {?=} options Additional rule options
     * @return {?} Created rule
     */
    rule(func, options) {
        return this.ruleCombo(func, null, options);
    }
    /**
     * Creates an async rule
     * @template T, R
     * @param {?} asyncFunc Async function for the rule
     * @param {?=} options Additional rule options
     * @return {?} Created rule
     */
    ruleAsync(asyncFunc, options) {
        return this.ruleCombo(null, asyncFunc, options);
    }
    /**
     * Creates a combo rule that has both syncronous and async functions
     * @template T, R
     * @param {?} func Function for the rule
     * @param {?} asyncFunc Async function for the rule
     * @param {?=} options Additional rule options
     * @return {?} Created rule
     */
    ruleCombo(func, asyncFunc, options) {
        return /** @type {?} */ ({
            func: func,
            asyncFunc: asyncFunc,
            options: options
        });
    }
    /**
     * Creates a rule group
     * @template T
     * @param {?} ruleSets Rule sets for the rule group
     * @param {?=} options Additional rule group options
     * @return {?} Created rule group
     */
    ruleGroup(ruleSets, options) {
        return /** @type {?} */ ({
            rules: ruleSets,
            options: options || { resultRequirements: ResultsPassRequirement.AllPass }
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Base class for model settings
 * @abstract
 * @template T
 */
class AbstractModelSettings {
    /**
     * Creates model settings
     * @param {?} name Name of the model settings
     */
    constructor(name) {
        this.builder = new ModelSettingsBuilder();
        this._name = name;
        this.properties = this.buildProperties() || [];
    }
    /**
     * Name of the model setting
     * @return {?}
     */
    get name() {
        return this._name;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class PropertyTestResults extends TestResultsBase {
    /**
     * @param {?} propertyName
     * @param {?} results
     */
    constructor(propertyName, results) {
        super(results);
        this.propertyName = propertyName;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Class for creating adhoc (non-registered) model settings
 * @template T
 */
class AdhocModelSettings extends AbstractModelSettings {
    constructor() {
        // since these settings are not registered, just use a static name
        super('adhoc');
    }
    /**
     * Creates model settings
     * @template T
     * @param {?} propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties
     * @return {?} Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter
     */
    static create(propertyBuilderFunc) {
        const /** @type {?} */ instance = new AdhocModelSettings();
        instance.properties = !!propertyBuilderFunc ? propertyBuilderFunc(instance.builder) || [] : [];
        return instance;
    }
    /**
     * @return {?}
     */
    buildProperties() {
        // this is just needed to satisfy the AbstractModelSettings<T> contract
        return [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Options for how and when to process value changes in a form control
 */
class ValueChangeOptions {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormRulesModule, MODEL_SETTINGS_TOKEN, TRACE_SETTINGS_TOKEN, ReactiveFormsRuleService, AbstractModelSettings, ArrayItemProperty, ControlState, PropertyBase, PropertyTestResults, Property, TestResultsBase, AdhocModelSettings, ValueChangeOptions, ResultsPassRequirement, ModelSettingsBuilder, RulesEngineModule as ɵa, RulesEngineService as ɵe, CommonService as ɵd, TraceService as ɵc, UtilsModule as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,