/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { MODEL_SETTINGS_TOKEN } from '../../../form-rules/injection-tokens/model-settings.token';
import { TraceService } from '../../../utils/trace/trace.service';
import { CommonService } from '../../../utils/common/common.service';
import { forkJoin, of } from 'rxjs';
import { map, flatMap, mergeMap, take } from 'rxjs/operators';
import { TestResultsBase } from '../../../form-rules/models/test-results-base';
import { PropertyBase } from '../../../form-rules/models/property-base';
import { ProcessResultType } from '../../../form-rules/models/proccess-result-type';
import { ResultsPassRequirement } from '../../../form-rules/models/results-pass-requirement';
/**
 * Engine that digests model settings and applies their rules appropriately
 */
export class RulesEngineService {
    /**
     * @param {?} settings
     * @param {?} traceSvc
     * @param {?} commonSvc
     */
    constructor(settings, traceSvc, commonSvc) {
        this.traceSvc = traceSvc;
        this.commonSvc = commonSvc;
        this.registeredSettings = {};
        if (!Array.isArray(settings))
            return;
        settings.forEach(setting => {
            this.initializeModelSetting(setting);
            this.registeredSettings[setting.name] = setting;
        });
    }
    /**
     * Initializes model settings and prepares them to be used in a form group
     * @param {?} setting Model setting to initialize
     * @return {?}
     */
    initializeModelSetting(setting) {
        this.traceSvc.trace(`Initializing model settings "${setting.name}"`);
        this.setPropertyMetadata(setting.properties, setting.name);
    }
    /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    getModelSettings(name) {
        this.traceSvc.trace(`Retrieving model settings "${name}"`);
        const /** @type {?} */ settings = this.registeredSettings[name];
        // create new object
        return settings
            ? Object.assign({}, this.registeredSettings[name])
            : null;
    }
    /**
     * Gets the dependency properties for an array of tests
     * @template T
     * @param {?} tests Tests to get the dependency properties for
     * @return {?} Dependency properties
     */
    getDependencyProperties(tests) {
        if (!tests)
            return [];
        const /** @type {?} */ deps = tests
            .map(t => this.getDependencyPropertiesFromTest(t))
            .reduce((prev, current) => prev.concat(current), []);
        return this.commonSvc.unique(deps);
    }
    /**
     * Gets tests grouped by their sync type (e.g. sync vs. async)
     * @template T
     * @param {?} tests Test to groups
     * @return {?} Tests grouped by sync type
     */
    groupTestsBySyncType(tests) {
        const /** @type {?} */ testGroups = /** @type {?} */ ({
            sync: [],
            async: []
        });
        if (!tests)
            return testGroups;
        tests.forEach(test => {
            const /** @type {?} */ testFuncTypes = /** @type {?} */ ({
                sync: false,
                async: false
            });
            const /** @type {?} */ conditionResults = this.getConfiguredFuncTypes(test.condition);
            const /** @type {?} */ checkResults = this.getConfiguredFuncTypes(test.check);
            testFuncTypes.sync = conditionResults.sync || checkResults.sync;
            testFuncTypes.async = conditionResults.async || checkResults.async;
            // if there is an async func anywhere in the test's rule sets, then it is considered an async test
            if (testFuncTypes.sync && !testFuncTypes.async)
                testGroups.sync.push(test);
            if (testFuncTypes.async)
                testGroups.async.push(test);
        });
        return testGroups;
    }
    /**
     * Runs validation tests
     * @template T
     * @param {?} data Data to run validation tests against
     * @param {?} property Property to run validation tests for
     * @param {?=} state
     * @return {?} Results of validation tests
     */
    validate(data, property, state) {
        return this.runAllTests(data, property.valid, state)
            .pipe(map((results) => {
            results.propertyName = property.absolutePath;
            return /** @type {?} */ (results);
        }));
    }
    /**
     * Runs editability tests
     * @template T
     * @param {?} data Data to run editability tests against
     * @param {?} property Property to run editability tests for
     * * \@returns Results of editability tests
     * @param {?=} state
     * @return {?}
     */
    editable(data, property, state) {
        return this.runAllTests(data, property.edit, state)
            .pipe(map((results) => {
            results.propertyName = property.absolutePath;
            return /** @type {?} */ (results);
        }));
    }
    /**
     * Runs an array of sync tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    runTests(data, tests, state) {
        if (!tests || !tests.length)
            return new TestResultsBase([]);
        const /** @type {?} */ testResults = tests
            .map(t => this.runTest(data, t, state))
            .filter(x => !!x);
        return new TestResultsBase(testResults);
    }
    /**
     * Runs an array of async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    runTestsAsync(data, tests, state) {
        if (!tests || !tests.length)
            return of(new TestResultsBase([]));
        const /** @type {?} */ runTest$ = tests
            .map(test => this.runTestAsync(data, test, state));
        return forkJoin(runTest$)
            .pipe(map(testResults => new TestResultsBase(testResults.filter(x => !!x))));
    }
    /**
     * Runs an array of sync and async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    runAllTests(data, tests, state) {
        if (!tests || !tests.length)
            return of(new TestResultsBase([]));
        const /** @type {?} */ syncGroups = this.groupTestsBySyncType(tests);
        const /** @type {?} */ syncTestResults = of(this.runTests(data, syncGroups.sync, state));
        return syncTestResults.pipe(mergeMap(result => {
            if (!result.passed)
                return of(result);
            return this.runTestsAsync(data, syncGroups.async, state);
        }), take(1));
    }
    /**
     * Performs sync test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    runTest(data, test, state) {
        if (!test)
            return null;
        const /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
        const /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
        const /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
        const /** @type {?} */ conditionsRuleSetResult = this.processRuleSet(data, test.condition, state);
        if (conditionsRuleSetResult === ProcessResultType.Failed)
            return skippedTestResult;
        const /** @type {?} */ checkRuleSetResult = this.processRuleSet(data, test.check, state);
        switch (checkRuleSetResult) {
            case ProcessResultType.Passed:
                return passedTestResult;
            case ProcessResultType.Failed:
                return failedTestResult;
            case ProcessResultType.Skipped:
            default:
                return skippedTestResult;
        }
    }
    /**
     * Performs async test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    runTestAsync(data, test, state) {
        if (!test)
            return of(null);
        const /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
        const /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
        const /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
        const /** @type {?} */ conditionsRuleSetResult$ = this.processRuleSetAsync(data, test.condition, state);
        const /** @type {?} */ checkRuleSetResult$ = this.processRuleSetAsync(data, test.check, state);
        return conditionsRuleSetResult$
            .pipe(flatMap(conditionsRuleSetResult => {
            if (conditionsRuleSetResult === ProcessResultType.Failed)
                return of(skippedTestResult);
            return checkRuleSetResult$
                .pipe(map(checkRuleSetResult => {
                switch (checkRuleSetResult) {
                    case ProcessResultType.Passed:
                        return passedTestResult;
                    case ProcessResultType.Failed:
                        return failedTestResult;
                    case ProcessResultType.Skipped:
                    default:
                        return skippedTestResult;
                }
            }));
        }));
    }
    /**
     * Processes a sync rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    processRuleSet(data, ruleSet, state) {
        if (!ruleSet)
            return ProcessResultType.Skipped;
        const /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        return isRuleGroup
            ? this.processRuleGroup(data, /** @type {?} */ (ruleSet), state)
            : this.processRule(data, /** @type {?} */ (ruleSet), state);
    }
    /**
     * Processes an async rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    processRuleSetAsync(data, ruleSet, state) {
        if (!ruleSet)
            return of(ProcessResultType.Skipped);
        const /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        return isRuleGroup
            ? this.processRuleGroupAsync(data, /** @type {?} */ (ruleSet), state)
            : this.processRuleAsync(data, /** @type {?} */ (ruleSet), state);
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    processRuleGroup(data, ruleGroup, state) {
        if (!ruleGroup.rules)
            return ProcessResultType.Skipped;
        let /** @type {?} */ passedCount = 0;
        let /** @type {?} */ skippedCount = 0;
        for (let /** @type {?} */ i = 0; i < ruleGroup.rules.length; i++) {
            const /** @type {?} */ rule = ruleGroup.rules[i];
            const /** @type {?} */ ruleSetResult = this.processRuleSet(data, rule, state);
            if (this.canShortCircuitRuleGroup(ruleSetResult, ruleGroup))
                return ruleSetResult;
            if (ruleSetResult == ProcessResultType.Passed)
                passedCount++;
            else if (ruleSetResult == ProcessResultType.Skipped)
                skippedCount++;
        }
        // if we skipped them all, then return skipped
        if (skippedCount === ruleGroup.rules.length)
            return ProcessResultType.Skipped;
        // if we got this far, make sure all tests were passed
        return passedCount === ruleGroup.rules.length ? ProcessResultType.Passed : ProcessResultType.Failed;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    processRuleGroupAsync(data, ruleGroup, state) {
        if (!ruleGroup.rules)
            return of(ProcessResultType.Skipped);
        const /** @type {?} */ asyncRuleSetResults$ = ruleGroup.rules.map(x => this.processRuleSetAsync(data, x, state));
        return forkJoin(asyncRuleSetResults$).pipe(map(ruleSetResults => {
            const /** @type {?} */ counts = {
                passed: ruleSetResults.filter(x => x === ProcessResultType.Passed).length,
                failed: ruleSetResults.filter(x => x === ProcessResultType.Failed).length,
                skipped: ruleSetResults.filter(x => x === ProcessResultType.Skipped).length,
            };
            const /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
            if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass && counts.passed > 0)
                return ProcessResultType.Passed;
            if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass && counts.passed === ruleSetResults.length)
                return ProcessResultType.Passed;
            if (counts.skipped === ruleSetResults.length)
                return ProcessResultType.Skipped;
            return ProcessResultType.Failed;
        }));
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    processRule(data, rule, state) {
        if (!rule.func)
            return ProcessResultType.Skipped;
        const /** @type {?} */ rootData = state ? state.rootData : null;
        return rule.func(data, rootData) ? ProcessResultType.Passed : ProcessResultType.Failed;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    processRuleAsync(data, rule, state) {
        if (!rule.func && !rule.asyncFunc)
            return of(ProcessResultType.Skipped);
        const /** @type {?} */ rootData = state ? state.rootData : null;
        const /** @type {?} */ funcResult = rule.func
            ? of(rule.func(data, rootData))
            : rule.asyncFunc(data, rootData);
        return funcResult
            .pipe(map(passed => passed ? ProcessResultType.Passed : ProcessResultType.Failed));
    }
    /**
     * @template T
     * @param {?} ruleSetResult
     * @param {?} ruleGroup
     * @return {?}
     */
    canShortCircuitRuleGroup(ruleSetResult, ruleGroup) {
        const /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
        return (
        // it passed, and we only need one to pass
        (ruleSetResult == ProcessResultType.Passed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass)
            ||
                // if failed, and we need all to pass
                (ruleSetResult == ProcessResultType.Failed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass));
    }
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    isRuleGroup(ruleSet) {
        const /** @type {?} */ rule = /** @type {?} */ (ruleSet);
        return !rule.func && !rule.asyncFunc;
    }
    /**
     * @template T
     * @param {?} test
     * @return {?}
     */
    getDependencyPropertiesFromTest(test) {
        const /** @type {?} */ checkDeps = this.getDependencyPropertiesFromRuleSet(test.check);
        const /** @type {?} */ conditionDeps = this.getDependencyPropertiesFromRuleSet(test.condition);
        return this.commonSvc.unique(checkDeps.concat(conditionDeps));
    }
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    getDependencyPropertiesFromRuleSet(ruleSet) {
        if (!ruleSet)
            return [];
        const /** @type {?} */ result = [];
        if (this.isRuleGroup(ruleSet)) {
            const /** @type {?} */ ruleGroup = /** @type {?} */ (ruleSet);
            ruleGroup.rules.forEach(x => {
                result.push(...this.commonSvc.unique(this.getDependencyPropertiesFromRuleSet(x)));
            });
        }
        const /** @type {?} */ rule = /** @type {?} */ (ruleSet);
        if (rule.options && Array.isArray(rule.options.dependencyProperties)) {
            result.push(...this.commonSvc.unique(rule.options.dependencyProperties));
        }
        return this.commonSvc.unique(result);
    }
    /**
     * @param {?} properties
     * @param {?} modelSettingsName
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    setPropertyMetadata(properties, modelSettingsName, currentAbsolutePath = '') {
        if (!properties)
            return;
        properties.forEach(prop => {
            const /** @type {?} */ newAbsolutePath = this.setPropertyAbsolutePath(prop, currentAbsolutePath);
            this.fillInEmptyTestNames(prop);
            prop.setOwnerModelSettingsName(modelSettingsName);
            if (prop.properties) {
                this.setPropertyMetadata(prop.properties, modelSettingsName, newAbsolutePath);
            }
            else if (prop.arrayItemProperty) {
                this.setPropertyMetadata([prop.arrayItemProperty], modelSettingsName, newAbsolutePath);
            }
        });
    }
    /**
     * @param {?} property
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    setPropertyAbsolutePath(property, currentAbsolutePath = '') {
        const /** @type {?} */ isArrayItemProperty = PropertyBase.isArrayItemProperty(property);
        const /** @type {?} */ newAbsolutePathSegment = isArrayItemProperty ? '[]' : (/** @type {?} */ (property)).name;
        const /** @type {?} */ isAtRoot = !currentAbsolutePath;
        const /** @type {?} */ newAbsolutePath = `${currentAbsolutePath}${isAtRoot ? '' : '.'}${newAbsolutePathSegment}`;
        // set absolute path for property
        property.setAbsolutePath(newAbsolutePath);
        return newAbsolutePath;
    }
    /**
     * @param {?} property
     * @return {?}
     */
    fillInEmptyTestNames(property) {
        property.valid
            .filter(test => !test.name)
            .forEach((test, i) => test.name = `validTest${i}`);
        property.edit
            .filter(test => !test.name)
            .forEach((test, i) => test.name = `editTest${i}`);
    }
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    getConfiguredFuncTypes(ruleSet) {
        if (!ruleSet)
            return { sync: false, async: false };
        const /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        if (isRuleGroup) {
            const /** @type {?} */ ruleGroup = /** @type {?} */ (ruleSet);
            const /** @type {?} */ results = ruleGroup.rules
                .map(rs => {
                return this.getConfiguredFuncTypes(rs);
            });
            return {
                sync: results.findIndex(x => !!x.sync) >= 0,
                async: results.findIndex(x => !!x.async) >= 0,
            };
        }
        else {
            const /** @type {?} */ rule = /** @type {?} */ (ruleSet);
            return {
                sync: !!rule.func,
                async: !!rule.asyncFunc
            };
        }
    }
}
RulesEngineService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
RulesEngineService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [MODEL_SETTINGS_TOKEN,] },] },
    { type: TraceService, },
    { type: CommonService, },
];
function RulesEngineService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    RulesEngineService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    RulesEngineService.ctorParameters;
    /** @type {?} */
    RulesEngineService.prototype.registeredSettings;
    /** @type {?} */
    RulesEngineService.prototype.traceSvc;
    /** @type {?} */
    RulesEngineService.prototype.commonSvc;
}
/**
 * @record
 */
function ConfiguredFuncTypes() { }
function ConfiguredFuncTypes_tsickle_Closure_declarations() {
    /** @type {?} */
    ConfiguredFuncTypes.prototype.sync;
    /** @type {?} */
    ConfiguredFuncTypes.prototype.async;
}

//# sourceMappingURL=data:application/json;base64,