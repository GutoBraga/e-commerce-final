/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from "@angular/core";
import { FormGroup, FormBuilder, FormControl, FormArray } from '@angular/forms';
import { RulesEngineService } from "../rules-engine/rules-engine.service";
import { PropertyBase } from "../../../form-rules/models/property-base";
import { TraceService } from "../../../utils/trace/trace.service";
import { BehaviorSubject, of, timer, EMPTY } from "rxjs";
import { map, tap, switchMap, take, distinctUntilChanged, debounce } from "rxjs/operators";
import { ControlState } from "../../../form-rules/models/control-state";
import { CommonService } from "../../../utils/common/common.service";
/**
 * Builds reactive forms using configured model settings
 */
export class ReactiveFormsRuleService {
    /**
     * @param {?} rulesEngineSvc
     * @param {?} formBuilder
     * @param {?} traceSvc
     * @param {?} commonSvc
     */
    constructor(rulesEngineSvc, formBuilder, traceSvc, commonSvc) {
        this.rulesEngineSvc = rulesEngineSvc;
        this.formBuilder = formBuilder;
        this.traceSvc = traceSvc;
        this.commonSvc = commonSvc;
    }
    /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    getModelSettings(name) {
        return this.rulesEngineSvc.getModelSettings(name);
    }
    /**
     * Creates a form group using an instance of model settings
     * @template T
     * @param {?} modelSettings Name of the model setting or an instance of model settings to use
     * @param {?=} initialValue Initial data to set the form values to
     * @return {?} Form group created according to defined model settings
     */
    createFormGroup(modelSettings, initialValue) {
        let /** @type {?} */ settings;
        if (typeof modelSettings === "string") {
            settings = this.rulesEngineSvc.getModelSettings(/** @type {?} */ (modelSettings));
            if (!settings)
                throw new Error(`No model setting found with the name "${modelSettings}"`);
        }
        else {
            if (!modelSettings)
                throw new Error(`Adhoc model setting provided is invalid`);
            settings = /** @type {?} */ (modelSettings);
            this.rulesEngineSvc.initializeModelSetting(settings);
        }
        this.traceSvc.trace(`Creating form group using model settings "${settings.name}"`);
        const /** @type {?} */ formGroup = this.buildGroup(settings.properties, initialValue);
        this.traceSvc.trace(`Setting up dependency subscriptions`);
        this.resetDependencySubscriptions(formGroup, settings.properties);
        this.traceSvc.trace(`Patching form group with initial value`);
        this.triggerValueChange(formGroup);
        this.traceSvc.trace(`Attaching model settings to form`);
        this.attachModelSettingsToForm(formGroup, settings);
        return formGroup;
    }
    /**
     * Adds an array item property to an existing form array
     * @template T
     * @param {?} property ArrayItemProperty to for the array item to be added
     * @param {?} parentFormArray The parent FormArray
     * @param {?=} initialValue Initial value of the form array item
     * @param {?=} options Options for adding new array item property
     * @return {?}
     */
    addArrayItemPropertyControl(property, parentFormArray, initialValue, options) {
        const /** @type {?} */ control = this.buildAbstractControl(property, initialValue);
        const /** @type {?} */ willBeLastItem = !options || !this.commonSvc.isZeroOrGreater(options.index) || options.index >= parentFormArray.length;
        if (willBeLastItem)
            parentFormArray.push(control);
        else
            parentFormArray.insert(options.index, control);
        const /** @type {?} */ modelSettings = this.getModelSettingsFromForm(/** @type {?} */ (parentFormArray.root));
        this.resetDependencySubscriptions(parentFormArray.root, modelSettings.properties);
        // we need to do this because the item could have been added at any index in the array, and we need
        // trigger a value change to trigger any dependency propertiy valdidations
        this.triggerValueChange(parentFormArray);
    }
    /**
     * Extends validators generated by ng-form-rules with your own validators
     * @param {?} control Control to extends the validators for
     * @param {?} validator Validator to add
     * @return {?}
     */
    extendValidator(control, validator) {
        if (!validator)
            return;
        const /** @type {?} */ validatorArray = Array.isArray(validator) ? validator : [validator];
        control.setValidators([control.validator, ...validatorArray]
            .filter(validatorFn => !!validatorFn));
    }
    /**
     * Extends async validators generated by ng-form-rules with your own async validators
     * @param {?} control Control to extends the async validators for
     * @param {?} asyncValidator Async validator to add
     * @return {?}
     */
    extendAsyncValidator(control, asyncValidator) {
        if (!asyncValidator)
            return;
        const /** @type {?} */ asyncValidatorArray = Array.isArray(asyncValidator) ? asyncValidator : [asyncValidator];
        control.setAsyncValidators([control.asyncValidator, ...asyncValidatorArray]
            .filter(asyncValidatorFn => !!asyncValidatorFn));
    }
    /**
     * @template T
     * @param {?} property
     * @param {?=} initialValue
     * @return {?}
     */
    buildAbstractControl(property, initialValue) {
        let /** @type {?} */ control;
        if (property.arrayItemProperty)
            control = this.buildArray(property.arrayItemProperty, initialValue, property.updateOn);
        else if (property.properties)
            control = this.buildGroup(property.properties, initialValue, property.updateOn);
        else
            control = this.buildControl(initialValue, property.updateOn);
        // setup validation tests on value change
        control.setValidators(this.buildValidatorFunction(property));
        control.setAsyncValidators(this.buildAsyncValidatorFunction(property));
        // setup edit tests on value change
        control.valueChanges
            .pipe(this.applyValueChangeOptions(property.valueChangeOptions.self.edit))
            .subscribe(value => {
            this.persistEditTests(control, property);
        });
        return control;
    }
    /**
     * @template T
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    buildControl(initialValue, updateOn) {
        return new FormControl(initialValue, { updateOn: updateOn });
    }
    /**
     * @template T
     * @param {?} properties
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    buildGroup(properties, initialValue, updateOn) {
        const /** @type {?} */ formGroup = new FormGroup({}, { updateOn: updateOn });
        (properties || []).forEach(p => {
            const /** @type {?} */ propertyValue = initialValue ? initialValue[p.name] : null;
            const /** @type {?} */ ctrl = this.buildAbstractControl(p, propertyValue);
            formGroup.addControl(p.name, ctrl);
        });
        return formGroup;
    }
    /**
     * @template T
     * @param {?} property
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    buildArray(property, initialValue, updateOn) {
        initialValue = Array.isArray(initialValue) ? initialValue : [];
        return new FormArray(initialValue.map(v => this.buildAbstractControl(property, v)), { updateOn: updateOn });
    }
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    buildValidatorFunction(property) {
        const /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
        if (!syncGroups.sync.length)
            return null;
        return (control) => {
            const /** @type {?} */ controlContextValues = this.getControlContextValues(control, property);
            const /** @type {?} */ testResults = this.rulesEngineSvc
                .runTests(controlContextValues.relative, syncGroups.sync, {
                rootData: controlContextValues.root,
                controlState: ControlState.create(control)
            });
            if (testResults.results.length) {
                this.traceSvc.trace(`Validated property "${property.absolutePath}". ` +
                    this.buildTestResultStatsString(testResults));
            }
            return this.mapToReactiveFormsValidationErrors(testResults);
        };
    }
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    buildAsyncValidatorFunction(property) {
        const /** @type {?} */ rawAsyncFunc = this.buildAsyncValidatorFunctionRaw(property);
        if (!rawAsyncFunc)
            return null;
        const /** @type {?} */ values = new BehaviorSubject(null);
        const /** @type {?} */ valid$ = values.pipe(this.applyAsyncValidValueChangeOptions(property.valueChangeOptions.self.asyncValid), switchMap(x => {
            // pass through means we did not execute the ng-form-rules async tests
            if (x.passthrough) {
                const /** @type {?} */ currentErrors = x.control.errors || {};
                const /** @type {?} */ lastNgFormRulesErrors = this.getLastErrorForControl(x.control);
                // return the last ng-form-rules errors (if any) alongside non ng-form-rules errors.
                // this handles scenario where debounce and distinct are used and state goes from:
                //    invalid -> make changes and back them out -> valid
                return of(Object.assign(currentErrors, /** @type {?} */ ({ ngFormRules: lastNgFormRulesErrors })));
            }
            else {
                return rawAsyncFunc(x.control);
            }
        }), take(1));
        return (control) => {
            values.next(control);
            return valid$;
        };
    }
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    buildAsyncValidatorFunctionRaw(property) {
        const /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
        if (!syncGroups.async.length)
            return null;
        return (control) => {
            const /** @type {?} */ controlContextValues = this.getControlContextValues(control, property);
            return this.rulesEngineSvc.runTestsAsync(controlContextValues.relative, syncGroups.async, {
                rootData: controlContextValues.root,
                controlState: ControlState.create(control)
            }).pipe(tap(testResults => {
                if (testResults.results.length) {
                    this.traceSvc.trace(`Validated (async) property "${property.absolutePath}". ` +
                        this.buildTestResultStatsString(testResults));
                }
            }), map(this.mapToReactiveFormsValidationErrors), tap(x => this.setLastErrorForControl(control, (x || {})["ngFormRules"])));
        };
    }
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @return {?}
     */
    resetDependencySubscriptions(parentControl, properties) {
        this.removeDependencySubscriptions(properties);
        this.addDependencySubscriptions(parentControl, properties);
    }
    /**
     * @template T
     * @param {?} properties
     * @return {?}
     */
    removeDependencySubscriptions(properties) {
        (properties || []).forEach(property => {
            property.clearDependencyPropertySubscriptions();
            if (property.properties) {
                this.removeDependencySubscriptions(property.properties);
            }
            if (property.arrayItemProperty) {
                this.removeDependencySubscriptions([property.arrayItemProperty]);
            }
        });
    }
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @param {?=} arrayIndex
     * @return {?}
     */
    addDependencySubscriptions(parentControl, properties, arrayIndex) {
        (properties || []).forEach(property => {
            const /** @type {?} */ propertyControl = this.getPropertyFromParent(parentControl, property, arrayIndex);
            if (!propertyControl)
                return;
            this.setupEditabilityDependencySubscriptions(propertyControl, parentControl, property);
            this.setupValidationDependencySubscriptions(propertyControl, parentControl, property);
            if (property.properties) {
                this.addDependencySubscriptions(propertyControl, property.properties);
            }
            if (property.arrayItemProperty) {
                // if there is an arrayItemProperty we know that we are working with a FormArray control
                const /** @type {?} */ formArrayControl = (/** @type {?} */ (propertyControl));
                for (let /** @type {?} */ i = 0; i < formArrayControl.length; i++) {
                    this.addDependencySubscriptions(formArrayControl, [property.arrayItemProperty], i);
                }
            }
        });
    }
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    setupValidationDependencySubscriptions(propertyControl, parentControl, property) {
        const /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.valid);
        dependencyPropNames.forEach(d => {
            const /** @type {?} */ dependencyControl = this.findControlRelatively(parentControl, d);
            if (!dependencyControl)
                return;
            const /** @type {?} */ sub$ = dependencyControl.valueChanges
                .pipe(this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.valid))
                .subscribe(value => {
                this.setForceAsyncValidationTestForControl(propertyControl, true);
                propertyControl.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            });
            property.addDependencyPropertySubscription(sub$);
        });
    }
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    setupEditabilityDependencySubscriptions(propertyControl, parentControl, property) {
        const /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.edit);
        dependencyPropNames.forEach(dpn => {
            const /** @type {?} */ dependencyControl = this.findControlRelatively(parentControl, dpn);
            if (!dependencyControl)
                return;
            // setup control to perform edit tests when dependency property changes
            const /** @type {?} */ sub$ = dependencyControl.valueChanges
                .pipe(this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.edit))
                .subscribe(value => {
                this.persistEditTests(propertyControl, property);
            });
            property.addDependencyPropertySubscription(sub$);
        });
    }
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} property
     * @return {?}
     */
    persistEditTests(propertyControl, property) {
        const /** @type {?} */ controlContextValues = this.getControlContextValues(propertyControl, property);
        this.rulesEngineSvc.editable(controlContextValues.relative, property, {
            rootData: controlContextValues.root,
            controlState: ControlState.create(propertyControl)
        }).subscribe(testResults => {
            if (testResults.results.length) {
                this.traceSvc.trace(`Editable property "${property.absolutePath}". ` +
                    this.buildTestResultStatsString(testResults));
            }
            if (testResults.passed && propertyControl.disabled)
                propertyControl.enable({ emitEvent: false });
            else if (!testResults.passed && propertyControl.enabled)
                propertyControl.disable({ emitEvent: false });
        });
    }
    /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    applyAsyncValidValueChangeOptions(valueChangeOptions) {
        return (source$) => {
            let /** @type {?} */ lastValue;
            let /** @type {?} */ isForce;
            return source$.pipe(tap(control => {
                isForce = this.doesControlHaveForcedAsyncValidation(control);
                this.setForceAsyncValidationTestForControl(control, false);
            }), debounce(x => {
                return isForce || valueChangeOptions.debounceMilliseconds > 0
                    ? timer(valueChangeOptions.debounceMilliseconds)
                    : EMPTY;
            }), map(control => {
                return /** @type {?} */ ({
                    control: control,
                    passthrough: !(control.value !== lastValue || !valueChangeOptions.distinctUntilChanged || isForce)
                });
            }), tap(x => {
                if (!x.passthrough)
                    lastValue = x.control.value;
            }));
        };
    }
    /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    applyValueChangeOptions(valueChangeOptions) {
        return (source$) => {
            return source$.pipe(debounce(x => {
                return valueChangeOptions.debounceMilliseconds > 0
                    ? timer(valueChangeOptions.debounceMilliseconds)
                    : EMPTY;
            }), valueChangeOptions.distinctUntilChanged ? distinctUntilChanged() : tap());
        };
    }
    /**
     * @template T
     * @param {?} control
     * @param {?} property
     * @return {?}
     */
    getControlContextValues(control, property) {
        const /** @type {?} */ rootValue = (/** @type {?} */ (control.root)).getRawValue();
        // use the control value if an array item, otherwise use the parent control
        const /** @type {?} */ relativeValue = PropertyBase.isArrayItemProperty(property)
            ? control.value
            : control.parent.getRawValue();
        return {
            root: rootValue,
            relative: relativeValue
        };
    }
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} property
     * @param {?=} arrayIndex
     * @return {?}
     */
    getPropertyFromParent(parentControl, property, arrayIndex) {
        return PropertyBase.isArrayItemProperty(property)
            ? (/** @type {?} */ (parentControl)).at(arrayIndex)
            : parentControl.get((/** @type {?} */ (property)).name);
    }
    /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    mapToReactiveFormsValidationErrors(testResults) {
        // if passed, Angular reactive forms wants us to return null, otherwise return an object with the validation info
        if (!testResults || testResults.passed)
            return null;
        const /** @type {?} */ failed = {};
        testResults.failedResults.forEach(test => {
            failed[test.name] = { message: test.message };
        });
        return {
            ngFormRules: /** @type {?} */ ({
                message: testResults.message,
                failed: failed
            })
        };
    }
    /**
     * @param {?} control
     * @param {?} path
     * @return {?}
     */
    findControlRelatively(control, path) {
        const /** @type {?} */ relativePaths = this.buildControlRelativePathArray(path);
        if (!relativePaths.length)
            return null;
        let /** @type {?} */ result;
        relativePaths.forEach(pathSegment => {
            result = this.getControlByPathSegment(result || control, pathSegment);
            if (!result)
                return;
        });
        return result;
    }
    /**
     * @param {?} relativePath
     * @return {?}
     */
    buildControlRelativePathArray(relativePath) {
        const /** @type {?} */ result = [];
        if (!relativePath || typeof relativePath !== "string")
            return result;
        // takes care of './', '../', and '/'
        const /** @type {?} */ slashSeparated = relativePath.split("/");
        slashSeparated.forEach(slashItem => {
            const /** @type {?} */ dotSeparated = slashItem.split(".")
                .filter(dotItem => !!dotItem);
            if (dotSeparated.length)
                result.push(...dotSeparated);
            else
                result.push(slashItem);
        });
        return result;
    }
    /**
     * @param {?} control
     * @param {?} pathSegment
     * @return {?}
     */
    getControlByPathSegment(control, pathSegment) {
        switch (pathSegment) {
            case "":
                return control.root;
            case "..":
                return control.parent;
            case ".":
                return control;
            default:
                return control.get(pathSegment);
        }
    }
    /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    buildTestResultStatsString(testResults) {
        return `Executed ${testResults.results.length} tests ` +
            `(${testResults.passedResults.length} PASS | ` +
            `${testResults.failedResults.length} FAIL | `
            + `${testResults.skippedResults.length} SKIP)`;
    }
    /**
     * @template T
     * @param {?} formGroup
     * @param {?} modelSettings
     * @return {?}
     */
    attachModelSettingsToForm(formGroup, modelSettings) {
        formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME] = modelSettings;
    }
    /**
     * @template T
     * @param {?} formGroup
     * @return {?}
     */
    getModelSettingsFromForm(formGroup) {
        return /** @type {?} */ (formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME]);
    }
    /**
     * @param {?} control
     * @param {?} force
     * @return {?}
     */
    setForceAsyncValidationTestForControl(control, force) {
        control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME] = force;
    }
    /**
     * @param {?} control
     * @param {?} errors
     * @return {?}
     */
    setLastErrorForControl(control, errors) {
        control[ReactiveFormsRuleService.CONTROL_LAST_ERROR] = errors;
    }
    /**
     * @param {?} control
     * @return {?}
     */
    getLastErrorForControl(control) {
        return control[ReactiveFormsRuleService.CONTROL_LAST_ERROR];
    }
    /**
     * @param {?} control
     * @return {?}
     */
    doesControlHaveForcedAsyncValidation(control) {
        return !!(control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME]);
    }
    /**
     * @param {?} control
     * @return {?}
     */
    triggerValueChange(control) {
        control.patchValue(control.value);
    }
}
ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME = 'ngFormRulesModelSetting';
ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME = 'ngFormRulesForceAsyncValidTestRun';
ReactiveFormsRuleService.CONTROL_LAST_ERROR = 'ngFormRulesControlLastError';
ReactiveFormsRuleService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ReactiveFormsRuleService.ctorParameters = () => [
    { type: RulesEngineService, },
    { type: FormBuilder, },
    { type: TraceService, },
    { type: CommonService, },
];
function ReactiveFormsRuleService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ReactiveFormsRuleService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ReactiveFormsRuleService.ctorParameters;
    /** @type {?} */
    ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME;
    /** @type {?} */
    ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME;
    /** @type {?} */
    ReactiveFormsRuleService.CONTROL_LAST_ERROR;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.rulesEngineSvc;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.formBuilder;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.traceSvc;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.commonSvc;
}
/**
 * @record
 */
function ControlContextValues() { }
function ControlContextValues_tsickle_Closure_declarations() {
    /** @type {?} */
    ControlContextValues.prototype.root;
    /** @type {?} */
    ControlContextValues.prototype.relative;
}
/**
 * @record
 */
function AsyncValidationPassthroughable() { }
function AsyncValidationPassthroughable_tsickle_Closure_declarations() {
    /** @type {?} */
    AsyncValidationPassthroughable.prototype.control;
    /** @type {?} */
    AsyncValidationPassthroughable.prototype.passthrough;
}

//# sourceMappingURL=data:application/json;base64,