/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Results of executing a collection of tests
 * @template T
 */
export class TestResultsBase {
    /**
     * @param {?} results
     */
    constructor(results) {
        this.results = results;
        this.results = this.results || [];
    }
    /**
     * Whether the tests passed
     * @return {?}
     */
    get passed() {
        return !this.failedResults.length;
    }
    /**
     * Array of test results that passed
     * @return {?}
     */
    get passedResults() {
        return this.results.filter(x => !!x.passed && !x.skipped);
    }
    /**
     * Array of test results that failed
     * @return {?}
     */
    get failedResults() {
        return this.results.filter(x => !x.passed);
    }
    /**
     * Array of test results that were skipped
     * @return {?}
     */
    get skippedResults() {
        return this.results.filter(x => !!x.skipped);
    }
    /**
     * Message of the first test that failed
     * @return {?}
     */
    get message() {
        return this.messages[0];
    }
    /**
     * Messages of all failed tests
     * @return {?}
     */
    get messages() {
        const /** @type {?} */ messages = this.failedResults.map(x => x.message);
        return Array.from(new Set(messages));
    }
}
function TestResultsBase_tsickle_Closure_declarations() {
    /** @type {?} */
    TestResultsBase.prototype.results;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1yZXN1bHRzLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1mb3JtLXJ1bGVzLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tcnVsZXMvbW9kZWxzL3Rlc3QtcmVzdWx0cy1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBS0EsTUFBTTs7OztJQUNGLFlBQW1CLE9BQXdCO1FBQXhCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7S0FDckM7Ozs7O0lBS0QsSUFBSSxNQUFNO1FBQ04sTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7S0FDckM7Ozs7O0lBS0QsSUFBSSxhQUFhO1FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDN0Q7Ozs7O0lBS0QsSUFBSSxhQUFhO1FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDOUM7Ozs7O0lBS0QsSUFBSSxjQUFjO1FBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNoRDs7Ozs7SUFLRCxJQUFJLE9BQU87UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMzQjs7Ozs7SUFLRCxJQUFJLFFBQVE7UUFDUix1QkFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztLQUN4QztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdFJlc3VsdCB9IGZyb20gXCIuL3Rlc3QtcmVzdWx0XCI7XHJcblxyXG4vKipcclxuICogUmVzdWx0cyBvZiBleGVjdXRpbmcgYSBjb2xsZWN0aW9uIG9mIHRlc3RzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGVzdFJlc3VsdHNCYXNlPFQ+IHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZXN1bHRzOiBUZXN0UmVzdWx0PFQ+W10pIHtcclxuICAgICAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLnJlc3VsdHMgfHwgW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoZSB0ZXN0cyBwYXNzZWRcclxuICAgICAqL1xyXG4gICAgZ2V0IHBhc3NlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuZmFpbGVkUmVzdWx0cy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiB0ZXN0IHJlc3VsdHMgdGhhdCBwYXNzZWRcclxuICAgICAqL1xyXG4gICAgZ2V0IHBhc3NlZFJlc3VsdHMoKTogVGVzdFJlc3VsdDxUPltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRzLmZpbHRlcih4ID0+ICEheC5wYXNzZWQgJiYgIXguc2tpcHBlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiB0ZXN0IHJlc3VsdHMgdGhhdCBmYWlsZWRcclxuICAgICAqL1xyXG4gICAgZ2V0IGZhaWxlZFJlc3VsdHMoKTogVGVzdFJlc3VsdDxUPltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRzLmZpbHRlcih4ID0+ICF4LnBhc3NlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiB0ZXN0IHJlc3VsdHMgdGhhdCB3ZXJlIHNraXBwZWRcclxuICAgICAqL1xyXG4gICAgZ2V0IHNraXBwZWRSZXN1bHRzKCk6IFRlc3RSZXN1bHQ8VD5bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0cy5maWx0ZXIoeCA9PiAhIXguc2tpcHBlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXNzYWdlIG9mIHRoZSBmaXJzdCB0ZXN0IHRoYXQgZmFpbGVkXHJcbiAgICAgKi9cclxuICAgIGdldCBtZXNzYWdlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZXNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXNzYWdlcyBvZiBhbGwgZmFpbGVkIHRlc3RzXHJcbiAgICAgKi9cclxuICAgIGdldCBtZXNzYWdlcygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB0aGlzLmZhaWxlZFJlc3VsdHMubWFwKHggPT4geC5tZXNzYWdlKTtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KG1lc3NhZ2VzKSk7XHJcbiAgICB9XHJcbn0iXX0=