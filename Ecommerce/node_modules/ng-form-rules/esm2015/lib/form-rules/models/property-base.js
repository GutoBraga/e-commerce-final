/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Base class for a property
 * @abstract
 * @template T
 */
export class PropertyBase {
    constructor() {
        this._dependencyPropertySubscriptions = [];
        /**
         * Validation tests
         */
        this.valid = [];
        /**
         * Editability tests
         */
        this.edit = [];
        /**
         * The event name for control to update upon.
         */
        this.updateOn = 'change';
        /**
         * Options for how to respond to value changes on property control and dependency controls
         */
        this.valueChangeOptions = {
            dependencyProperties: {
                valid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
            },
            self: {
                asyncValid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
            }
        };
    }
    /**
     * Absolute path to the property from root
     * @return {?}
     */
    get absolutePath() {
        return this._absolutePath;
    }
    /**
     * Absolute path to property from root
     * @return {?}
     */
    get dependencyPropertySubscriptions() {
        return this._dependencyPropertySubscriptions;
    }
    /**
     * Absolute path to property from root
     * @return {?}
     */
    get ownerModelSettingsName() {
        return this._ownerModelSettingsName;
    }
    /**
     * Determines if the property is an ArrayItemProperty
     * @template T
     * @param {?} property Property to check
     * @return {?} Whether or not the property is an ArrayItemProperty
     */
    static isArrayItemProperty(property) {
        return !(/** @type {?} */ (property)).name;
    }
    /**
     * DO NOT CALL! Internal use only
     * @param {?} absolutePath Absolute path to the property from the root
     * @return {?}
     */
    setAbsolutePath(absolutePath) {
        this._absolutePath = absolutePath;
    }
    /**
     * DO NOT CALL! Internal use only
     * @param {?} subscription Subscription for the dependency property
     * @return {?}
     */
    addDependencyPropertySubscription(subscription) {
        this._dependencyPropertySubscriptions.push(subscription);
    }
    /**
     * DO NOT CALL! Internal use only
     * @return {?}
     */
    clearDependencyPropertySubscriptions() {
        this.dependencyPropertySubscriptions.forEach(sub$ => sub$.unsubscribe());
        this._dependencyPropertySubscriptions = [];
    }
    /**
     * DO NOT CALL! Internal use only
     * @param {?} name Name of the owner model settings
     * @return {?}
     */
    setOwnerModelSettingsName(name) {
        this._ownerModelSettingsName = name;
    }
}
function PropertyBase_tsickle_Closure_declarations() {
    /** @type {?} */
    PropertyBase.prototype._absolutePath;
    /** @type {?} */
    PropertyBase.prototype._dependencyPropertySubscriptions;
    /** @type {?} */
    PropertyBase.prototype._ownerModelSettingsName;
    /**
     * Validation tests
     * @type {?}
     */
    PropertyBase.prototype.valid;
    /**
     * Editability tests
     * @type {?}
     */
    PropertyBase.prototype.edit;
    /**
     * Properties for a complex object
     * @type {?}
     */
    PropertyBase.prototype.properties;
    /**
     * Property for an item of an array
     * @type {?}
     */
    PropertyBase.prototype.arrayItemProperty;
    /**
     * The event name for control to update upon.
     * @type {?}
     */
    PropertyBase.prototype.updateOn;
    /**
     * Options for how to respond to value changes on property control and dependency controls
     * @type {?}
     */
    PropertyBase.prototype.valueChangeOptions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZvcm0tcnVsZXMvIiwic291cmNlcyI6WyJsaWIvZm9ybS1ydWxlcy9tb2RlbHMvcHJvcGVydHktYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFVQSxNQUFNOztnREFFeUQsRUFBRTs7OztxQkFNMUMsRUFBRTs7OztvQkFLSCxFQUFFOzs7O3dCQW9CRSxRQUFROzs7O2tDQW1DMUI7WUFDQSxvQkFBb0IsRUFBRTtnQkFDbEIsS0FBSyxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLENBQUMsRUFBRTtnQkFDL0QsSUFBSSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLENBQUMsRUFBRTthQUNqRTtZQUNELElBQUksRUFBRTtnQkFDRixVQUFVLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxFQUFFO2dCQUNwRSxJQUFJLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxFQUFFO2FBQ2pFO1NBQ0o7Ozs7OztJQXZDRCxJQUFJLFlBQVk7UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztLQUM3Qjs7Ozs7SUFLRCxJQUFJLCtCQUErQjtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0tBQ2hEOzs7OztJQUtELElBQUksc0JBQXNCO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUM7S0FDdkM7Ozs7Ozs7SUE4QkQsTUFBTSxDQUFDLG1CQUFtQixDQUFJLFFBQXlCO1FBQ25ELE1BQU0sQ0FBQyxDQUFDLG1CQUFDLFFBQXVCLEVBQUMsQ0FBQyxJQUFJLENBQUM7S0FDMUM7Ozs7OztJQU1ELGVBQWUsQ0FBQyxZQUFvQjtRQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztLQUNyQzs7Ozs7O0lBTUQsaUNBQWlDLENBQUMsWUFBMEI7UUFDeEQsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUM1RDs7Ozs7SUFLRCxvQ0FBb0M7UUFDaEMsSUFBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxnQ0FBZ0MsR0FBRyxFQUFFLENBQUM7S0FDOUM7Ozs7OztJQU1ELHlCQUF5QixDQUFDLElBQVk7UUFDbEMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztLQUN2QztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gXCIuL3Rlc3RcIjtcclxuaW1wb3J0IHsgUHJvcGVydHkgfSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xyXG5pbXBvcnQgeyBBcnJheUl0ZW1Qcm9wZXJ0eSB9IGZyb20gXCIuL2FycmF5LWl0ZW0tcHJvcGVydHlcIjtcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgVmFsdWVDaGFuZ2VPcHRpb25zIH0gZnJvbSBcIi4vdmFsdWUtY2hhbmdlLW9wdGlvbnNcIjtcclxuaW1wb3J0IHsgVXBkYXRlT24gfSBmcm9tIFwiLi91cGRhdGUtb25cIjtcclxuXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBhIHByb3BlcnR5XHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUHJvcGVydHlCYXNlPFQ+IHtcclxuICAgIHByaXZhdGUgX2Fic29sdXRlUGF0aDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfZGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcclxuICAgIHByaXZhdGUgX293bmVyTW9kZWxTZXR0aW5nc05hbWU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRpb24gdGVzdHNcclxuICAgICAqL1xyXG4gICAgdmFsaWQ6IFRlc3Q8VD5bXSA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRWRpdGFiaWxpdHkgdGVzdHNcclxuICAgICAqL1xyXG4gICAgZWRpdDogVGVzdDxUPltdID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWaWV3YWJpbGl0eSB0ZXN0c1xyXG4gICAgICovXHJcbiAgICAvLyB2aWV3OiBUZXN0PFQ+W10gPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BlcnRpZXMgZm9yIGEgY29tcGxleCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgcHJvcGVydGllcz86IFByb3BlcnR5PGFueT5bXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BlcnR5IGZvciBhbiBpdGVtIG9mIGFuIGFycmF5XHJcbiAgICAgKi9cclxuICAgIGFycmF5SXRlbVByb3BlcnR5PzogQXJyYXlJdGVtUHJvcGVydHk8YW55PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBldmVudCBuYW1lIGZvciBjb250cm9sIHRvIHVwZGF0ZSB1cG9uLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGVPbj86IFVwZGF0ZU9uID0gJ2NoYW5nZSc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBYnNvbHV0ZSBwYXRoIHRvIHRoZSBwcm9wZXJ0eSBmcm9tIHJvb3RcclxuICAgICAqL1xyXG4gICAgZ2V0IGFic29sdXRlUGF0aCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hYnNvbHV0ZVBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBYnNvbHV0ZSBwYXRoIHRvIHByb3BlcnR5IGZyb20gcm9vdFxyXG4gICAgICovXHJcbiAgICBnZXQgZGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9ucygpOiBTdWJzY3JpcHRpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlcGVuZGVuY3lQcm9wZXJ0eVN1YnNjcmlwdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBYnNvbHV0ZSBwYXRoIHRvIHByb3BlcnR5IGZyb20gcm9vdFxyXG4gICAgICovXHJcbiAgICBnZXQgb3duZXJNb2RlbFNldHRpbmdzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vd25lck1vZGVsU2V0dGluZ3NOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyBmb3IgaG93IHRvIHJlc3BvbmQgdG8gdmFsdWUgY2hhbmdlcyBvbiBwcm9wZXJ0eSBjb250cm9sIGFuZCBkZXBlbmRlbmN5IGNvbnRyb2xzXHJcbiAgICAgKi9cclxuICAgIHZhbHVlQ2hhbmdlT3B0aW9uczoge1xyXG4gICAgICAgIGRlcGVuZGVuY3lQcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgIHZhbGlkOiBWYWx1ZUNoYW5nZU9wdGlvbnMsXHJcbiAgICAgICAgICAgIGVkaXQ6IFZhbHVlQ2hhbmdlT3B0aW9uc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VsZjoge1xyXG4gICAgICAgICAgICBhc3luY1ZhbGlkOiBWYWx1ZUNoYW5nZU9wdGlvbnMsXHJcbiAgICAgICAgICAgIGVkaXQ6IFZhbHVlQ2hhbmdlT3B0aW9uc1xyXG4gICAgICAgIH1cclxuICAgIH0gPSB7XHJcbiAgICAgICAgZGVwZW5kZW5jeVByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgdmFsaWQ6IHsgZGlzdGluY3RVbnRpbENoYW5nZWQ6IGZhbHNlLCBkZWJvdW5jZU1pbGxpc2Vjb25kczogMCB9LFxyXG4gICAgICAgICAgICBlZGl0OiB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkOiBmYWxzZSwgZGVib3VuY2VNaWxsaXNlY29uZHM6IDAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VsZjoge1xyXG4gICAgICAgICAgICBhc3luY1ZhbGlkOiB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkOiBmYWxzZSwgZGVib3VuY2VNaWxsaXNlY29uZHM6IDAgfSxcclxuICAgICAgICAgICAgZWRpdDogeyBkaXN0aW5jdFVudGlsQ2hhbmdlZDogZmFsc2UsIGRlYm91bmNlTWlsbGlzZWNvbmRzOiAwIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgcHJvcGVydHkgaXMgYW4gQXJyYXlJdGVtUHJvcGVydHlcclxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBQcm9wZXJ0eSB0byBjaGVja1xyXG4gICAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhlIHByb3BlcnR5IGlzIGFuIEFycmF5SXRlbVByb3BlcnR5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0FycmF5SXRlbVByb3BlcnR5PFQ+KHByb3BlcnR5OiBQcm9wZXJ0eUJhc2U8VD4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIShwcm9wZXJ0eSBhcyBQcm9wZXJ0eTxUPikubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERPIE5PVCBDQUxMISBJbnRlcm5hbCB1c2Ugb25seVxyXG4gICAgICogQHBhcmFtIGFic29sdXRlUGF0aCBBYnNvbHV0ZSBwYXRoIHRvIHRoZSBwcm9wZXJ0eSBmcm9tIHRoZSByb290XHJcbiAgICAgKi9cclxuICAgIHNldEFic29sdXRlUGF0aChhYnNvbHV0ZVBhdGg6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2Fic29sdXRlUGF0aCA9IGFic29sdXRlUGF0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERPIE5PVCBDQUxMISBJbnRlcm5hbCB1c2Ugb25seVxyXG4gICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbiBTdWJzY3JpcHRpb24gZm9yIHRoZSBkZXBlbmRlbmN5IHByb3BlcnR5XHJcbiAgICAgKi9cclxuICAgIGFkZERlcGVuZGVuY3lQcm9wZXJ0eVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2RlcGVuZGVuY3lQcm9wZXJ0eVN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRE8gTk9UIENBTEwhIEludGVybmFsIHVzZSBvbmx5XHJcbiAgICAgKi9cclxuICAgIGNsZWFyRGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9ucygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY3lQcm9wZXJ0eVN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWIkID0+IHN1YiQudW5zdWJzY3JpYmUoKSk7XHJcbiAgICAgICAgdGhpcy5fZGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9ucyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRE8gTk9UIENBTEwhIEludGVybmFsIHVzZSBvbmx5XHJcbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBvd25lciBtb2RlbCBzZXR0aW5nc1xyXG4gICAgICovXHJcbiAgICBzZXRPd25lck1vZGVsU2V0dGluZ3NOYW1lKG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX293bmVyTW9kZWxTZXR0aW5nc05hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG59Il19