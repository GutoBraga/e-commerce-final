/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Property } from '../models/property';
import { ArrayItemProperty } from '../models/array-item-property';
import { ResultsPassRequirement } from '../models/results-pass-requirement';
/**
 * Utility class for building model settings
 */
export class ModelSettingsBuilder {
    /**
     * Creates a property
     * @template T
     * @param {?} propertyName Property name
     * @param {?=} extend Function to extend the property
     * @return {?} Created property
     */
    property(propertyName, extend) {
        if (!propertyName || typeof propertyName !== 'string')
            throw Error('Invalid property name');
        const /** @type {?} */ property = new Property(propertyName);
        if (extend)
            extend(property);
        return property;
    }
    /**
     * Creates an array item property
     * @template T
     * @param {?=} extend Function to extend the array item property
     * @return {?} Created array item property
     */
    arrayItemProperty(extend) {
        const /** @type {?} */ property = new ArrayItemProperty();
        if (extend)
            extend(property);
        return property;
    }
    /**
     * Creates a validation test
     * @template T
     * @param {?} message Message when the test fails
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created validation test
     */
    validTest(message, check, condition) {
        return this.validNamedTest(null, message, check, condition);
    }
    /**
     * Creates a named validation test
     * @template T
     * @param {?} name Name of the test
     * @param {?} message Message when the test fails
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created named validation test
     */
    validNamedTest(name, message, check, condition) {
        return /** @type {?} */ ({
            name: name,
            message: message,
            check: check,
            condition: condition
        });
    }
    /**
     * Creates an edit test
     * @template T
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created edit test
     */
    editTest(check, condition) {
        return this.editNamedTest(null, check, condition);
    }
    /**
     * Creates a named edit test
     * @template T
     * @param {?} name Name of the test
     * @param {?} check Check rule set for the test
     * @param {?=} condition Condition rule set for the test
     * @return {?} Created named edit test
     */
    editNamedTest(name, check, condition) {
        return /** @type {?} */ ({
            name: name,
            check: check,
            condition: condition
        });
    }
    /**
     * Creates a rule
     * @template T, R
     * @param {?} func Function for the rule
     * @param {?=} options Additional rule options
     * @return {?} Created rule
     */
    rule(func, options) {
        return this.ruleCombo(func, null, options);
    }
    /**
     * Creates an async rule
     * @template T, R
     * @param {?} asyncFunc Async function for the rule
     * @param {?=} options Additional rule options
     * @return {?} Created rule
     */
    ruleAsync(asyncFunc, options) {
        return this.ruleCombo(null, asyncFunc, options);
    }
    /**
     * Creates a combo rule that has both syncronous and async functions
     * @template T, R
     * @param {?} func Function for the rule
     * @param {?} asyncFunc Async function for the rule
     * @param {?=} options Additional rule options
     * @return {?} Created rule
     */
    ruleCombo(func, asyncFunc, options) {
        return /** @type {?} */ ({
            func: func,
            asyncFunc: asyncFunc,
            options: options
        });
    }
    /**
     * Creates a rule group
     * @template T
     * @param {?} ruleSets Rule sets for the rule group
     * @param {?=} options Additional rule group options
     * @return {?} Created rule group
     */
    ruleGroup(ruleSets, options) {
        return /** @type {?} */ ({
            rules: ruleSets,
            options: options || { resultRequirements: ResultsPassRequirement.AllPass }
        });
    }
}

//# sourceMappingURL=data:application/json;base64,