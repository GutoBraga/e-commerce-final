/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { TRACE_SETTINGS_TOKEN } from '../../form-rules/injection-tokens/trace-settings.token';
export class TraceService {
    /**
     * @param {?=} doTrace
     */
    constructor(doTrace = false) {
        this.doTrace = doTrace;
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    trace(msg) {
        if (!this.doTrace)
            return;
        const /** @type {?} */ fullMsg = `[NGFR - ${this.getTimeStamp()}] ${msg}`;
        console.log(fullMsg);
    }
    /**
     * @return {?}
     */
    getTimeStamp() {
        return (new Date).toLocaleTimeString();
    }
}
TraceService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TraceService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRACE_SETTINGS_TOKEN,] },] },
];
function TraceService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TraceService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TraceService.ctorParameters;
    /** @type {?} */
    TraceService.prototype.doTrace;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZvcm0tcnVsZXMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvdHJhY2UvdHJhY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBRzlGLE1BQU07Ozs7SUFDRixZQUNzRCxVQUFtQixLQUFLO1FBQXhCLFlBQU8sR0FBUCxPQUFPO0tBRTVEOzs7OztJQUVELEtBQUssQ0FBQyxHQUFXO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBRTFCLHVCQUFNLE9BQU8sR0FBRyxXQUFXLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3hCOzs7O0lBRU8sWUFBWTtRQUNoQixNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLGtCQUFrQixFQUFFLENBQUM7Ozs7WUFmOUMsVUFBVTs7Ozs0Q0FHRixRQUFRLFlBQUksTUFBTSxTQUFDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVFJBQ0VfU0VUVElOR1NfVE9LRU4gfSBmcm9tICcuLi8uLi9mb3JtLXJ1bGVzL2luamVjdGlvbi10b2tlbnMvdHJhY2Utc2V0dGluZ3MudG9rZW4nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVHJhY2VTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoVFJBQ0VfU0VUVElOR1NfVE9LRU4pIHByaXZhdGUgZG9UcmFjZTogYm9vbGVhbiA9IGZhbHNlXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICB0cmFjZShtc2c6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5kb1RyYWNlKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGZ1bGxNc2cgPSBgW05HRlIgLSAke3RoaXMuZ2V0VGltZVN0YW1wKCl9XSAke21zZ31gO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGZ1bGxNc2cpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VGltZVN0YW1wKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIChuZXcgRGF0ZSkudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XHJcbiAgICB9XHJcbn1cclxuIl19