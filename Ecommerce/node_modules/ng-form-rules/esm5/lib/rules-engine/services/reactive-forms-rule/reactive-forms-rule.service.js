/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { FormGroup, FormBuilder, FormControl, FormArray } from '@angular/forms';
import { RulesEngineService } from "../rules-engine/rules-engine.service";
import { PropertyBase } from "../../../form-rules/models/property-base";
import { TraceService } from "../../../utils/trace/trace.service";
import { BehaviorSubject, of, timer, EMPTY } from "rxjs";
import { map, tap, switchMap, take, distinctUntilChanged, debounce } from "rxjs/operators";
import { ControlState } from "../../../form-rules/models/control-state";
import { CommonService } from "../../../utils/common/common.service";
/**
 * Builds reactive forms using configured model settings
 */
var ReactiveFormsRuleService = /** @class */ (function () {
    function ReactiveFormsRuleService(rulesEngineSvc, formBuilder, traceSvc, commonSvc) {
        this.rulesEngineSvc = rulesEngineSvc;
        this.formBuilder = formBuilder;
        this.traceSvc = traceSvc;
        this.commonSvc = commonSvc;
    }
    /**
     * Gets model settings with the provided name
     * @param name Name of model setting
     * @returns Model settings with the provided name
     */
    /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    ReactiveFormsRuleService.prototype.getModelSettings = /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    function (name) {
        return this.rulesEngineSvc.getModelSettings(name);
    };
    /**
     * Creates a form group using an instance of model settings
     * @param modelSettings Name of the model setting or an instance of model settings to use
     * @param initialValue Initial data to set the form values to
     * @returns Form group created according to defined model settings
     */
    /**
     * Creates a form group using an instance of model settings
     * @template T
     * @param {?} modelSettings Name of the model setting or an instance of model settings to use
     * @param {?=} initialValue Initial data to set the form values to
     * @return {?} Form group created according to defined model settings
     */
    ReactiveFormsRuleService.prototype.createFormGroup = /**
     * Creates a form group using an instance of model settings
     * @template T
     * @param {?} modelSettings Name of the model setting or an instance of model settings to use
     * @param {?=} initialValue Initial data to set the form values to
     * @return {?} Form group created according to defined model settings
     */
    function (modelSettings, initialValue) {
        var /** @type {?} */ settings;
        if (typeof modelSettings === "string") {
            settings = this.rulesEngineSvc.getModelSettings(/** @type {?} */ (modelSettings));
            if (!settings)
                throw new Error("No model setting found with the name \"" + modelSettings + "\"");
        }
        else {
            if (!modelSettings)
                throw new Error("Adhoc model setting provided is invalid");
            settings = /** @type {?} */ (modelSettings);
            this.rulesEngineSvc.initializeModelSetting(settings);
        }
        this.traceSvc.trace("Creating form group using model settings \"" + settings.name + "\"");
        var /** @type {?} */ formGroup = this.buildGroup(settings.properties, initialValue);
        this.traceSvc.trace("Setting up dependency subscriptions");
        this.resetDependencySubscriptions(formGroup, settings.properties);
        this.traceSvc.trace("Patching form group with initial value");
        this.triggerValueChange(formGroup);
        this.traceSvc.trace("Attaching model settings to form");
        this.attachModelSettingsToForm(formGroup, settings);
        return formGroup;
    };
    /**
     * Adds an array item property to an existing form array
     * @param property ArrayItemProperty to for the array item to be added
     * @param parentFormArray The parent FormArray
     * @param initialValue Initial value of the form array item
     * @param options Options for adding new array item property
     */
    /**
     * Adds an array item property to an existing form array
     * @template T
     * @param {?} property ArrayItemProperty to for the array item to be added
     * @param {?} parentFormArray The parent FormArray
     * @param {?=} initialValue Initial value of the form array item
     * @param {?=} options Options for adding new array item property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.addArrayItemPropertyControl = /**
     * Adds an array item property to an existing form array
     * @template T
     * @param {?} property ArrayItemProperty to for the array item to be added
     * @param {?} parentFormArray The parent FormArray
     * @param {?=} initialValue Initial value of the form array item
     * @param {?=} options Options for adding new array item property
     * @return {?}
     */
    function (property, parentFormArray, initialValue, options) {
        var /** @type {?} */ control = this.buildAbstractControl(property, initialValue);
        var /** @type {?} */ willBeLastItem = !options || !this.commonSvc.isZeroOrGreater(options.index) || options.index >= parentFormArray.length;
        if (willBeLastItem)
            parentFormArray.push(control);
        else
            parentFormArray.insert(options.index, control);
        var /** @type {?} */ modelSettings = this.getModelSettingsFromForm(/** @type {?} */ (parentFormArray.root));
        this.resetDependencySubscriptions(parentFormArray.root, modelSettings.properties);
        // we need to do this because the item could have been added at any index in the array, and we need
        // trigger a value change to trigger any dependency propertiy valdidations
        this.triggerValueChange(parentFormArray);
    };
    /**
     * Extends validators generated by ng-form-rules with your own validators
     * @param control Control to extends the validators for
     * @param validator Validator to add
     */
    /**
     * Extends validators generated by ng-form-rules with your own validators
     * @param {?} control Control to extends the validators for
     * @param {?} validator Validator to add
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.extendValidator = /**
     * Extends validators generated by ng-form-rules with your own validators
     * @param {?} control Control to extends the validators for
     * @param {?} validator Validator to add
     * @return {?}
     */
    function (control, validator) {
        if (!validator)
            return;
        var /** @type {?} */ validatorArray = Array.isArray(validator) ? validator : [validator];
        control.setValidators(tslib_1.__spread([control.validator], validatorArray).filter(function (validatorFn) { return !!validatorFn; }));
    };
    /**
     * Extends async validators generated by ng-form-rules with your own async validators
     * @param control Control to extends the async validators for
     * @param asyncValidator Async validator to add
     */
    /**
     * Extends async validators generated by ng-form-rules with your own async validators
     * @param {?} control Control to extends the async validators for
     * @param {?} asyncValidator Async validator to add
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.extendAsyncValidator = /**
     * Extends async validators generated by ng-form-rules with your own async validators
     * @param {?} control Control to extends the async validators for
     * @param {?} asyncValidator Async validator to add
     * @return {?}
     */
    function (control, asyncValidator) {
        if (!asyncValidator)
            return;
        var /** @type {?} */ asyncValidatorArray = Array.isArray(asyncValidator) ? asyncValidator : [asyncValidator];
        control.setAsyncValidators(tslib_1.__spread([control.asyncValidator], asyncValidatorArray).filter(function (asyncValidatorFn) { return !!asyncValidatorFn; }));
    };
    /**
     * @template T
     * @param {?} property
     * @param {?=} initialValue
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildAbstractControl = /**
     * @template T
     * @param {?} property
     * @param {?=} initialValue
     * @return {?}
     */
    function (property, initialValue) {
        var _this = this;
        var /** @type {?} */ control;
        if (property.arrayItemProperty)
            control = this.buildArray(property.arrayItemProperty, initialValue, property.updateOn);
        else if (property.properties)
            control = this.buildGroup(property.properties, initialValue, property.updateOn);
        else
            control = this.buildControl(initialValue, property.updateOn);
        // setup validation tests on value change
        control.setValidators(this.buildValidatorFunction(property));
        control.setAsyncValidators(this.buildAsyncValidatorFunction(property));
        // setup edit tests on value change
        control.valueChanges
            .pipe(this.applyValueChangeOptions(property.valueChangeOptions.self.edit))
            .subscribe(function (value) {
            _this.persistEditTests(control, property);
        });
        return control;
    };
    /**
     * @template T
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildControl = /**
     * @template T
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    function (initialValue, updateOn) {
        return new FormControl(initialValue, { updateOn: updateOn });
    };
    /**
     * @template T
     * @param {?} properties
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildGroup = /**
     * @template T
     * @param {?} properties
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    function (properties, initialValue, updateOn) {
        var _this = this;
        var /** @type {?} */ formGroup = new FormGroup({}, { updateOn: updateOn });
        (properties || []).forEach(function (p) {
            var /** @type {?} */ propertyValue = initialValue ? initialValue[p.name] : null;
            var /** @type {?} */ ctrl = _this.buildAbstractControl(p, propertyValue);
            formGroup.addControl(p.name, ctrl);
        });
        return formGroup;
    };
    /**
     * @template T
     * @param {?} property
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildArray = /**
     * @template T
     * @param {?} property
     * @param {?} initialValue
     * @param {?=} updateOn
     * @return {?}
     */
    function (property, initialValue, updateOn) {
        var _this = this;
        initialValue = Array.isArray(initialValue) ? initialValue : [];
        return new FormArray(initialValue.map(function (v) { return _this.buildAbstractControl(property, v); }), { updateOn: updateOn });
    };
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildValidatorFunction = /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    function (property) {
        var _this = this;
        var /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
        if (!syncGroups.sync.length)
            return null;
        return function (control) {
            var /** @type {?} */ controlContextValues = _this.getControlContextValues(control, property);
            var /** @type {?} */ testResults = _this.rulesEngineSvc
                .runTests(controlContextValues.relative, syncGroups.sync, {
                rootData: controlContextValues.root,
                controlState: ControlState.create(control)
            });
            if (testResults.results.length) {
                _this.traceSvc.trace("Validated property \"" + property.absolutePath + "\". " +
                    _this.buildTestResultStatsString(testResults));
            }
            return _this.mapToReactiveFormsValidationErrors(testResults);
        };
    };
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildAsyncValidatorFunction = /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    function (property) {
        var _this = this;
        var /** @type {?} */ rawAsyncFunc = this.buildAsyncValidatorFunctionRaw(property);
        if (!rawAsyncFunc)
            return null;
        var /** @type {?} */ values = new BehaviorSubject(null);
        var /** @type {?} */ valid$ = values.pipe(this.applyAsyncValidValueChangeOptions(property.valueChangeOptions.self.asyncValid), switchMap(function (x) {
            // pass through means we did not execute the ng-form-rules async tests
            if (x.passthrough) {
                var /** @type {?} */ currentErrors = x.control.errors || {};
                var /** @type {?} */ lastNgFormRulesErrors = _this.getLastErrorForControl(x.control);
                // return the last ng-form-rules errors (if any) alongside non ng-form-rules errors.
                // this handles scenario where debounce and distinct are used and state goes from:
                //    invalid -> make changes and back them out -> valid
                return of(Object.assign(currentErrors, /** @type {?} */ ({ ngFormRules: lastNgFormRulesErrors })));
            }
            else {
                return rawAsyncFunc(x.control);
            }
        }), take(1));
        return function (control) {
            values.next(control);
            return valid$;
        };
    };
    /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildAsyncValidatorFunctionRaw = /**
     * @template T
     * @param {?} property
     * @return {?}
     */
    function (property) {
        var _this = this;
        var /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
        if (!syncGroups.async.length)
            return null;
        return function (control) {
            var /** @type {?} */ controlContextValues = _this.getControlContextValues(control, property);
            return _this.rulesEngineSvc.runTestsAsync(controlContextValues.relative, syncGroups.async, {
                rootData: controlContextValues.root,
                controlState: ControlState.create(control)
            }).pipe(tap(function (testResults) {
                if (testResults.results.length) {
                    _this.traceSvc.trace("Validated (async) property \"" + property.absolutePath + "\". " +
                        _this.buildTestResultStatsString(testResults));
                }
            }), map(_this.mapToReactiveFormsValidationErrors), tap(function (x) { return _this.setLastErrorForControl(control, (x || {})["ngFormRules"]); }));
        };
    };
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.resetDependencySubscriptions = /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @return {?}
     */
    function (parentControl, properties) {
        this.removeDependencySubscriptions(properties);
        this.addDependencySubscriptions(parentControl, properties);
    };
    /**
     * @template T
     * @param {?} properties
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.removeDependencySubscriptions = /**
     * @template T
     * @param {?} properties
     * @return {?}
     */
    function (properties) {
        var _this = this;
        (properties || []).forEach(function (property) {
            property.clearDependencyPropertySubscriptions();
            if (property.properties) {
                _this.removeDependencySubscriptions(property.properties);
            }
            if (property.arrayItemProperty) {
                _this.removeDependencySubscriptions([property.arrayItemProperty]);
            }
        });
    };
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @param {?=} arrayIndex
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.addDependencySubscriptions = /**
     * @template T
     * @param {?} parentControl
     * @param {?} properties
     * @param {?=} arrayIndex
     * @return {?}
     */
    function (parentControl, properties, arrayIndex) {
        var _this = this;
        (properties || []).forEach(function (property) {
            var /** @type {?} */ propertyControl = _this.getPropertyFromParent(parentControl, property, arrayIndex);
            if (!propertyControl)
                return;
            _this.setupEditabilityDependencySubscriptions(propertyControl, parentControl, property);
            _this.setupValidationDependencySubscriptions(propertyControl, parentControl, property);
            if (property.properties) {
                _this.addDependencySubscriptions(propertyControl, property.properties);
            }
            if (property.arrayItemProperty) {
                // if there is an arrayItemProperty we know that we are working with a FormArray control
                var /** @type {?} */ formArrayControl = (/** @type {?} */ (propertyControl));
                for (var /** @type {?} */ i = 0; i < formArrayControl.length; i++) {
                    _this.addDependencySubscriptions(formArrayControl, [property.arrayItemProperty], i);
                }
            }
        });
    };
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.setupValidationDependencySubscriptions = /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    function (propertyControl, parentControl, property) {
        var _this = this;
        var /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.valid);
        dependencyPropNames.forEach(function (d) {
            var /** @type {?} */ dependencyControl = _this.findControlRelatively(parentControl, d);
            if (!dependencyControl)
                return;
            var /** @type {?} */ sub$ = dependencyControl.valueChanges
                .pipe(_this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.valid))
                .subscribe(function (value) {
                _this.setForceAsyncValidationTestForControl(propertyControl, true);
                propertyControl.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            });
            property.addDependencyPropertySubscription(sub$);
        });
    };
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.setupEditabilityDependencySubscriptions = /**
     * @template T
     * @param {?} propertyControl
     * @param {?} parentControl
     * @param {?} property
     * @return {?}
     */
    function (propertyControl, parentControl, property) {
        var _this = this;
        var /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.edit);
        dependencyPropNames.forEach(function (dpn) {
            var /** @type {?} */ dependencyControl = _this.findControlRelatively(parentControl, dpn);
            if (!dependencyControl)
                return;
            // setup control to perform edit tests when dependency property changes
            var /** @type {?} */ sub$ = dependencyControl.valueChanges
                .pipe(_this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.edit))
                .subscribe(function (value) {
                _this.persistEditTests(propertyControl, property);
            });
            property.addDependencyPropertySubscription(sub$);
        });
    };
    /**
     * @template T
     * @param {?} propertyControl
     * @param {?} property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.persistEditTests = /**
     * @template T
     * @param {?} propertyControl
     * @param {?} property
     * @return {?}
     */
    function (propertyControl, property) {
        var _this = this;
        var /** @type {?} */ controlContextValues = this.getControlContextValues(propertyControl, property);
        this.rulesEngineSvc.editable(controlContextValues.relative, property, {
            rootData: controlContextValues.root,
            controlState: ControlState.create(propertyControl)
        }).subscribe(function (testResults) {
            if (testResults.results.length) {
                _this.traceSvc.trace("Editable property \"" + property.absolutePath + "\". " +
                    _this.buildTestResultStatsString(testResults));
            }
            if (testResults.passed && propertyControl.disabled)
                propertyControl.enable({ emitEvent: false });
            else if (!testResults.passed && propertyControl.enabled)
                propertyControl.disable({ emitEvent: false });
        });
    };
    /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.applyAsyncValidValueChangeOptions = /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    function (valueChangeOptions) {
        var _this = this;
        return function (source$) {
            var /** @type {?} */ lastValue;
            var /** @type {?} */ isForce;
            return source$.pipe(tap(function (control) {
                isForce = _this.doesControlHaveForcedAsyncValidation(control);
                _this.setForceAsyncValidationTestForControl(control, false);
            }), debounce(function (x) {
                return isForce || valueChangeOptions.debounceMilliseconds > 0
                    ? timer(valueChangeOptions.debounceMilliseconds)
                    : EMPTY;
            }), map(function (control) {
                return /** @type {?} */ ({
                    control: control,
                    passthrough: !(control.value !== lastValue || !valueChangeOptions.distinctUntilChanged || isForce)
                });
            }), tap(function (x) {
                if (!x.passthrough)
                    lastValue = x.control.value;
            }));
        };
    };
    /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.applyValueChangeOptions = /**
     * @param {?} valueChangeOptions
     * @return {?}
     */
    function (valueChangeOptions) {
        return function (source$) {
            return source$.pipe(debounce(function (x) {
                return valueChangeOptions.debounceMilliseconds > 0
                    ? timer(valueChangeOptions.debounceMilliseconds)
                    : EMPTY;
            }), valueChangeOptions.distinctUntilChanged ? distinctUntilChanged() : tap());
        };
    };
    /**
     * @template T
     * @param {?} control
     * @param {?} property
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.getControlContextValues = /**
     * @template T
     * @param {?} control
     * @param {?} property
     * @return {?}
     */
    function (control, property) {
        var /** @type {?} */ rootValue = (/** @type {?} */ (control.root)).getRawValue();
        // use the control value if an array item, otherwise use the parent control
        var /** @type {?} */ relativeValue = PropertyBase.isArrayItemProperty(property)
            ? control.value
            : control.parent.getRawValue();
        return {
            root: rootValue,
            relative: relativeValue
        };
    };
    /**
     * @template T
     * @param {?} parentControl
     * @param {?} property
     * @param {?=} arrayIndex
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.getPropertyFromParent = /**
     * @template T
     * @param {?} parentControl
     * @param {?} property
     * @param {?=} arrayIndex
     * @return {?}
     */
    function (parentControl, property, arrayIndex) {
        return PropertyBase.isArrayItemProperty(property)
            ? (/** @type {?} */ (parentControl)).at(arrayIndex)
            : parentControl.get((/** @type {?} */ (property)).name);
    };
    /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.mapToReactiveFormsValidationErrors = /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    function (testResults) {
        // if passed, Angular reactive forms wants us to return null, otherwise return an object with the validation info
        if (!testResults || testResults.passed)
            return null;
        var /** @type {?} */ failed = {};
        testResults.failedResults.forEach(function (test) {
            failed[test.name] = { message: test.message };
        });
        return {
            ngFormRules: /** @type {?} */ ({
                message: testResults.message,
                failed: failed
            })
        };
    };
    /**
     * @param {?} control
     * @param {?} path
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.findControlRelatively = /**
     * @param {?} control
     * @param {?} path
     * @return {?}
     */
    function (control, path) {
        var _this = this;
        var /** @type {?} */ relativePaths = this.buildControlRelativePathArray(path);
        if (!relativePaths.length)
            return null;
        var /** @type {?} */ result;
        relativePaths.forEach(function (pathSegment) {
            result = _this.getControlByPathSegment(result || control, pathSegment);
            if (!result)
                return;
        });
        return result;
    };
    /**
     * @param {?} relativePath
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildControlRelativePathArray = /**
     * @param {?} relativePath
     * @return {?}
     */
    function (relativePath) {
        var /** @type {?} */ result = [];
        if (!relativePath || typeof relativePath !== "string")
            return result;
        // takes care of './', '../', and '/'
        var /** @type {?} */ slashSeparated = relativePath.split("/");
        slashSeparated.forEach(function (slashItem) {
            var /** @type {?} */ dotSeparated = slashItem.split(".")
                .filter(function (dotItem) { return !!dotItem; });
            if (dotSeparated.length)
                result.push.apply(result, tslib_1.__spread(dotSeparated));
            else
                result.push(slashItem);
        });
        return result;
    };
    /**
     * @param {?} control
     * @param {?} pathSegment
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.getControlByPathSegment = /**
     * @param {?} control
     * @param {?} pathSegment
     * @return {?}
     */
    function (control, pathSegment) {
        switch (pathSegment) {
            case "":
                return control.root;
            case "..":
                return control.parent;
            case ".":
                return control;
            default:
                return control.get(pathSegment);
        }
    };
    /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.buildTestResultStatsString = /**
     * @template T
     * @param {?} testResults
     * @return {?}
     */
    function (testResults) {
        return "Executed " + testResults.results.length + " tests " +
            ("(" + testResults.passedResults.length + " PASS | ") +
            (testResults.failedResults.length + " FAIL | ")
            + (testResults.skippedResults.length + " SKIP)");
    };
    /**
     * @template T
     * @param {?} formGroup
     * @param {?} modelSettings
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.attachModelSettingsToForm = /**
     * @template T
     * @param {?} formGroup
     * @param {?} modelSettings
     * @return {?}
     */
    function (formGroup, modelSettings) {
        formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME] = modelSettings;
    };
    /**
     * @template T
     * @param {?} formGroup
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.getModelSettingsFromForm = /**
     * @template T
     * @param {?} formGroup
     * @return {?}
     */
    function (formGroup) {
        return /** @type {?} */ (formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME]);
    };
    /**
     * @param {?} control
     * @param {?} force
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.setForceAsyncValidationTestForControl = /**
     * @param {?} control
     * @param {?} force
     * @return {?}
     */
    function (control, force) {
        control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME] = force;
    };
    /**
     * @param {?} control
     * @param {?} errors
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.setLastErrorForControl = /**
     * @param {?} control
     * @param {?} errors
     * @return {?}
     */
    function (control, errors) {
        control[ReactiveFormsRuleService.CONTROL_LAST_ERROR] = errors;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.getLastErrorForControl = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return control[ReactiveFormsRuleService.CONTROL_LAST_ERROR];
    };
    /**
     * @param {?} control
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.doesControlHaveForcedAsyncValidation = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return !!(control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME]);
    };
    /**
     * @param {?} control
     * @return {?}
     */
    ReactiveFormsRuleService.prototype.triggerValueChange = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        control.patchValue(control.value);
    };
    ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME = 'ngFormRulesModelSetting';
    ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME = 'ngFormRulesForceAsyncValidTestRun';
    ReactiveFormsRuleService.CONTROL_LAST_ERROR = 'ngFormRulesControlLastError';
    ReactiveFormsRuleService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ReactiveFormsRuleService.ctorParameters = function () { return [
        { type: RulesEngineService, },
        { type: FormBuilder, },
        { type: TraceService, },
        { type: CommonService, },
    ]; };
    return ReactiveFormsRuleService;
}());
export { ReactiveFormsRuleService };
function ReactiveFormsRuleService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ReactiveFormsRuleService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ReactiveFormsRuleService.ctorParameters;
    /** @type {?} */
    ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME;
    /** @type {?} */
    ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME;
    /** @type {?} */
    ReactiveFormsRuleService.CONTROL_LAST_ERROR;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.rulesEngineSvc;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.formBuilder;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.traceSvc;
    /** @type {?} */
    ReactiveFormsRuleService.prototype.commonSvc;
}
/**
 * @record
 */
function ControlContextValues() { }
function ControlContextValues_tsickle_Closure_declarations() {
    /** @type {?} */
    ControlContextValues.prototype.root;
    /** @type {?} */
    ControlContextValues.prototype.relative;
}
/**
 * @record
 */
function AsyncValidationPassthroughable() { }
function AsyncValidationPassthroughable_tsickle_Closure_declarations() {
    /** @type {?} */
    AsyncValidationPassthroughable.prototype.control;
    /** @type {?} */
    AsyncValidationPassthroughable.prototype.passthrough;
}

//# sourceMappingURL=data:application/json;base64,