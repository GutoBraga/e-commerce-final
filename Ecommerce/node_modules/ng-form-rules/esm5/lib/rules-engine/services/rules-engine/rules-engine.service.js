/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { MODEL_SETTINGS_TOKEN } from '../../../form-rules/injection-tokens/model-settings.token';
import { TraceService } from '../../../utils/trace/trace.service';
import { CommonService } from '../../../utils/common/common.service';
import { forkJoin, of } from 'rxjs';
import { map, flatMap, mergeMap, take } from 'rxjs/operators';
import { TestResultsBase } from '../../../form-rules/models/test-results-base';
import { PropertyBase } from '../../../form-rules/models/property-base';
import { ProcessResultType } from '../../../form-rules/models/proccess-result-type';
import { ResultsPassRequirement } from '../../../form-rules/models/results-pass-requirement';
/**
 * Engine that digests model settings and applies their rules appropriately
 */
var RulesEngineService = /** @class */ (function () {
    function RulesEngineService(settings, traceSvc, commonSvc) {
        var _this = this;
        this.traceSvc = traceSvc;
        this.commonSvc = commonSvc;
        this.registeredSettings = {};
        if (!Array.isArray(settings))
            return;
        settings.forEach(function (setting) {
            _this.initializeModelSetting(setting);
            _this.registeredSettings[setting.name] = setting;
        });
    }
    /**
     * Initializes model settings and prepares them to be used in a form group
     * @param setting Model setting to initialize
     */
    /**
     * Initializes model settings and prepares them to be used in a form group
     * @param {?} setting Model setting to initialize
     * @return {?}
     */
    RulesEngineService.prototype.initializeModelSetting = /**
     * Initializes model settings and prepares them to be used in a form group
     * @param {?} setting Model setting to initialize
     * @return {?}
     */
    function (setting) {
        this.traceSvc.trace("Initializing model settings \"" + setting.name + "\"");
        this.setPropertyMetadata(setting.properties, setting.name);
    };
    /**
     * Gets model settings with the provided name
     * @param name Name of model setting
     * @returns Model settings with the provided name
     */
    /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    RulesEngineService.prototype.getModelSettings = /**
     * Gets model settings with the provided name
     * @template T
     * @param {?} name Name of model setting
     * @return {?} Model settings with the provided name
     */
    function (name) {
        this.traceSvc.trace("Retrieving model settings \"" + name + "\"");
        var /** @type {?} */ settings = this.registeredSettings[name];
        // create new object
        return settings
            ? Object.assign({}, this.registeredSettings[name])
            : null;
    };
    /**
     * Gets the dependency properties for an array of tests
     * @param tests Tests to get the dependency properties for
     * @returns Dependency properties
     */
    /**
     * Gets the dependency properties for an array of tests
     * @template T
     * @param {?} tests Tests to get the dependency properties for
     * @return {?} Dependency properties
     */
    RulesEngineService.prototype.getDependencyProperties = /**
     * Gets the dependency properties for an array of tests
     * @template T
     * @param {?} tests Tests to get the dependency properties for
     * @return {?} Dependency properties
     */
    function (tests) {
        var _this = this;
        if (!tests)
            return [];
        var /** @type {?} */ deps = tests
            .map(function (t) { return _this.getDependencyPropertiesFromTest(t); })
            .reduce(function (prev, current) { return prev.concat(current); }, []);
        return this.commonSvc.unique(deps);
    };
    /**
     * Gets tests grouped by their sync type (e.g. sync vs. async)
     * @param tests Test to groups
     * @returns Tests grouped by sync type
     */
    /**
     * Gets tests grouped by their sync type (e.g. sync vs. async)
     * @template T
     * @param {?} tests Test to groups
     * @return {?} Tests grouped by sync type
     */
    RulesEngineService.prototype.groupTestsBySyncType = /**
     * Gets tests grouped by their sync type (e.g. sync vs. async)
     * @template T
     * @param {?} tests Test to groups
     * @return {?} Tests grouped by sync type
     */
    function (tests) {
        var _this = this;
        var /** @type {?} */ testGroups = /** @type {?} */ ({
            sync: [],
            async: []
        });
        if (!tests)
            return testGroups;
        tests.forEach(function (test) {
            var /** @type {?} */ testFuncTypes = /** @type {?} */ ({
                sync: false,
                async: false
            });
            var /** @type {?} */ conditionResults = _this.getConfiguredFuncTypes(test.condition);
            var /** @type {?} */ checkResults = _this.getConfiguredFuncTypes(test.check);
            testFuncTypes.sync = conditionResults.sync || checkResults.sync;
            testFuncTypes.async = conditionResults.async || checkResults.async;
            // if there is an async func anywhere in the test's rule sets, then it is considered an async test
            if (testFuncTypes.sync && !testFuncTypes.async)
                testGroups.sync.push(test);
            if (testFuncTypes.async)
                testGroups.async.push(test);
        });
        return testGroups;
    };
    /**
     * Runs validation tests
     * @param data Data to run validation tests against
     * @param property Property to run validation tests for
     * @returns Results of validation tests
     */
    /**
     * Runs validation tests
     * @template T
     * @param {?} data Data to run validation tests against
     * @param {?} property Property to run validation tests for
     * @param {?=} state
     * @return {?} Results of validation tests
     */
    RulesEngineService.prototype.validate = /**
     * Runs validation tests
     * @template T
     * @param {?} data Data to run validation tests against
     * @param {?} property Property to run validation tests for
     * @param {?=} state
     * @return {?} Results of validation tests
     */
    function (data, property, state) {
        return this.runAllTests(data, property.valid, state)
            .pipe(map(function (results) {
            results.propertyName = property.absolutePath;
            return /** @type {?} */ (results);
        }));
    };
    /**
     * Runs editability tests
     * @param data Data to run editability tests against
     * @param property Property to run editability tests for
     * * @returns Results of editability tests
     */
    /**
     * Runs editability tests
     * @template T
     * @param {?} data Data to run editability tests against
     * @param {?} property Property to run editability tests for
     * * \@returns Results of editability tests
     * @param {?=} state
     * @return {?}
     */
    RulesEngineService.prototype.editable = /**
     * Runs editability tests
     * @template T
     * @param {?} data Data to run editability tests against
     * @param {?} property Property to run editability tests for
     * * \@returns Results of editability tests
     * @param {?=} state
     * @return {?}
     */
    function (data, property, state) {
        return this.runAllTests(data, property.edit, state)
            .pipe(map(function (results) {
            results.propertyName = property.absolutePath;
            return /** @type {?} */ (results);
        }));
    };
    /**
     * Runs visibility tests
     * @param data Data to run visibility tests against
     * @param property Property to run visibility tests for
     * * @returns Results of visibility tests
     */
    // visible<T>(data: T, property: Property<T>, state?: TestRunState): Observable<PropertyTestResults<T>> {
    //     return this.runAllTests(data, property.view, state)
    //         .pipe(
    //             map((results: PropertyTestResults<T>) => {
    //                 results.propertyName = property.absolutePath;
    //                 return results as PropertyTestResults<T>;
    //             })
    //         );
    // }
    /**
     * Runs an array of sync tests
     * @param data Data to perform tests against
     * @param tests Tests to run
     * @returns Result of tests
     */
    /**
     * Runs an array of sync tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    RulesEngineService.prototype.runTests = /**
     * Runs an array of sync tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    function (data, tests, state) {
        var _this = this;
        if (!tests || !tests.length)
            return new TestResultsBase([]);
        var /** @type {?} */ testResults = tests
            .map(function (t) { return _this.runTest(data, t, state); })
            .filter(function (x) { return !!x; });
        return new TestResultsBase(testResults);
    };
    /**
     * Runs an array of async tests
     * @param data Data to perform tests against
     * @param tests Tests to run
     * @returns Result of tests
     */
    /**
     * Runs an array of async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    RulesEngineService.prototype.runTestsAsync = /**
     * Runs an array of async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    function (data, tests, state) {
        var _this = this;
        if (!tests || !tests.length)
            return of(new TestResultsBase([]));
        var /** @type {?} */ runTest$ = tests
            .map(function (test) { return _this.runTestAsync(data, test, state); });
        return forkJoin(runTest$)
            .pipe(map(function (testResults) { return new TestResultsBase(testResults.filter(function (x) { return !!x; })); }));
    };
    /**
     * Runs an array of sync and async tests
     * @param data Data to perform tests against
     * @param tests Tests to run
     * @returns Result of tests
     */
    /**
     * Runs an array of sync and async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    RulesEngineService.prototype.runAllTests = /**
     * Runs an array of sync and async tests
     * @template T
     * @param {?} data Data to perform tests against
     * @param {?} tests Tests to run
     * @param {?=} state
     * @return {?} Result of tests
     */
    function (data, tests, state) {
        var _this = this;
        if (!tests || !tests.length)
            return of(new TestResultsBase([]));
        var /** @type {?} */ syncGroups = this.groupTestsBySyncType(tests);
        var /** @type {?} */ syncTestResults = of(this.runTests(data, syncGroups.sync, state));
        return syncTestResults.pipe(mergeMap(function (result) {
            if (!result.passed)
                return of(result);
            return _this.runTestsAsync(data, syncGroups.async, state);
        }), take(1));
    };
    /**
     * Performs sync test on a set of data
     * @param data Data to perform test against
     * @param test Test to run
     * @returns Result of test
     */
    /**
     * Performs sync test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    RulesEngineService.prototype.runTest = /**
     * Performs sync test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    function (data, test, state) {
        if (!test)
            return null;
        var /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
        var /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
        var /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
        var /** @type {?} */ conditionsRuleSetResult = this.processRuleSet(data, test.condition, state);
        if (conditionsRuleSetResult === ProcessResultType.Failed)
            return skippedTestResult;
        var /** @type {?} */ checkRuleSetResult = this.processRuleSet(data, test.check, state);
        switch (checkRuleSetResult) {
            case ProcessResultType.Passed:
                return passedTestResult;
            case ProcessResultType.Failed:
                return failedTestResult;
            case ProcessResultType.Skipped:
            default:
                return skippedTestResult;
        }
    };
    /**
     * Performs async test on a set of data
     * @param data Data to perform test against
     * @param test Test to run
     * @returns Result of test
     */
    /**
     * Performs async test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    RulesEngineService.prototype.runTestAsync = /**
     * Performs async test on a set of data
     * @template T
     * @param {?} data Data to perform test against
     * @param {?} test Test to run
     * @param {?=} state
     * @return {?} Result of test
     */
    function (data, test, state) {
        if (!test)
            return of(null);
        var /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
        var /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
        var /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
        var /** @type {?} */ conditionsRuleSetResult$ = this.processRuleSetAsync(data, test.condition, state);
        var /** @type {?} */ checkRuleSetResult$ = this.processRuleSetAsync(data, test.check, state);
        return conditionsRuleSetResult$
            .pipe(flatMap(function (conditionsRuleSetResult) {
            if (conditionsRuleSetResult === ProcessResultType.Failed)
                return of(skippedTestResult);
            return checkRuleSetResult$
                .pipe(map(function (checkRuleSetResult) {
                switch (checkRuleSetResult) {
                    case ProcessResultType.Passed:
                        return passedTestResult;
                    case ProcessResultType.Failed:
                        return failedTestResult;
                    case ProcessResultType.Skipped:
                    default:
                        return skippedTestResult;
                }
            }));
        }));
    };
    /**
     * Processes a sync rule set
     * @param data Data to process rule set against
     * @param ruleSet Rule set to process
     * @returns Result of rule set processing
     */
    /**
     * Processes a sync rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    RulesEngineService.prototype.processRuleSet = /**
     * Processes a sync rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    function (data, ruleSet, state) {
        if (!ruleSet)
            return ProcessResultType.Skipped;
        var /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        return isRuleGroup
            ? this.processRuleGroup(data, /** @type {?} */ (ruleSet), state)
            : this.processRule(data, /** @type {?} */ (ruleSet), state);
    };
    /**
     * Processes an async rule set
     * @param data Data to process rule set against
     * @param ruleSet Rule set to process
     * @returns Result of rule set processing
     */
    /**
     * Processes an async rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    RulesEngineService.prototype.processRuleSetAsync = /**
     * Processes an async rule set
     * @template T
     * @param {?} data Data to process rule set against
     * @param {?} ruleSet Rule set to process
     * @param {?=} state
     * @return {?} Result of rule set processing
     */
    function (data, ruleSet, state) {
        if (!ruleSet)
            return of(ProcessResultType.Skipped);
        var /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        return isRuleGroup
            ? this.processRuleGroupAsync(data, /** @type {?} */ (ruleSet), state)
            : this.processRuleAsync(data, /** @type {?} */ (ruleSet), state);
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    RulesEngineService.prototype.processRuleGroup = /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    function (data, ruleGroup, state) {
        if (!ruleGroup.rules)
            return ProcessResultType.Skipped;
        var /** @type {?} */ passedCount = 0;
        var /** @type {?} */ skippedCount = 0;
        for (var /** @type {?} */ i = 0; i < ruleGroup.rules.length; i++) {
            var /** @type {?} */ rule = ruleGroup.rules[i];
            var /** @type {?} */ ruleSetResult = this.processRuleSet(data, rule, state);
            if (this.canShortCircuitRuleGroup(ruleSetResult, ruleGroup))
                return ruleSetResult;
            if (ruleSetResult == ProcessResultType.Passed)
                passedCount++;
            else if (ruleSetResult == ProcessResultType.Skipped)
                skippedCount++;
        }
        // if we skipped them all, then return skipped
        if (skippedCount === ruleGroup.rules.length)
            return ProcessResultType.Skipped;
        // if we got this far, make sure all tests were passed
        return passedCount === ruleGroup.rules.length ? ProcessResultType.Passed : ProcessResultType.Failed;
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    RulesEngineService.prototype.processRuleGroupAsync = /**
     * @template T
     * @param {?} data
     * @param {?} ruleGroup
     * @param {?=} state
     * @return {?}
     */
    function (data, ruleGroup, state) {
        var _this = this;
        if (!ruleGroup.rules)
            return of(ProcessResultType.Skipped);
        var /** @type {?} */ asyncRuleSetResults$ = ruleGroup.rules.map(function (x) { return _this.processRuleSetAsync(data, x, state); });
        return forkJoin(asyncRuleSetResults$).pipe(map(function (ruleSetResults) {
            var /** @type {?} */ counts = {
                passed: ruleSetResults.filter(function (x) { return x === ProcessResultType.Passed; }).length,
                failed: ruleSetResults.filter(function (x) { return x === ProcessResultType.Failed; }).length,
                skipped: ruleSetResults.filter(function (x) { return x === ProcessResultType.Skipped; }).length,
            };
            var /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
            if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass && counts.passed > 0)
                return ProcessResultType.Passed;
            if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass && counts.passed === ruleSetResults.length)
                return ProcessResultType.Passed;
            if (counts.skipped === ruleSetResults.length)
                return ProcessResultType.Skipped;
            return ProcessResultType.Failed;
        }));
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    RulesEngineService.prototype.processRule = /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    function (data, rule, state) {
        if (!rule.func)
            return ProcessResultType.Skipped;
        var /** @type {?} */ rootData = state ? state.rootData : null;
        return rule.func(data, rootData) ? ProcessResultType.Passed : ProcessResultType.Failed;
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    RulesEngineService.prototype.processRuleAsync = /**
     * @template T
     * @param {?} data
     * @param {?} rule
     * @param {?=} state
     * @return {?}
     */
    function (data, rule, state) {
        if (!rule.func && !rule.asyncFunc)
            return of(ProcessResultType.Skipped);
        var /** @type {?} */ rootData = state ? state.rootData : null;
        var /** @type {?} */ funcResult = rule.func
            ? of(rule.func(data, rootData))
            : rule.asyncFunc(data, rootData);
        return funcResult
            .pipe(map(function (passed) { return passed ? ProcessResultType.Passed : ProcessResultType.Failed; }));
    };
    /**
     * @template T
     * @param {?} ruleSetResult
     * @param {?} ruleGroup
     * @return {?}
     */
    RulesEngineService.prototype.canShortCircuitRuleGroup = /**
     * @template T
     * @param {?} ruleSetResult
     * @param {?} ruleGroup
     * @return {?}
     */
    function (ruleSetResult, ruleGroup) {
        var /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
        return (
        // it passed, and we only need one to pass
        (ruleSetResult == ProcessResultType.Passed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass)
            ||
                // if failed, and we need all to pass
                (ruleSetResult == ProcessResultType.Failed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass));
    };
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    RulesEngineService.prototype.isRuleGroup = /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        var /** @type {?} */ rule = /** @type {?} */ (ruleSet);
        return !rule.func && !rule.asyncFunc;
    };
    /**
     * @template T
     * @param {?} test
     * @return {?}
     */
    RulesEngineService.prototype.getDependencyPropertiesFromTest = /**
     * @template T
     * @param {?} test
     * @return {?}
     */
    function (test) {
        var /** @type {?} */ checkDeps = this.getDependencyPropertiesFromRuleSet(test.check);
        var /** @type {?} */ conditionDeps = this.getDependencyPropertiesFromRuleSet(test.condition);
        return this.commonSvc.unique(checkDeps.concat(conditionDeps));
    };
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    RulesEngineService.prototype.getDependencyPropertiesFromRuleSet = /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        var _this = this;
        if (!ruleSet)
            return [];
        var /** @type {?} */ result = [];
        if (this.isRuleGroup(ruleSet)) {
            var /** @type {?} */ ruleGroup = /** @type {?} */ (ruleSet);
            ruleGroup.rules.forEach(function (x) {
                result.push.apply(result, tslib_1.__spread(_this.commonSvc.unique(_this.getDependencyPropertiesFromRuleSet(x))));
            });
        }
        var /** @type {?} */ rule = /** @type {?} */ (ruleSet);
        if (rule.options && Array.isArray(rule.options.dependencyProperties)) {
            result.push.apply(result, tslib_1.__spread(this.commonSvc.unique(rule.options.dependencyProperties)));
        }
        return this.commonSvc.unique(result);
    };
    /**
     * @param {?} properties
     * @param {?} modelSettingsName
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    RulesEngineService.prototype.setPropertyMetadata = /**
     * @param {?} properties
     * @param {?} modelSettingsName
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    function (properties, modelSettingsName, currentAbsolutePath) {
        var _this = this;
        if (currentAbsolutePath === void 0) { currentAbsolutePath = ''; }
        if (!properties)
            return;
        properties.forEach(function (prop) {
            var /** @type {?} */ newAbsolutePath = _this.setPropertyAbsolutePath(prop, currentAbsolutePath);
            _this.fillInEmptyTestNames(prop);
            prop.setOwnerModelSettingsName(modelSettingsName);
            if (prop.properties) {
                _this.setPropertyMetadata(prop.properties, modelSettingsName, newAbsolutePath);
            }
            else if (prop.arrayItemProperty) {
                _this.setPropertyMetadata([prop.arrayItemProperty], modelSettingsName, newAbsolutePath);
            }
        });
    };
    /**
     * @param {?} property
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    RulesEngineService.prototype.setPropertyAbsolutePath = /**
     * @param {?} property
     * @param {?=} currentAbsolutePath
     * @return {?}
     */
    function (property, currentAbsolutePath) {
        if (currentAbsolutePath === void 0) { currentAbsolutePath = ''; }
        var /** @type {?} */ isArrayItemProperty = PropertyBase.isArrayItemProperty(property);
        var /** @type {?} */ newAbsolutePathSegment = isArrayItemProperty ? '[]' : (/** @type {?} */ (property)).name;
        var /** @type {?} */ isAtRoot = !currentAbsolutePath;
        var /** @type {?} */ newAbsolutePath = "" + currentAbsolutePath + (isAtRoot ? '' : '.') + newAbsolutePathSegment;
        // set absolute path for property
        property.setAbsolutePath(newAbsolutePath);
        return newAbsolutePath;
    };
    /**
     * @param {?} property
     * @return {?}
     */
    RulesEngineService.prototype.fillInEmptyTestNames = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        property.valid
            .filter(function (test) { return !test.name; })
            .forEach(function (test, i) { return test.name = "validTest" + i; });
        property.edit
            .filter(function (test) { return !test.name; })
            .forEach(function (test, i) { return test.name = "editTest" + i; });
    };
    /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    RulesEngineService.prototype.getConfiguredFuncTypes = /**
     * @template T
     * @param {?} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        var _this = this;
        if (!ruleSet)
            return { sync: false, async: false };
        var /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
        if (isRuleGroup) {
            var /** @type {?} */ ruleGroup = /** @type {?} */ (ruleSet);
            var /** @type {?} */ results = ruleGroup.rules
                .map(function (rs) {
                return _this.getConfiguredFuncTypes(rs);
            });
            return {
                sync: results.findIndex(function (x) { return !!x.sync; }) >= 0,
                async: results.findIndex(function (x) { return !!x.async; }) >= 0,
            };
        }
        else {
            var /** @type {?} */ rule = /** @type {?} */ (ruleSet);
            return {
                sync: !!rule.func,
                async: !!rule.asyncFunc
            };
        }
    };
    RulesEngineService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    RulesEngineService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [MODEL_SETTINGS_TOKEN,] },] },
        { type: TraceService, },
        { type: CommonService, },
    ]; };
    return RulesEngineService;
}());
export { RulesEngineService };
function RulesEngineService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    RulesEngineService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    RulesEngineService.ctorParameters;
    /** @type {?} */
    RulesEngineService.prototype.registeredSettings;
    /** @type {?} */
    RulesEngineService.prototype.traceSvc;
    /** @type {?} */
    RulesEngineService.prototype.commonSvc;
}
/**
 * @record
 */
function ConfiguredFuncTypes() { }
function ConfiguredFuncTypes_tsickle_Closure_declarations() {
    /** @type {?} */
    ConfiguredFuncTypes.prototype.sync;
    /** @type {?} */
    ConfiguredFuncTypes.prototype.async;
}

//# sourceMappingURL=data:application/json;base64,