/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Results of executing a collection of tests
 * @template T
 */
var /**
 * Results of executing a collection of tests
 * @template T
 */
TestResultsBase = /** @class */ (function () {
    function TestResultsBase(results) {
        this.results = results;
        this.results = this.results || [];
    }
    Object.defineProperty(TestResultsBase.prototype, "passed", {
        /**
         * Whether the tests passed
         */
        get: /**
         * Whether the tests passed
         * @return {?}
         */
        function () {
            return !this.failedResults.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestResultsBase.prototype, "passedResults", {
        /**
         * Array of test results that passed
         */
        get: /**
         * Array of test results that passed
         * @return {?}
         */
        function () {
            return this.results.filter(function (x) { return !!x.passed && !x.skipped; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestResultsBase.prototype, "failedResults", {
        /**
         * Array of test results that failed
         */
        get: /**
         * Array of test results that failed
         * @return {?}
         */
        function () {
            return this.results.filter(function (x) { return !x.passed; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestResultsBase.prototype, "skippedResults", {
        /**
         * Array of test results that were skipped
         */
        get: /**
         * Array of test results that were skipped
         * @return {?}
         */
        function () {
            return this.results.filter(function (x) { return !!x.skipped; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestResultsBase.prototype, "message", {
        /**
         * Message of the first test that failed
         */
        get: /**
         * Message of the first test that failed
         * @return {?}
         */
        function () {
            return this.messages[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestResultsBase.prototype, "messages", {
        /**
         * Messages of all failed tests
         */
        get: /**
         * Messages of all failed tests
         * @return {?}
         */
        function () {
            var /** @type {?} */ messages = this.failedResults.map(function (x) { return x.message; });
            return Array.from(new Set(messages));
        },
        enumerable: true,
        configurable: true
    });
    return TestResultsBase;
}());
/**
 * Results of executing a collection of tests
 * @template T
 */
export { TestResultsBase };
function TestResultsBase_tsickle_Closure_declarations() {
    /** @type {?} */
    TestResultsBase.prototype.results;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1yZXN1bHRzLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1mb3JtLXJ1bGVzLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tcnVsZXMvbW9kZWxzL3Rlc3QtcmVzdWx0cy1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBS0E7Ozs7QUFBQTtJQUNJLHlCQUFtQixPQUF3QjtRQUF4QixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0tBQ3JDO0lBS0Qsc0JBQUksbUNBQU07UUFIVjs7V0FFRzs7Ozs7UUFDSDtZQUNJLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1NBQ3JDOzs7T0FBQTtJQUtELHNCQUFJLDBDQUFhO1FBSGpCOztXQUVHOzs7OztRQUNIO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUF4QixDQUF3QixDQUFDLENBQUM7U0FDN0Q7OztPQUFBO0lBS0Qsc0JBQUksMENBQWE7UUFIakI7O1dBRUc7Ozs7O1FBQ0g7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQVQsQ0FBUyxDQUFDLENBQUM7U0FDOUM7OztPQUFBO0lBS0Qsc0JBQUksMkNBQWM7UUFIbEI7O1dBRUc7Ozs7O1FBQ0g7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBWCxDQUFXLENBQUMsQ0FBQztTQUNoRDs7O09BQUE7SUFLRCxzQkFBSSxvQ0FBTztRQUhYOztXQUVHOzs7OztRQUNIO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0I7OztPQUFBO0lBS0Qsc0JBQUkscUNBQVE7UUFIWjs7V0FFRzs7Ozs7UUFDSDtZQUNJLHFCQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxPQUFPLEVBQVQsQ0FBUyxDQUFDLENBQUM7WUFDeEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN4Qzs7O09BQUE7MEJBbkRMO0lBb0RDLENBQUE7Ozs7O0FBL0NELDJCQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RSZXN1bHQgfSBmcm9tIFwiLi90ZXN0LXJlc3VsdFwiO1xyXG5cclxuLyoqXHJcbiAqIFJlc3VsdHMgb2YgZXhlY3V0aW5nIGEgY29sbGVjdGlvbiBvZiB0ZXN0c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlc3RSZXN1bHRzQmFzZTxUPiB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVzdWx0czogVGVzdFJlc3VsdDxUPltdKSB7XHJcbiAgICAgICAgdGhpcy5yZXN1bHRzID0gdGhpcy5yZXN1bHRzIHx8IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGUgdGVzdHMgcGFzc2VkXHJcbiAgICAgKi9cclxuICAgIGdldCBwYXNzZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmZhaWxlZFJlc3VsdHMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgdGVzdCByZXN1bHRzIHRoYXQgcGFzc2VkXHJcbiAgICAgKi9cclxuICAgIGdldCBwYXNzZWRSZXN1bHRzKCk6IFRlc3RSZXN1bHQ8VD5bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0cy5maWx0ZXIoeCA9PiAhIXgucGFzc2VkICYmICF4LnNraXBwZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgdGVzdCByZXN1bHRzIHRoYXQgZmFpbGVkXHJcbiAgICAgKi9cclxuICAgIGdldCBmYWlsZWRSZXN1bHRzKCk6IFRlc3RSZXN1bHQ8VD5bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0cy5maWx0ZXIoeCA9PiAheC5wYXNzZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgdGVzdCByZXN1bHRzIHRoYXQgd2VyZSBza2lwcGVkXHJcbiAgICAgKi9cclxuICAgIGdldCBza2lwcGVkUmVzdWx0cygpOiBUZXN0UmVzdWx0PFQ+W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3VsdHMuZmlsdGVyKHggPT4gISF4LnNraXBwZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWVzc2FnZSBvZiB0aGUgZmlyc3QgdGVzdCB0aGF0IGZhaWxlZFxyXG4gICAgICovXHJcbiAgICBnZXQgbWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWVzc2FnZXMgb2YgYWxsIGZhaWxlZCB0ZXN0c1xyXG4gICAgICovXHJcbiAgICBnZXQgbWVzc2FnZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gdGhpcy5mYWlsZWRSZXN1bHRzLm1hcCh4ID0+IHgubWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChtZXNzYWdlcykpO1xyXG4gICAgfVxyXG59Il19