/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ModelSettingsBuilder } from "../helper/model-settings-builder";
/**
 * Base class for model settings
 * @abstract
 * @template T
 */
var /**
 * Base class for model settings
 * @abstract
 * @template T
 */
AbstractModelSettings = /** @class */ (function () {
    /**
     * Creates model settings
     * @param name Name of the model settings
     */
    function AbstractModelSettings(name) {
        this.builder = new ModelSettingsBuilder();
        this._name = name;
        this.properties = this.buildProperties() || [];
    }
    Object.defineProperty(AbstractModelSettings.prototype, "name", {
        /**
         * Name of the model setting
         */
        get: /**
         * Name of the model setting
         * @return {?}
         */
        function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    return AbstractModelSettings;
}());
/**
 * Base class for model settings
 * @abstract
 * @template T
 */
export { AbstractModelSettings };
function AbstractModelSettings_tsickle_Closure_declarations() {
    /** @type {?} */
    AbstractModelSettings.prototype._name;
    /**
     * Helper for building properties, tests, and rules
     * @type {?}
     */
    AbstractModelSettings.prototype.builder;
    /**
     * Properties configured for the model settings
     * @type {?}
     */
    AbstractModelSettings.prototype.properties;
    /**
     * Abstract function for building the properties
     * @abstract
     * @return {?}
     */
    AbstractModelSettings.prototype.buildProperties = function () { };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbW9kZWwtc2V0dGluZ3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1mb3JtLXJ1bGVzLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tcnVsZXMvbW9kZWxzL2Fic3RyYWN0LW1vZGVsLXNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7O0FBTXhFOzs7OztBQUFBO0lBb0JJOzs7T0FHRztJQUNILCtCQUFZLElBQVk7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ2xEO0lBdEJELHNCQUFJLHVDQUFJO1FBSFI7O1dBRUc7Ozs7O1FBQ0g7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNyQjs7O09BQUE7Z0NBZEw7SUF3Q0MsQ0FBQTs7Ozs7O0FBbENELGlDQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGVsU2V0dGluZ3NCdWlsZGVyIH0gZnJvbSBcIi4uL2hlbHBlci9tb2RlbC1zZXR0aW5ncy1idWlsZGVyXCI7XHJcbmltcG9ydCB7IFByb3BlcnR5IH0gZnJvbSBcIi4vcHJvcGVydHlcIjtcclxuXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBtb2RlbCBzZXR0aW5nc1xyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0TW9kZWxTZXR0aW5nczxUPiB7XHJcbiAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOYW1lIG9mIHRoZSBtb2RlbCBzZXR0aW5nXHJcbiAgICAgKi9cclxuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZm9yIGJ1aWxkaW5nIHByb3BlcnRpZXMsIHRlc3RzLCBhbmQgcnVsZXNcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGJ1aWxkZXI6IE1vZGVsU2V0dGluZ3NCdWlsZGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGVydGllcyBjb25maWd1cmVkIGZvciB0aGUgbW9kZWwgc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgcHJvcGVydGllczogUHJvcGVydHk8VD5bXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgbW9kZWwgc2V0dGluZ3NcclxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIG1vZGVsIHNldHRpbmdzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuYnVpbGRlciA9IG5ldyBNb2RlbFNldHRpbmdzQnVpbGRlcigpO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMuYnVpbGRQcm9wZXJ0aWVzKCkgfHwgW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBYnN0cmFjdCBmdW5jdGlvbiBmb3IgYnVpbGRpbmcgdGhlIHByb3BlcnRpZXNcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGJ1aWxkUHJvcGVydGllcygpOiBQcm9wZXJ0eTxUPltdO1xyXG59Il19