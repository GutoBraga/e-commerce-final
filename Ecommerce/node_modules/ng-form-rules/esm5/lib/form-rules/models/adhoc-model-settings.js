/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AbstractModelSettings } from "./abstract-model-settings";
/**
 * Class for creating adhoc (non-registered) model settings
 * @template T
 */
var /**
 * Class for creating adhoc (non-registered) model settings
 * @template T
 */
AdhocModelSettings = /** @class */ (function (_super) {
    tslib_1.__extends(AdhocModelSettings, _super);
    function AdhocModelSettings() {
        // since these settings are not registered, just use a static name
        return _super.call(this, 'adhoc') || this;
    }
    /**
     * Creates model settings
     * @param propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties
     * @returns Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter
     */
    /**
     * Creates model settings
     * @template T
     * @param {?} propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties
     * @return {?} Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter
     */
    AdhocModelSettings.create = /**
     * Creates model settings
     * @template T
     * @param {?} propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties
     * @return {?} Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter
     */
    function (propertyBuilderFunc) {
        var /** @type {?} */ instance = new AdhocModelSettings();
        instance.properties = !!propertyBuilderFunc ? propertyBuilderFunc(instance.builder) || [] : [];
        return instance;
    };
    /**
     * @return {?}
     */
    AdhocModelSettings.prototype.buildProperties = /**
     * @return {?}
     */
    function () {
        // this is just needed to satisfy the AbstractModelSettings<T> contract
        return [];
    };
    return AdhocModelSettings;
}(AbstractModelSettings));
/**
 * Class for creating adhoc (non-registered) model settings
 * @template T
 */
export { AdhocModelSettings };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRob2MtbW9kZWwtc2V0dGluZ3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1mb3JtLXJ1bGVzLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tcnVsZXMvbW9kZWxzL2FkaG9jLW1vZGVsLXNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7O0FBT2xFOzs7O0FBQUE7SUFBMkMsOENBQXdCOztRQWMzRCxrRUFBa0U7ZUFDbEUsa0JBQU0sT0FBTyxDQUFDOztJQWRsQjs7OztPQUlHOzs7Ozs7O0lBQ0kseUJBQU07Ozs7OztJQUFiLFVBQWlCLG1CQUFxRTtRQUNsRixxQkFBTSxRQUFRLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO1FBQzFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFL0YsTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNuQjs7OztJQU9TLDRDQUFlOzs7SUFBekI7O1FBRUksTUFBTSxDQUFDLEVBQUUsQ0FBQztLQUNiOzZCQTVCTDtFQU8yQyxxQkFBcUIsRUFzQi9ELENBQUE7Ozs7O0FBdEJELDhCQXNCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0TW9kZWxTZXR0aW5ncyB9IGZyb20gXCIuL2Fic3RyYWN0LW1vZGVsLXNldHRpbmdzXCI7XHJcbmltcG9ydCB7IE1vZGVsU2V0dGluZ3NCdWlsZGVyIH0gZnJvbSBcIi4uL2hlbHBlci9tb2RlbC1zZXR0aW5ncy1idWlsZGVyXCI7XHJcbmltcG9ydCB7IFByb3BlcnR5IH0gZnJvbSBcIi4vcHJvcGVydHlcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgY3JlYXRpbmcgYWRob2MgKG5vbi1yZWdpc3RlcmVkKSBtb2RlbCBzZXR0aW5nc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFkaG9jTW9kZWxTZXR0aW5nczxUPiBleHRlbmRzIEFic3RyYWN0TW9kZWxTZXR0aW5nczxUPiB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgbW9kZWwgc2V0dGluZ3NcclxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eUJ1aWxkZXJGdW5jIEZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBNb2RlbFNldHRpbmdzQnVpbGRlciBhbmQgdXNlcyBpdCB0byByZXR1cm4gYW4gYXJyYXkgb2YgcHJvcGVydGllc1xyXG4gICAgICogQHJldHVybnMgTW9kZWwgc2V0dGluZ3MgY29uZmlndXJlZCB3aXRoIHByb3BlcnRpZXMgcmV0dXJuZWQgZnJvbSB0aGUgJ3Byb3BlcnR5QnVpbGRlckZ1bmMnIGZ1bmN0aW9uIHBhcmFtZXRlclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3JlYXRlPFQ+KHByb3BlcnR5QnVpbGRlckZ1bmM6IChidWlsZGVyOiBNb2RlbFNldHRpbmdzQnVpbGRlcikgPT4gUHJvcGVydHk8VD5bXSk6IEFic3RyYWN0TW9kZWxTZXR0aW5nczxUPiB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgQWRob2NNb2RlbFNldHRpbmdzKCk7XHJcbiAgICAgICAgaW5zdGFuY2UucHJvcGVydGllcyA9ICEhcHJvcGVydHlCdWlsZGVyRnVuYyA/IHByb3BlcnR5QnVpbGRlckZ1bmMoaW5zdGFuY2UuYnVpbGRlcikgfHwgW10gOiBbXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gc2luY2UgdGhlc2Ugc2V0dGluZ3MgYXJlIG5vdCByZWdpc3RlcmVkLCBqdXN0IHVzZSBhIHN0YXRpYyBuYW1lXHJcbiAgICAgICAgc3VwZXIoJ2FkaG9jJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGJ1aWxkUHJvcGVydGllcygpOiBQcm9wZXJ0eTxUPltdIHtcclxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgbmVlZGVkIHRvIHNhdGlzZnkgdGhlIEFic3RyYWN0TW9kZWxTZXR0aW5nczxUPiBjb250cmFjdFxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufSJdfQ==