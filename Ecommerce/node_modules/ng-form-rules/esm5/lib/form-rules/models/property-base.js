/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Base class for a property
 * @abstract
 * @template T
 */
var /**
 * Base class for a property
 * @abstract
 * @template T
 */
PropertyBase = /** @class */ (function () {
    function PropertyBase() {
        this._dependencyPropertySubscriptions = [];
        /**
         * Validation tests
         */
        this.valid = [];
        /**
         * Editability tests
         */
        this.edit = [];
        /**
         * The event name for control to update upon.
         */
        this.updateOn = 'change';
        /**
         * Options for how to respond to value changes on property control and dependency controls
         */
        this.valueChangeOptions = {
            dependencyProperties: {
                valid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
            },
            self: {
                asyncValid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
            }
        };
    }
    Object.defineProperty(PropertyBase.prototype, "absolutePath", {
        /**
         * Absolute path to the property from root
         */
        get: /**
         * Absolute path to the property from root
         * @return {?}
         */
        function () {
            return this._absolutePath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyBase.prototype, "dependencyPropertySubscriptions", {
        /**
         * Absolute path to property from root
         */
        get: /**
         * Absolute path to property from root
         * @return {?}
         */
        function () {
            return this._dependencyPropertySubscriptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyBase.prototype, "ownerModelSettingsName", {
        /**
         * Absolute path to property from root
         */
        get: /**
         * Absolute path to property from root
         * @return {?}
         */
        function () {
            return this._ownerModelSettingsName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Determines if the property is an ArrayItemProperty
     * @param property Property to check
     * @returns Whether or not the property is an ArrayItemProperty
     */
    /**
     * Determines if the property is an ArrayItemProperty
     * @template T
     * @param {?} property Property to check
     * @return {?} Whether or not the property is an ArrayItemProperty
     */
    PropertyBase.isArrayItemProperty = /**
     * Determines if the property is an ArrayItemProperty
     * @template T
     * @param {?} property Property to check
     * @return {?} Whether or not the property is an ArrayItemProperty
     */
    function (property) {
        return !(/** @type {?} */ (property)).name;
    };
    /**
     * DO NOT CALL! Internal use only
     * @param absolutePath Absolute path to the property from the root
     */
    /**
     * DO NOT CALL! Internal use only
     * @param {?} absolutePath Absolute path to the property from the root
     * @return {?}
     */
    PropertyBase.prototype.setAbsolutePath = /**
     * DO NOT CALL! Internal use only
     * @param {?} absolutePath Absolute path to the property from the root
     * @return {?}
     */
    function (absolutePath) {
        this._absolutePath = absolutePath;
    };
    /**
     * DO NOT CALL! Internal use only
     * @param subscription Subscription for the dependency property
     */
    /**
     * DO NOT CALL! Internal use only
     * @param {?} subscription Subscription for the dependency property
     * @return {?}
     */
    PropertyBase.prototype.addDependencyPropertySubscription = /**
     * DO NOT CALL! Internal use only
     * @param {?} subscription Subscription for the dependency property
     * @return {?}
     */
    function (subscription) {
        this._dependencyPropertySubscriptions.push(subscription);
    };
    /**
     * DO NOT CALL! Internal use only
     */
    /**
     * DO NOT CALL! Internal use only
     * @return {?}
     */
    PropertyBase.prototype.clearDependencyPropertySubscriptions = /**
     * DO NOT CALL! Internal use only
     * @return {?}
     */
    function () {
        this.dependencyPropertySubscriptions.forEach(function (sub$) { return sub$.unsubscribe(); });
        this._dependencyPropertySubscriptions = [];
    };
    /**
     * DO NOT CALL! Internal use only
     * @param name Name of the owner model settings
     */
    /**
     * DO NOT CALL! Internal use only
     * @param {?} name Name of the owner model settings
     * @return {?}
     */
    PropertyBase.prototype.setOwnerModelSettingsName = /**
     * DO NOT CALL! Internal use only
     * @param {?} name Name of the owner model settings
     * @return {?}
     */
    function (name) {
        this._ownerModelSettingsName = name;
    };
    return PropertyBase;
}());
/**
 * Base class for a property
 * @abstract
 * @template T
 */
export { PropertyBase };
function PropertyBase_tsickle_Closure_declarations() {
    /** @type {?} */
    PropertyBase.prototype._absolutePath;
    /** @type {?} */
    PropertyBase.prototype._dependencyPropertySubscriptions;
    /** @type {?} */
    PropertyBase.prototype._ownerModelSettingsName;
    /**
     * Validation tests
     * @type {?}
     */
    PropertyBase.prototype.valid;
    /**
     * Editability tests
     * @type {?}
     */
    PropertyBase.prototype.edit;
    /**
     * Properties for a complex object
     * @type {?}
     */
    PropertyBase.prototype.properties;
    /**
     * Property for an item of an array
     * @type {?}
     */
    PropertyBase.prototype.arrayItemProperty;
    /**
     * The event name for control to update upon.
     * @type {?}
     */
    PropertyBase.prototype.updateOn;
    /**
     * Options for how to respond to value changes on property control and dependency controls
     * @type {?}
     */
    PropertyBase.prototype.valueChangeOptions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZvcm0tcnVsZXMvIiwic291cmNlcyI6WyJsaWIvZm9ybS1ydWxlcy9tb2RlbHMvcHJvcGVydHktYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFVQTs7Ozs7QUFBQTs7Z0RBRStELEVBQUU7Ozs7cUJBTTFDLEVBQUU7Ozs7b0JBS0gsRUFBRTs7Ozt3QkFvQkUsUUFBUTs7OztrQ0FtQzFCO1lBQ0Esb0JBQW9CLEVBQUU7Z0JBQ2xCLEtBQUssRUFBRSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUU7Z0JBQy9ELElBQUksRUFBRSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQUU7YUFDakU7WUFDRCxJQUFJLEVBQUU7Z0JBQ0YsVUFBVSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLENBQUMsRUFBRTtnQkFDcEUsSUFBSSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLENBQUMsRUFBRTthQUNqRTtTQUNKOztJQXZDRCxzQkFBSSxzQ0FBWTtRQUhoQjs7V0FFRzs7Ozs7UUFDSDtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQzdCOzs7T0FBQTtJQUtELHNCQUFJLHlEQUErQjtRQUhuQzs7V0FFRzs7Ozs7UUFDSDtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUM7U0FDaEQ7OztPQUFBO0lBS0Qsc0JBQUksZ0RBQXNCO1FBSDFCOztXQUVHOzs7OztRQUNIO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztTQUN2Qzs7O09BQUE7SUF5QkQ7Ozs7T0FJRzs7Ozs7OztJQUNJLGdDQUFtQjs7Ozs7O0lBQTFCLFVBQThCLFFBQXlCO1FBQ25ELE1BQU0sQ0FBQyxDQUFDLG1CQUFDLFFBQXVCLEVBQUMsQ0FBQyxJQUFJLENBQUM7S0FDMUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILHNDQUFlOzs7OztJQUFmLFVBQWdCLFlBQW9CO1FBQ2hDLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO0tBQ3JDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSCx3REFBaUM7Ozs7O0lBQWpDLFVBQWtDLFlBQTBCO1FBQ3hELElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDNUQ7SUFFRDs7T0FFRzs7Ozs7SUFDSCwyREFBb0M7Ozs7SUFBcEM7UUFDSSxJQUFJLENBQUMsK0JBQStCLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFsQixDQUFrQixDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLEVBQUUsQ0FBQztLQUM5QztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0gsZ0RBQXlCOzs7OztJQUF6QixVQUEwQixJQUFZO1FBQ2xDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7S0FDdkM7dUJBaElMO0lBaUlDLENBQUE7Ozs7OztBQXZIRCx3QkF1SEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0IH0gZnJvbSBcIi4vdGVzdFwiO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eSB9IGZyb20gXCIuL3Byb3BlcnR5XCI7XHJcbmltcG9ydCB7IEFycmF5SXRlbVByb3BlcnR5IH0gZnJvbSBcIi4vYXJyYXktaXRlbS1wcm9wZXJ0eVwiO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBWYWx1ZUNoYW5nZU9wdGlvbnMgfSBmcm9tIFwiLi92YWx1ZS1jaGFuZ2Utb3B0aW9uc1wiO1xyXG5pbXBvcnQgeyBVcGRhdGVPbiB9IGZyb20gXCIuL3VwZGF0ZS1vblwiO1xyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIGEgcHJvcGVydHlcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQcm9wZXJ0eUJhc2U8VD4ge1xyXG4gICAgcHJpdmF0ZSBfYWJzb2x1dGVQYXRoOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9kZXBlbmRlbmN5UHJvcGVydHlTdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfb3duZXJNb2RlbFNldHRpbmdzTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGlvbiB0ZXN0c1xyXG4gICAgICovXHJcbiAgICB2YWxpZDogVGVzdDxUPltdID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFZGl0YWJpbGl0eSB0ZXN0c1xyXG4gICAgICovXHJcbiAgICBlZGl0OiBUZXN0PFQ+W10gPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZpZXdhYmlsaXR5IHRlc3RzXHJcbiAgICAgKi9cclxuICAgIC8vIHZpZXc6IFRlc3Q8VD5bXSA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGVydGllcyBmb3IgYSBjb21wbGV4IG9iamVjdFxyXG4gICAgICovXHJcbiAgICBwcm9wZXJ0aWVzPzogUHJvcGVydHk8YW55PltdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGVydHkgZm9yIGFuIGl0ZW0gb2YgYW4gYXJyYXlcclxuICAgICAqL1xyXG4gICAgYXJyYXlJdGVtUHJvcGVydHk/OiBBcnJheUl0ZW1Qcm9wZXJ0eTxhbnk+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGV2ZW50IG5hbWUgZm9yIGNvbnRyb2wgdG8gdXBkYXRlIHVwb24uXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZU9uPzogVXBkYXRlT24gPSAnY2hhbmdlJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFic29sdXRlIHBhdGggdG8gdGhlIHByb3BlcnR5IGZyb20gcm9vdFxyXG4gICAgICovXHJcbiAgICBnZXQgYWJzb2x1dGVQYXRoKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fic29sdXRlUGF0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFic29sdXRlIHBhdGggdG8gcHJvcGVydHkgZnJvbSByb290XHJcbiAgICAgKi9cclxuICAgIGdldCBkZXBlbmRlbmN5UHJvcGVydHlTdWJzY3JpcHRpb25zKCk6IFN1YnNjcmlwdGlvbltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFic29sdXRlIHBhdGggdG8gcHJvcGVydHkgZnJvbSByb290XHJcbiAgICAgKi9cclxuICAgIGdldCBvd25lck1vZGVsU2V0dGluZ3NOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX293bmVyTW9kZWxTZXR0aW5nc05hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIGZvciBob3cgdG8gcmVzcG9uZCB0byB2YWx1ZSBjaGFuZ2VzIG9uIHByb3BlcnR5IGNvbnRyb2wgYW5kIGRlcGVuZGVuY3kgY29udHJvbHNcclxuICAgICAqL1xyXG4gICAgdmFsdWVDaGFuZ2VPcHRpb25zOiB7XHJcbiAgICAgICAgZGVwZW5kZW5jeVByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgdmFsaWQ6IFZhbHVlQ2hhbmdlT3B0aW9ucyxcclxuICAgICAgICAgICAgZWRpdDogVmFsdWVDaGFuZ2VPcHRpb25zXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWxmOiB7XHJcbiAgICAgICAgICAgIGFzeW5jVmFsaWQ6IFZhbHVlQ2hhbmdlT3B0aW9ucyxcclxuICAgICAgICAgICAgZWRpdDogVmFsdWVDaGFuZ2VPcHRpb25zXHJcbiAgICAgICAgfVxyXG4gICAgfSA9IHtcclxuICAgICAgICBkZXBlbmRlbmN5UHJvcGVydGllczoge1xyXG4gICAgICAgICAgICB2YWxpZDogeyBkaXN0aW5jdFVudGlsQ2hhbmdlZDogZmFsc2UsIGRlYm91bmNlTWlsbGlzZWNvbmRzOiAwIH0sXHJcbiAgICAgICAgICAgIGVkaXQ6IHsgZGlzdGluY3RVbnRpbENoYW5nZWQ6IGZhbHNlLCBkZWJvdW5jZU1pbGxpc2Vjb25kczogMCB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWxmOiB7XHJcbiAgICAgICAgICAgIGFzeW5jVmFsaWQ6IHsgZGlzdGluY3RVbnRpbENoYW5nZWQ6IGZhbHNlLCBkZWJvdW5jZU1pbGxpc2Vjb25kczogMCB9LFxyXG4gICAgICAgICAgICBlZGl0OiB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkOiBmYWxzZSwgZGVib3VuY2VNaWxsaXNlY29uZHM6IDAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm9wZXJ0eSBpcyBhbiBBcnJheUl0ZW1Qcm9wZXJ0eVxyXG4gICAgICogQHBhcmFtIHByb3BlcnR5IFByb3BlcnR5IHRvIGNoZWNrXHJcbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvcGVydHkgaXMgYW4gQXJyYXlJdGVtUHJvcGVydHlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzQXJyYXlJdGVtUHJvcGVydHk8VD4ocHJvcGVydHk6IFByb3BlcnR5QmFzZTxUPik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhKHByb3BlcnR5IGFzIFByb3BlcnR5PFQ+KS5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRE8gTk9UIENBTEwhIEludGVybmFsIHVzZSBvbmx5XHJcbiAgICAgKiBAcGFyYW0gYWJzb2x1dGVQYXRoIEFic29sdXRlIHBhdGggdG8gdGhlIHByb3BlcnR5IGZyb20gdGhlIHJvb3RcclxuICAgICAqL1xyXG4gICAgc2V0QWJzb2x1dGVQYXRoKGFic29sdXRlUGF0aDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYWJzb2x1dGVQYXRoID0gYWJzb2x1dGVQYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRE8gTk9UIENBTEwhIEludGVybmFsIHVzZSBvbmx5XHJcbiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uIFN1YnNjcmlwdGlvbiBmb3IgdGhlIGRlcGVuZGVuY3kgcHJvcGVydHlcclxuICAgICAqL1xyXG4gICAgYWRkRGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBETyBOT1QgQ0FMTCEgSW50ZXJuYWwgdXNlIG9ubHlcclxuICAgICAqL1xyXG4gICAgY2xlYXJEZXBlbmRlbmN5UHJvcGVydHlTdWJzY3JpcHRpb25zKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jeVByb3BlcnR5U3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiQgPT4gc3ViJC51bnN1YnNjcmliZSgpKTtcclxuICAgICAgICB0aGlzLl9kZXBlbmRlbmN5UHJvcGVydHlTdWJzY3JpcHRpb25zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBETyBOT1QgQ0FMTCEgSW50ZXJuYWwgdXNlIG9ubHlcclxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIG93bmVyIG1vZGVsIHNldHRpbmdzXHJcbiAgICAgKi9cclxuICAgIHNldE93bmVyTW9kZWxTZXR0aW5nc05hbWUobmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fb3duZXJNb2RlbFNldHRpbmdzTmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcbn0iXX0=