import { FormGroup, AbstractControl, ValidatorFn, FormBuilder, FormArray, AsyncValidatorFn } from '@angular/forms';
import { RulesEngineService } from "../rules-engine/rules-engine.service";
import { ArrayItemProperty } from "../../../form-rules/models/array-item-property";
import { TraceService } from "../../../utils/trace/trace.service";
import { CommonService } from "../../../utils/common/common.service";
import { AbstractModelSettings } from "../../../form-rules/models/abstract-model-settings";
import { AddArrayItemPropertyOptions } from "../../../form-rules/models/add-array-item-property-options";
/**
 * Builds reactive forms using configured model settings
 */
export declare class ReactiveFormsRuleService {
    private rulesEngineSvc;
    private formBuilder;
    private traceSvc;
    private commonSvc;
    private static readonly FORM_MODEL_SETTINGS_PROPERTY_NAME;
    private static readonly FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME;
    private static readonly CONTROL_LAST_ERROR;
    constructor(rulesEngineSvc: RulesEngineService, formBuilder: FormBuilder, traceSvc: TraceService, commonSvc: CommonService);
    /**
     * Gets model settings with the provided name
     * @param name Name of model setting
     * @returns Model settings with the provided name
     */
    getModelSettings<T>(name: string): AbstractModelSettings<T>;
    /**
     * Creates a form group using an instance of model settings
     * @param modelSettings Name of the model setting or an instance of model settings to use
     * @param initialValue Initial data to set the form values to
     * @returns Form group created according to defined model settings
     */
    createFormGroup<T>(modelSettings: string | AbstractModelSettings<T>, initialValue?: any): FormGroup;
    /**
     * Adds an array item property to an existing form array
     * @param property ArrayItemProperty to for the array item to be added
     * @param parentFormArray The parent FormArray
     * @param initialValue Initial value of the form array item
     * @param options Options for adding new array item property
     */
    addArrayItemPropertyControl<T>(property: ArrayItemProperty<T>, parentFormArray: FormArray, initialValue?: any, options?: AddArrayItemPropertyOptions): void;
    /**
     * Extends validators generated by ng-form-rules with your own validators
     * @param control Control to extends the validators for
     * @param validator Validator to add
     */
    extendValidator(control: AbstractControl, validator: ValidatorFn | ValidatorFn[]): void;
    /**
     * Extends async validators generated by ng-form-rules with your own async validators
     * @param control Control to extends the async validators for
     * @param asyncValidator Async validator to add
     */
    extendAsyncValidator(control: AbstractControl, asyncValidator: AsyncValidatorFn | AsyncValidatorFn[]): void;
    private buildAbstractControl<T>(property, initialValue?);
    private buildControl<T>(initialValue, updateOn?);
    private buildGroup<T>(properties, initialValue, updateOn?);
    private buildArray<T>(property, initialValue, updateOn?);
    private buildValidatorFunction<T>(property);
    private buildAsyncValidatorFunction<T>(property);
    private buildAsyncValidatorFunctionRaw<T>(property);
    private resetDependencySubscriptions<T>(parentControl, properties);
    private removeDependencySubscriptions<T>(properties);
    private addDependencySubscriptions<T>(parentControl, properties, arrayIndex?);
    private setupValidationDependencySubscriptions<T>(propertyControl, parentControl, property);
    private setupEditabilityDependencySubscriptions<T>(propertyControl, parentControl, property);
    private persistEditTests<T>(propertyControl, property);
    private applyAsyncValidValueChangeOptions(valueChangeOptions);
    private applyValueChangeOptions(valueChangeOptions);
    private getControlContextValues<T>(control, property);
    private getPropertyFromParent<T>(parentControl, property, arrayIndex?);
    private mapToReactiveFormsValidationErrors<T>(testResults);
    private findControlRelatively(control, path);
    private buildControlRelativePathArray(relativePath);
    private getControlByPathSegment(control, pathSegment);
    private buildTestResultStatsString<T>(testResults);
    private attachModelSettingsToForm<T>(formGroup, modelSettings);
    private getModelSettingsFromForm<T>(formGroup);
    private setForceAsyncValidationTestForControl(control, force);
    private setLastErrorForControl(control, errors);
    private getLastErrorForControl(control);
    private doesControlHaveForcedAsyncValidation(control);
    private triggerValueChange(control);
}
