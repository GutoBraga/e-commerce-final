{"version":3,"file":"reactive-forms-rule.service.d.ts","sources":["reactive-forms-rule.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { FormGroup, AbstractControl, ValidatorFn, FormBuilder, FormArray, AsyncValidatorFn } from '@angular/forms';\r\nimport { RulesEngineService } from \"../rules-engine/rules-engine.service\";\r\nimport { ArrayItemProperty } from \"../../../form-rules/models/array-item-property\";\r\nimport { TraceService } from \"../../../utils/trace/trace.service\";\r\nimport { CommonService } from \"../../../utils/common/common.service\";\r\nimport { AbstractModelSettings } from \"../../../form-rules/models/abstract-model-settings\";\r\nimport { AddArrayItemPropertyOptions } from \"../../../form-rules/models/add-array-item-property-options\";\r\n/**\r\n * Builds reactive forms using configured model settings\r\n */\r\nexport declare class ReactiveFormsRuleService {\r\n    private rulesEngineSvc;\r\n    private formBuilder;\r\n    private traceSvc;\r\n    private commonSvc;\r\n    private static readonly FORM_MODEL_SETTINGS_PROPERTY_NAME;\r\n    private static readonly FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME;\r\n    private static readonly CONTROL_LAST_ERROR;\r\n    constructor(rulesEngineSvc: RulesEngineService, formBuilder: FormBuilder, traceSvc: TraceService, commonSvc: CommonService);\r\n    /**\r\n     * Gets model settings with the provided name\r\n     * @param name Name of model setting\r\n     * @returns Model settings with the provided name\r\n     */\r\n    getModelSettings<T>(name: string): AbstractModelSettings<T>;\r\n    /**\r\n     * Creates a form group using an instance of model settings\r\n     * @param modelSettings Name of the model setting or an instance of model settings to use\r\n     * @param initialValue Initial data to set the form values to\r\n     * @returns Form group created according to defined model settings\r\n     */\r\n    createFormGroup<T>(modelSettings: string | AbstractModelSettings<T>, initialValue?: any): FormGroup;\r\n    /**\r\n     * Adds an array item property to an existing form array\r\n     * @param property ArrayItemProperty to for the array item to be added\r\n     * @param parentFormArray The parent FormArray\r\n     * @param initialValue Initial value of the form array item\r\n     * @param options Options for adding new array item property\r\n     */\r\n    addArrayItemPropertyControl<T>(property: ArrayItemProperty<T>, parentFormArray: FormArray, initialValue?: any, options?: AddArrayItemPropertyOptions): void;\r\n    /**\r\n     * Extends validators generated by ng-form-rules with your own validators\r\n     * @param control Control to extends the validators for\r\n     * @param validator Validator to add\r\n     */\r\n    extendValidator(control: AbstractControl, validator: ValidatorFn | ValidatorFn[]): void;\r\n    /**\r\n     * Extends async validators generated by ng-form-rules with your own async validators\r\n     * @param control Control to extends the async validators for\r\n     * @param asyncValidator Async validator to add\r\n     */\r\n    extendAsyncValidator(control: AbstractControl, asyncValidator: AsyncValidatorFn | AsyncValidatorFn[]): void;\r\n    private buildAbstractControl<T>(property, initialValue?);\r\n    private buildControl<T>(initialValue, updateOn?);\r\n    private buildGroup<T>(properties, initialValue, updateOn?);\r\n    private buildArray<T>(property, initialValue, updateOn?);\r\n    private buildValidatorFunction<T>(property);\r\n    private buildAsyncValidatorFunction<T>(property);\r\n    private buildAsyncValidatorFunctionRaw<T>(property);\r\n    private resetDependencySubscriptions<T>(parentControl, properties);\r\n    private removeDependencySubscriptions<T>(properties);\r\n    private addDependencySubscriptions<T>(parentControl, properties, arrayIndex?);\r\n    private setupValidationDependencySubscriptions<T>(propertyControl, parentControl, property);\r\n    private setupEditabilityDependencySubscriptions<T>(propertyControl, parentControl, property);\r\n    private persistEditTests<T>(propertyControl, property);\r\n    private applyAsyncValidValueChangeOptions(valueChangeOptions);\r\n    private applyValueChangeOptions(valueChangeOptions);\r\n    private getControlContextValues<T>(control, property);\r\n    private getPropertyFromParent<T>(parentControl, property, arrayIndex?);\r\n    private mapToReactiveFormsValidationErrors<T>(testResults);\r\n    private findControlRelatively(control, path);\r\n    private buildControlRelativePathArray(relativePath);\r\n    private getControlByPathSegment(control, pathSegment);\r\n    private buildTestResultStatsString<T>(testResults);\r\n    private attachModelSettingsToForm<T>(formGroup, modelSettings);\r\n    private getModelSettingsFromForm<T>(formGroup);\r\n    private setForceAsyncValidationTestForControl(control, force);\r\n    private setLastErrorForControl(control, errors);\r\n    private getLastErrorForControl(control);\r\n    private doesControlHaveForcedAsyncValidation(control);\r\n    private triggerValueChange(control);\r\n}\r\n"]}