{"version":3,"file":"rules-engine.service.d.ts","sources":["rules-engine.service.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractModelSettings } from '../../../form-rules/models/abstract-model-settings';\r\nimport { Property } from '../../../form-rules/models/property';\r\nimport { Test } from '../../../form-rules/models/test';\r\nimport { TestResult } from '../../../form-rules/models/test-result';\r\nimport { RuleSet } from '../../../form-rules/models/rule-set';\r\nimport { TestRunState } from '../../../form-rules/models/test-run-state';\r\nimport { TraceService } from '../../../utils/trace/trace.service';\r\nimport { CommonService } from '../../../utils/common/common.service';\r\nimport { Observable } from 'rxjs';\r\nimport { TestResultsBase } from '../../../form-rules/models/test-results-base';\r\nimport { PropertyTestResults } from '../../../form-rules/models/property-test-result';\r\nimport { PropertyBase } from '../../../form-rules/models/property-base';\r\nimport { ProcessResultType } from '../../../form-rules/models/proccess-result-type';\r\nimport { TestSyncGroups } from '../../../form-rules/models/test-sync-groups';\r\n/**\r\n * Engine that digests model settings and applies their rules appropriately\r\n */\r\nexport declare class RulesEngineService {\r\n    private traceSvc;\r\n    private commonSvc;\r\n    private registeredSettings;\r\n    constructor(settings: AbstractModelSettings<any>[], traceSvc: TraceService, commonSvc: CommonService);\r\n    /**\r\n     * Initializes model settings and prepares them to be used in a form group\r\n     * @param setting Model setting to initialize\r\n     */\r\n    initializeModelSetting(setting: AbstractModelSettings<any>): void;\r\n    /**\r\n     * Gets model settings with the provided name\r\n     * @param name Name of model setting\r\n     * @returns Model settings with the provided name\r\n     */\r\n    getModelSettings<T>(name: string): AbstractModelSettings<T>;\r\n    /**\r\n     * Gets the dependency properties for an array of tests\r\n     * @param tests Tests to get the dependency properties for\r\n     * @returns Dependency properties\r\n     */\r\n    getDependencyProperties<T>(tests: Test<T>[]): string[];\r\n    /**\r\n     * Gets tests grouped by their sync type (e.g. sync vs. async)\r\n     * @param tests Test to groups\r\n     * @returns Tests grouped by sync type\r\n     */\r\n    groupTestsBySyncType<T>(tests: Test<T>[]): TestSyncGroups<T>;\r\n    /**\r\n     * Runs validation tests\r\n     * @param data Data to run validation tests against\r\n     * @param property Property to run validation tests for\r\n     * @returns Results of validation tests\r\n     */\r\n    validate<T>(data: T, property: Property<T>, state?: TestRunState): Observable<PropertyTestResults<T>>;\r\n    /**\r\n     * Runs editability tests\r\n     * @param data Data to run editability tests against\r\n     * @param property Property to run editability tests for\r\n     * * @returns Results of editability tests\r\n     */\r\n    editable<T>(data: T, property: PropertyBase<T>, state?: TestRunState): Observable<PropertyTestResults<T>>;\r\n    /**\r\n     * Runs visibility tests\r\n     * @param data Data to run visibility tests against\r\n     * @param property Property to run visibility tests for\r\n     * * @returns Results of visibility tests\r\n     */\r\n    /**\r\n     * Runs an array of sync tests\r\n     * @param data Data to perform tests against\r\n     * @param tests Tests to run\r\n     * @returns Result of tests\r\n     */\r\n    runTests<T>(data: T, tests: Test<T>[], state?: TestRunState): TestResultsBase<T>;\r\n    /**\r\n     * Runs an array of async tests\r\n     * @param data Data to perform tests against\r\n     * @param tests Tests to run\r\n     * @returns Result of tests\r\n     */\r\n    runTestsAsync<T>(data: T, tests: Test<T>[], state?: TestRunState): Observable<TestResultsBase<T>>;\r\n    /**\r\n     * Runs an array of sync and async tests\r\n     * @param data Data to perform tests against\r\n     * @param tests Tests to run\r\n     * @returns Result of tests\r\n     */\r\n    runAllTests<T>(data: T, tests: Test<T>[], state?: TestRunState): Observable<TestResultsBase<T>>;\r\n    /**\r\n     * Performs sync test on a set of data\r\n     * @param data Data to perform test against\r\n     * @param test Test to run\r\n     * @returns Result of test\r\n     */\r\n    runTest<T>(data: T, test: Test<T>, state?: TestRunState): TestResult<T>;\r\n    /**\r\n     * Performs async test on a set of data\r\n     * @param data Data to perform test against\r\n     * @param test Test to run\r\n     * @returns Result of test\r\n     */\r\n    runTestAsync<T>(data: T, test: Test<T>, state?: TestRunState): Observable<TestResult<T>>;\r\n    /**\r\n     * Processes a sync rule set\r\n     * @param data Data to process rule set against\r\n     * @param ruleSet Rule set to process\r\n     * @returns Result of rule set processing\r\n     */\r\n    processRuleSet<T>(data: T, ruleSet: RuleSet<T>, state?: TestRunState): ProcessResultType;\r\n    /**\r\n     * Processes an async rule set\r\n     * @param data Data to process rule set against\r\n     * @param ruleSet Rule set to process\r\n     * @returns Result of rule set processing\r\n     */\r\n    processRuleSetAsync<T>(data: T, ruleSet: RuleSet<T>, state?: TestRunState): Observable<ProcessResultType>;\r\n    private processRuleGroup<T>(data, ruleGroup, state?);\r\n    private processRuleGroupAsync<T>(data, ruleGroup, state?);\r\n    private processRule<T>(data, rule, state?);\r\n    private processRuleAsync<T>(data, rule, state?);\r\n    private canShortCircuitRuleGroup<T>(ruleSetResult, ruleGroup);\r\n    private isRuleGroup<T>(ruleSet);\r\n    private getDependencyPropertiesFromTest<T>(test);\r\n    private getDependencyPropertiesFromRuleSet<T>(ruleSet);\r\n    private setPropertyMetadata(properties, modelSettingsName, currentAbsolutePath?);\r\n    private setPropertyAbsolutePath(property, currentAbsolutePath?);\r\n    private fillInEmptyTestNames(property);\r\n    private getConfiguredFuncTypes<T>(ruleSet);\r\n}\r\n"]}