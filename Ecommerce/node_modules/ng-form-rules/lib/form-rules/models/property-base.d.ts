import { Test } from "./test";
import { Property } from "./property";
import { ArrayItemProperty } from "./array-item-property";
import { Subscription } from "rxjs";
import { ValueChangeOptions } from "./value-change-options";
import { UpdateOn } from "./update-on";
/**
 * Base class for a property
 */
export declare abstract class PropertyBase<T> {
    private _absolutePath;
    private _dependencyPropertySubscriptions;
    private _ownerModelSettingsName;
    /**
     * Validation tests
     */
    valid: Test<T>[];
    /**
     * Editability tests
     */
    edit: Test<T>[];
    /**
     * Viewability tests
     */
    /**
     * Properties for a complex object
     */
    properties?: Property<any>[];
    /**
     * Property for an item of an array
     */
    arrayItemProperty?: ArrayItemProperty<any>;
    /**
     * The event name for control to update upon.
     */
    updateOn?: UpdateOn;
    /**
     * Absolute path to the property from root
     */
    readonly absolutePath: string;
    /**
     * Absolute path to property from root
     */
    readonly dependencyPropertySubscriptions: Subscription[];
    /**
     * Absolute path to property from root
     */
    readonly ownerModelSettingsName: string;
    /**
     * Options for how to respond to value changes on property control and dependency controls
     */
    valueChangeOptions: {
        dependencyProperties: {
            valid: ValueChangeOptions;
            edit: ValueChangeOptions;
        };
        self: {
            asyncValid: ValueChangeOptions;
            edit: ValueChangeOptions;
        };
    };
    /**
     * Determines if the property is an ArrayItemProperty
     * @param property Property to check
     * @returns Whether or not the property is an ArrayItemProperty
     */
    static isArrayItemProperty<T>(property: PropertyBase<T>): boolean;
    /**
     * DO NOT CALL! Internal use only
     * @param absolutePath Absolute path to the property from the root
     */
    setAbsolutePath(absolutePath: string): void;
    /**
     * DO NOT CALL! Internal use only
     * @param subscription Subscription for the dependency property
     */
    addDependencyPropertySubscription(subscription: Subscription): void;
    /**
     * DO NOT CALL! Internal use only
     */
    clearDependencyPropertySubscriptions(): void;
    /**
     * DO NOT CALL! Internal use only
     * @param name Name of the owner model settings
     */
    setOwnerModelSettingsName(name: string): void;
}
