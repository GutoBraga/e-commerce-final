(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-form-rules', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ng-form-rules'] = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.forms,global.ng.common));
}(this, (function (exports,core,rxjs,operators,forms,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Injection token for providing an array of model settings
     */
    var /** @type {?} */ MODEL_SETTINGS_TOKEN = new core.InjectionToken('ngfr.model-settings');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Injection token for enabling ng-form-rules tracing
     */
    var /** @type {?} */ TRACE_SETTINGS_TOKEN = new core.InjectionToken('ngfr.trace-settings');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TraceService = (function () {
        function TraceService(doTrace) {
            if (doTrace === void 0) {
                doTrace = false;
            }
            this.doTrace = doTrace;
        }
        /**
         * @param {?} msg
         * @return {?}
         */
        TraceService.prototype.trace = /**
         * @param {?} msg
         * @return {?}
         */
            function (msg) {
                if (!this.doTrace)
                    return;
                var /** @type {?} */ fullMsg = "[NGFR - " + this.getTimeStamp() + "] " + msg;
                console.log(fullMsg);
            };
        /**
         * @return {?}
         */
        TraceService.prototype.getTimeStamp = /**
         * @return {?}
         */
            function () {
                return (new Date).toLocaleTimeString();
            };
        TraceService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        TraceService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [TRACE_SETTINGS_TOKEN,] },] },
            ];
        };
        return TraceService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CommonService = (function () {
        function CommonService() {
        }
        /**
         * Gets unique values from an array
         * @param values Values to get unique items from
         * @returns Unique values array
         */
        /**
         * Gets unique values from an array
         * @param {?} values Values to get unique items from
         * @return {?} Unique values array
         */
        CommonService.prototype.unique = /**
         * Gets unique values from an array
         * @param {?} values Values to get unique items from
         * @return {?} Unique values array
         */
            function (values) {
                if (!Array.isArray(values))
                    return [];
                return Array.from(new Set(values));
            };
        /**
         * Determines if number is zero or greater
         * @param value If number is greater than or equal zero
         */
        /**
         * Determines if number is zero or greater
         * @param {?} value If number is greater than or equal zero
         * @return {?}
         */
        CommonService.prototype.isZeroOrGreater = /**
         * Determines if number is zero or greater
         * @param {?} value If number is greater than or equal zero
         * @return {?}
         */
            function (value) {
                if (!value && value === 0)
                    return true;
                if (!value || typeof value !== "number")
                    return false;
                return value > 0;
            };
        CommonService.decorators = [
            { type: core.Injectable },
        ];
        return CommonService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Results of executing a collection of tests
     * @template T
     */
    var /**
     * Results of executing a collection of tests
     * @template T
     */ TestResultsBase = (function () {
        function TestResultsBase(results) {
            this.results = results;
            this.results = this.results || [];
        }
        Object.defineProperty(TestResultsBase.prototype, "passed", {
            /**
             * Whether the tests passed
             */
            get: /**
             * Whether the tests passed
             * @return {?}
             */ function () {
                return !this.failedResults.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TestResultsBase.prototype, "passedResults", {
            /**
             * Array of test results that passed
             */
            get: /**
             * Array of test results that passed
             * @return {?}
             */ function () {
                return this.results.filter(function (x) { return !!x.passed && !x.skipped; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TestResultsBase.prototype, "failedResults", {
            /**
             * Array of test results that failed
             */
            get: /**
             * Array of test results that failed
             * @return {?}
             */ function () {
                return this.results.filter(function (x) { return !x.passed; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TestResultsBase.prototype, "skippedResults", {
            /**
             * Array of test results that were skipped
             */
            get: /**
             * Array of test results that were skipped
             * @return {?}
             */ function () {
                return this.results.filter(function (x) { return !!x.skipped; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TestResultsBase.prototype, "message", {
            /**
             * Message of the first test that failed
             */
            get: /**
             * Message of the first test that failed
             * @return {?}
             */ function () {
                return this.messages[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TestResultsBase.prototype, "messages", {
            /**
             * Messages of all failed tests
             */
            get: /**
             * Messages of all failed tests
             * @return {?}
             */ function () {
                var /** @type {?} */ messages = this.failedResults.map(function (x) { return x.message; });
                return Array.from(new Set(messages));
            },
            enumerable: true,
            configurable: true
        });
        return TestResultsBase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Base class for a property
     * @abstract
     * @template T
     */
    var /**
     * Base class for a property
     * @abstract
     * @template T
     */ PropertyBase = (function () {
        function PropertyBase() {
            this._dependencyPropertySubscriptions = [];
            /**
             * Validation tests
             */
            this.valid = [];
            /**
             * Editability tests
             */
            this.edit = [];
            /**
             * The event name for control to update upon.
             */
            this.updateOn = 'change';
            /**
             * Options for how to respond to value changes on property control and dependency controls
             */
            this.valueChangeOptions = {
                dependencyProperties: {
                    valid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                    edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
                },
                self: {
                    asyncValid: { distinctUntilChanged: false, debounceMilliseconds: 0 },
                    edit: { distinctUntilChanged: false, debounceMilliseconds: 0 }
                }
            };
        }
        Object.defineProperty(PropertyBase.prototype, "absolutePath", {
            /**
             * Absolute path to the property from root
             */
            get: /**
             * Absolute path to the property from root
             * @return {?}
             */ function () {
                return this._absolutePath;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PropertyBase.prototype, "dependencyPropertySubscriptions", {
            /**
             * Absolute path to property from root
             */
            get: /**
             * Absolute path to property from root
             * @return {?}
             */ function () {
                return this._dependencyPropertySubscriptions;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PropertyBase.prototype, "ownerModelSettingsName", {
            /**
             * Absolute path to property from root
             */
            get: /**
             * Absolute path to property from root
             * @return {?}
             */ function () {
                return this._ownerModelSettingsName;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Determines if the property is an ArrayItemProperty
         * @param property Property to check
         * @returns Whether or not the property is an ArrayItemProperty
         */
        /**
         * Determines if the property is an ArrayItemProperty
         * @template T
         * @param {?} property Property to check
         * @return {?} Whether or not the property is an ArrayItemProperty
         */
        PropertyBase.isArrayItemProperty = /**
         * Determines if the property is an ArrayItemProperty
         * @template T
         * @param {?} property Property to check
         * @return {?} Whether or not the property is an ArrayItemProperty
         */
            function (property) {
                return !((property)).name;
            };
        /**
         * DO NOT CALL! Internal use only
         * @param absolutePath Absolute path to the property from the root
         */
        /**
         * DO NOT CALL! Internal use only
         * @param {?} absolutePath Absolute path to the property from the root
         * @return {?}
         */
        PropertyBase.prototype.setAbsolutePath = /**
         * DO NOT CALL! Internal use only
         * @param {?} absolutePath Absolute path to the property from the root
         * @return {?}
         */
            function (absolutePath) {
                this._absolutePath = absolutePath;
            };
        /**
         * DO NOT CALL! Internal use only
         * @param subscription Subscription for the dependency property
         */
        /**
         * DO NOT CALL! Internal use only
         * @param {?} subscription Subscription for the dependency property
         * @return {?}
         */
        PropertyBase.prototype.addDependencyPropertySubscription = /**
         * DO NOT CALL! Internal use only
         * @param {?} subscription Subscription for the dependency property
         * @return {?}
         */
            function (subscription) {
                this._dependencyPropertySubscriptions.push(subscription);
            };
        /**
         * DO NOT CALL! Internal use only
         */
        /**
         * DO NOT CALL! Internal use only
         * @return {?}
         */
        PropertyBase.prototype.clearDependencyPropertySubscriptions = /**
         * DO NOT CALL! Internal use only
         * @return {?}
         */
            function () {
                this.dependencyPropertySubscriptions.forEach(function (sub$) { return sub$.unsubscribe(); });
                this._dependencyPropertySubscriptions = [];
            };
        /**
         * DO NOT CALL! Internal use only
         * @param name Name of the owner model settings
         */
        /**
         * DO NOT CALL! Internal use only
         * @param {?} name Name of the owner model settings
         * @return {?}
         */
        PropertyBase.prototype.setOwnerModelSettingsName = /**
         * DO NOT CALL! Internal use only
         * @param {?} name Name of the owner model settings
         * @return {?}
         */
            function (name) {
                this._ownerModelSettingsName = name;
            };
        return PropertyBase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var ProcessResultType = {
        Passed: 0,
        Failed: 1,
        Skipped: 2,
    };
    ProcessResultType[ProcessResultType.Passed] = "Passed";
    ProcessResultType[ProcessResultType.Failed] = "Failed";
    ProcessResultType[ProcessResultType.Skipped] = "Skipped";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var ResultsPassRequirement = {
        /**
             * All results must pass
             */
        AllPass: 0,
        /**
             * Any results have passed
             */
        AnyPass: 1,
    };
    ResultsPassRequirement[ResultsPassRequirement.AllPass] = "AllPass";
    ResultsPassRequirement[ResultsPassRequirement.AnyPass] = "AnyPass";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Engine that digests model settings and applies their rules appropriately
     */
    var RulesEngineService = (function () {
        function RulesEngineService(settings, traceSvc, commonSvc) {
            var _this = this;
            this.traceSvc = traceSvc;
            this.commonSvc = commonSvc;
            this.registeredSettings = {};
            if (!Array.isArray(settings))
                return;
            settings.forEach(function (setting) {
                _this.initializeModelSetting(setting);
                _this.registeredSettings[setting.name] = setting;
            });
        }
        /**
         * Initializes model settings and prepares them to be used in a form group
         * @param setting Model setting to initialize
         */
        /**
         * Initializes model settings and prepares them to be used in a form group
         * @param {?} setting Model setting to initialize
         * @return {?}
         */
        RulesEngineService.prototype.initializeModelSetting = /**
         * Initializes model settings and prepares them to be used in a form group
         * @param {?} setting Model setting to initialize
         * @return {?}
         */
            function (setting) {
                this.traceSvc.trace("Initializing model settings \"" + setting.name + "\"");
                this.setPropertyMetadata(setting.properties, setting.name);
            };
        /**
         * Gets model settings with the provided name
         * @param name Name of model setting
         * @returns Model settings with the provided name
         */
        /**
         * Gets model settings with the provided name
         * @template T
         * @param {?} name Name of model setting
         * @return {?} Model settings with the provided name
         */
        RulesEngineService.prototype.getModelSettings = /**
         * Gets model settings with the provided name
         * @template T
         * @param {?} name Name of model setting
         * @return {?} Model settings with the provided name
         */
            function (name) {
                this.traceSvc.trace("Retrieving model settings \"" + name + "\"");
                var /** @type {?} */ settings = this.registeredSettings[name];
                // create new object
                return settings
                    ? Object.assign({}, this.registeredSettings[name])
                    : null;
            };
        /**
         * Gets the dependency properties for an array of tests
         * @param tests Tests to get the dependency properties for
         * @returns Dependency properties
         */
        /**
         * Gets the dependency properties for an array of tests
         * @template T
         * @param {?} tests Tests to get the dependency properties for
         * @return {?} Dependency properties
         */
        RulesEngineService.prototype.getDependencyProperties = /**
         * Gets the dependency properties for an array of tests
         * @template T
         * @param {?} tests Tests to get the dependency properties for
         * @return {?} Dependency properties
         */
            function (tests) {
                var _this = this;
                if (!tests)
                    return [];
                var /** @type {?} */ deps = tests
                    .map(function (t) { return _this.getDependencyPropertiesFromTest(t); })
                    .reduce(function (prev, current) { return prev.concat(current); }, []);
                return this.commonSvc.unique(deps);
            };
        /**
         * Gets tests grouped by their sync type (e.g. sync vs. async)
         * @param tests Test to groups
         * @returns Tests grouped by sync type
         */
        /**
         * Gets tests grouped by their sync type (e.g. sync vs. async)
         * @template T
         * @param {?} tests Test to groups
         * @return {?} Tests grouped by sync type
         */
        RulesEngineService.prototype.groupTestsBySyncType = /**
         * Gets tests grouped by their sync type (e.g. sync vs. async)
         * @template T
         * @param {?} tests Test to groups
         * @return {?} Tests grouped by sync type
         */
            function (tests) {
                var _this = this;
                var /** @type {?} */ testGroups = ({
                    sync: [],
                    async: []
                });
                if (!tests)
                    return testGroups;
                tests.forEach(function (test) {
                    var /** @type {?} */ testFuncTypes = ({
                        sync: false,
                        async: false
                    });
                    var /** @type {?} */ conditionResults = _this.getConfiguredFuncTypes(test.condition);
                    var /** @type {?} */ checkResults = _this.getConfiguredFuncTypes(test.check);
                    testFuncTypes.sync = conditionResults.sync || checkResults.sync;
                    testFuncTypes.async = conditionResults.async || checkResults.async;
                    // if there is an async func anywhere in the test's rule sets, then it is considered an async test
                    if (testFuncTypes.sync && !testFuncTypes.async)
                        testGroups.sync.push(test);
                    if (testFuncTypes.async)
                        testGroups.async.push(test);
                });
                return testGroups;
            };
        /**
         * Runs validation tests
         * @param data Data to run validation tests against
         * @param property Property to run validation tests for
         * @returns Results of validation tests
         */
        /**
         * Runs validation tests
         * @template T
         * @param {?} data Data to run validation tests against
         * @param {?} property Property to run validation tests for
         * @param {?=} state
         * @return {?} Results of validation tests
         */
        RulesEngineService.prototype.validate = /**
         * Runs validation tests
         * @template T
         * @param {?} data Data to run validation tests against
         * @param {?} property Property to run validation tests for
         * @param {?=} state
         * @return {?} Results of validation tests
         */
            function (data, property, state) {
                return this.runAllTests(data, property.valid, state)
                    .pipe(operators.map(function (results) {
                    results.propertyName = property.absolutePath;
                    return /** @type {?} */ (results);
                }));
            };
        /**
         * Runs editability tests
         * @param data Data to run editability tests against
         * @param property Property to run editability tests for
         * * @returns Results of editability tests
         */
        /**
         * Runs editability tests
         * @template T
         * @param {?} data Data to run editability tests against
         * @param {?} property Property to run editability tests for
         * * \@returns Results of editability tests
         * @param {?=} state
         * @return {?}
         */
        RulesEngineService.prototype.editable = /**
         * Runs editability tests
         * @template T
         * @param {?} data Data to run editability tests against
         * @param {?} property Property to run editability tests for
         * * \@returns Results of editability tests
         * @param {?=} state
         * @return {?}
         */
            function (data, property, state) {
                return this.runAllTests(data, property.edit, state)
                    .pipe(operators.map(function (results) {
                    results.propertyName = property.absolutePath;
                    return /** @type {?} */ (results);
                }));
            };
        /**
         * Runs visibility tests
         * @param data Data to run visibility tests against
         * @param property Property to run visibility tests for
         * * @returns Results of visibility tests
         */
        // visible<T>(data: T, property: Property<T>, state?: TestRunState): Observable<PropertyTestResults<T>> {
        //     return this.runAllTests(data, property.view, state)
        //         .pipe(
        //             map((results: PropertyTestResults<T>) => {
        //                 results.propertyName = property.absolutePath;
        //                 return results as PropertyTestResults<T>;
        //             })
        //         );
        // }
        /**
         * Runs an array of sync tests
         * @param data Data to perform tests against
         * @param tests Tests to run
         * @returns Result of tests
         */
        /**
         * Runs an array of sync tests
         * @template T
         * @param {?} data Data to perform tests against
         * @param {?} tests Tests to run
         * @param {?=} state
         * @return {?} Result of tests
         */
        RulesEngineService.prototype.runTests = /**
         * Runs an array of sync tests
         * @template T
         * @param {?} data Data to perform tests against
         * @param {?} tests Tests to run
         * @param {?=} state
         * @return {?} Result of tests
         */
            function (data, tests, state) {
                var _this = this;
                if (!tests || !tests.length)
                    return new TestResultsBase([]);
                var /** @type {?} */ testResults = tests
                    .map(function (t) { return _this.runTest(data, t, state); })
                    .filter(function (x) { return !!x; });
                return new TestResultsBase(testResults);
            };
        /**
         * Runs an array of async tests
         * @param data Data to perform tests against
         * @param tests Tests to run
         * @returns Result of tests
         */
        /**
         * Runs an array of async tests
         * @template T
         * @param {?} data Data to perform tests against
         * @param {?} tests Tests to run
         * @param {?=} state
         * @return {?} Result of tests
         */
        RulesEngineService.prototype.runTestsAsync = /**
         * Runs an array of async tests
         * @template T
         * @param {?} data Data to perform tests against
         * @param {?} tests Tests to run
         * @param {?=} state
         * @return {?} Result of tests
         */
            function (data, tests, state) {
                var _this = this;
                if (!tests || !tests.length)
                    return rxjs.of(new TestResultsBase([]));
                var /** @type {?} */ runTest$ = tests
                    .map(function (test) { return _this.runTestAsync(data, test, state); });
                return rxjs.forkJoin(runTest$)
                    .pipe(operators.map(function (testResults) { return new TestResultsBase(testResults.filter(function (x) { return !!x; })); }));
            };
        /**
         * Runs an array of sync and async tests
         * @param data Data to perform tests against
         * @param tests Tests to run
         * @returns Result of tests
         */
        /**
         * Runs an array of sync and async tests
         * @template T
         * @param {?} data Data to perform tests against
         * @param {?} tests Tests to run
         * @param {?=} state
         * @return {?} Result of tests
         */
        RulesEngineService.prototype.runAllTests = /**
         * Runs an array of sync and async tests
         * @template T
         * @param {?} data Data to perform tests against
         * @param {?} tests Tests to run
         * @param {?=} state
         * @return {?} Result of tests
         */
            function (data, tests, state) {
                var _this = this;
                if (!tests || !tests.length)
                    return rxjs.of(new TestResultsBase([]));
                var /** @type {?} */ syncGroups = this.groupTestsBySyncType(tests);
                var /** @type {?} */ syncTestResults = rxjs.of(this.runTests(data, syncGroups.sync, state));
                return syncTestResults.pipe(operators.mergeMap(function (result) {
                    if (!result.passed)
                        return rxjs.of(result);
                    return _this.runTestsAsync(data, syncGroups.async, state);
                }), operators.take(1));
            };
        /**
         * Performs sync test on a set of data
         * @param data Data to perform test against
         * @param test Test to run
         * @returns Result of test
         */
        /**
         * Performs sync test on a set of data
         * @template T
         * @param {?} data Data to perform test against
         * @param {?} test Test to run
         * @param {?=} state
         * @return {?} Result of test
         */
        RulesEngineService.prototype.runTest = /**
         * Performs sync test on a set of data
         * @template T
         * @param {?} data Data to perform test against
         * @param {?} test Test to run
         * @param {?=} state
         * @return {?} Result of test
         */
            function (data, test, state) {
                if (!test)
                    return null;
                var /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
                var /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
                var /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
                var /** @type {?} */ conditionsRuleSetResult = this.processRuleSet(data, test.condition, state);
                if (conditionsRuleSetResult === ProcessResultType.Failed)
                    return skippedTestResult;
                var /** @type {?} */ checkRuleSetResult = this.processRuleSet(data, test.check, state);
                switch (checkRuleSetResult) {
                    case ProcessResultType.Passed:
                        return passedTestResult;
                    case ProcessResultType.Failed:
                        return failedTestResult;
                    case ProcessResultType.Skipped:
                    default:
                        return skippedTestResult;
                }
            };
        /**
         * Performs async test on a set of data
         * @param data Data to perform test against
         * @param test Test to run
         * @returns Result of test
         */
        /**
         * Performs async test on a set of data
         * @template T
         * @param {?} data Data to perform test against
         * @param {?} test Test to run
         * @param {?=} state
         * @return {?} Result of test
         */
        RulesEngineService.prototype.runTestAsync = /**
         * Performs async test on a set of data
         * @template T
         * @param {?} data Data to perform test against
         * @param {?} test Test to run
         * @param {?=} state
         * @return {?} Result of test
         */
            function (data, test, state) {
                if (!test)
                    return rxjs.of(null);
                var /** @type {?} */ passedTestResult = { passed: true, name: test.name, message: null };
                var /** @type {?} */ failedTestResult = { passed: false, name: test.name, message: test.message };
                var /** @type {?} */ skippedTestResult = { passed: true, skipped: true, name: test.name, message: null };
                var /** @type {?} */ conditionsRuleSetResult$ = this.processRuleSetAsync(data, test.condition, state);
                var /** @type {?} */ checkRuleSetResult$ = this.processRuleSetAsync(data, test.check, state);
                return conditionsRuleSetResult$
                    .pipe(operators.flatMap(function (conditionsRuleSetResult) {
                    if (conditionsRuleSetResult === ProcessResultType.Failed)
                        return rxjs.of(skippedTestResult);
                    return checkRuleSetResult$
                        .pipe(operators.map(function (checkRuleSetResult) {
                        switch (checkRuleSetResult) {
                            case ProcessResultType.Passed:
                                return passedTestResult;
                            case ProcessResultType.Failed:
                                return failedTestResult;
                            case ProcessResultType.Skipped:
                            default:
                                return skippedTestResult;
                        }
                    }));
                }));
            };
        /**
         * Processes a sync rule set
         * @param data Data to process rule set against
         * @param ruleSet Rule set to process
         * @returns Result of rule set processing
         */
        /**
         * Processes a sync rule set
         * @template T
         * @param {?} data Data to process rule set against
         * @param {?} ruleSet Rule set to process
         * @param {?=} state
         * @return {?} Result of rule set processing
         */
        RulesEngineService.prototype.processRuleSet = /**
         * Processes a sync rule set
         * @template T
         * @param {?} data Data to process rule set against
         * @param {?} ruleSet Rule set to process
         * @param {?=} state
         * @return {?} Result of rule set processing
         */
            function (data, ruleSet, state) {
                if (!ruleSet)
                    return ProcessResultType.Skipped;
                var /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
                return isRuleGroup
                    ? this.processRuleGroup(data, /** @type {?} */ (ruleSet), state)
                    : this.processRule(data, /** @type {?} */ (ruleSet), state);
            };
        /**
         * Processes an async rule set
         * @param data Data to process rule set against
         * @param ruleSet Rule set to process
         * @returns Result of rule set processing
         */
        /**
         * Processes an async rule set
         * @template T
         * @param {?} data Data to process rule set against
         * @param {?} ruleSet Rule set to process
         * @param {?=} state
         * @return {?} Result of rule set processing
         */
        RulesEngineService.prototype.processRuleSetAsync = /**
         * Processes an async rule set
         * @template T
         * @param {?} data Data to process rule set against
         * @param {?} ruleSet Rule set to process
         * @param {?=} state
         * @return {?} Result of rule set processing
         */
            function (data, ruleSet, state) {
                if (!ruleSet)
                    return rxjs.of(ProcessResultType.Skipped);
                var /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
                return isRuleGroup
                    ? this.processRuleGroupAsync(data, /** @type {?} */ (ruleSet), state)
                    : this.processRuleAsync(data, /** @type {?} */ (ruleSet), state);
            };
        /**
         * @template T
         * @param {?} data
         * @param {?} ruleGroup
         * @param {?=} state
         * @return {?}
         */
        RulesEngineService.prototype.processRuleGroup = /**
         * @template T
         * @param {?} data
         * @param {?} ruleGroup
         * @param {?=} state
         * @return {?}
         */
            function (data, ruleGroup, state) {
                if (!ruleGroup.rules)
                    return ProcessResultType.Skipped;
                var /** @type {?} */ passedCount = 0;
                var /** @type {?} */ skippedCount = 0;
                for (var /** @type {?} */ i = 0; i < ruleGroup.rules.length; i++) {
                    var /** @type {?} */ rule = ruleGroup.rules[i];
                    var /** @type {?} */ ruleSetResult = this.processRuleSet(data, rule, state);
                    if (this.canShortCircuitRuleGroup(ruleSetResult, ruleGroup))
                        return ruleSetResult;
                    if (ruleSetResult == ProcessResultType.Passed)
                        passedCount++;
                    else if (ruleSetResult == ProcessResultType.Skipped)
                        skippedCount++;
                }
                // if we skipped them all, then return skipped
                if (skippedCount === ruleGroup.rules.length)
                    return ProcessResultType.Skipped;
                // if we got this far, make sure all tests were passed
                return passedCount === ruleGroup.rules.length ? ProcessResultType.Passed : ProcessResultType.Failed;
            };
        /**
         * @template T
         * @param {?} data
         * @param {?} ruleGroup
         * @param {?=} state
         * @return {?}
         */
        RulesEngineService.prototype.processRuleGroupAsync = /**
         * @template T
         * @param {?} data
         * @param {?} ruleGroup
         * @param {?=} state
         * @return {?}
         */
            function (data, ruleGroup, state) {
                var _this = this;
                if (!ruleGroup.rules)
                    return rxjs.of(ProcessResultType.Skipped);
                var /** @type {?} */ asyncRuleSetResults$ = ruleGroup.rules.map(function (x) { return _this.processRuleSetAsync(data, x, state); });
                return rxjs.forkJoin(asyncRuleSetResults$).pipe(operators.map(function (ruleSetResults) {
                    var /** @type {?} */ counts = {
                        passed: ruleSetResults.filter(function (x) { return x === ProcessResultType.Passed; }).length,
                        failed: ruleSetResults.filter(function (x) { return x === ProcessResultType.Failed; }).length,
                        skipped: ruleSetResults.filter(function (x) { return x === ProcessResultType.Skipped; }).length,
                    };
                    var /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
                    if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass && counts.passed > 0)
                        return ProcessResultType.Passed;
                    if (ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass && counts.passed === ruleSetResults.length)
                        return ProcessResultType.Passed;
                    if (counts.skipped === ruleSetResults.length)
                        return ProcessResultType.Skipped;
                    return ProcessResultType.Failed;
                }));
            };
        /**
         * @template T
         * @param {?} data
         * @param {?} rule
         * @param {?=} state
         * @return {?}
         */
        RulesEngineService.prototype.processRule = /**
         * @template T
         * @param {?} data
         * @param {?} rule
         * @param {?=} state
         * @return {?}
         */
            function (data, rule, state) {
                if (!rule.func)
                    return ProcessResultType.Skipped;
                var /** @type {?} */ rootData = state ? state.rootData : null;
                return rule.func(data, rootData) ? ProcessResultType.Passed : ProcessResultType.Failed;
            };
        /**
         * @template T
         * @param {?} data
         * @param {?} rule
         * @param {?=} state
         * @return {?}
         */
        RulesEngineService.prototype.processRuleAsync = /**
         * @template T
         * @param {?} data
         * @param {?} rule
         * @param {?=} state
         * @return {?}
         */
            function (data, rule, state) {
                if (!rule.func && !rule.asyncFunc)
                    return rxjs.of(ProcessResultType.Skipped);
                var /** @type {?} */ rootData = state ? state.rootData : null;
                var /** @type {?} */ funcResult = rule.func
                    ? rxjs.of(rule.func(data, rootData))
                    : rule.asyncFunc(data, rootData);
                return funcResult
                    .pipe(operators.map(function (passed) { return passed ? ProcessResultType.Passed : ProcessResultType.Failed; }));
            };
        /**
         * @template T
         * @param {?} ruleSetResult
         * @param {?} ruleGroup
         * @return {?}
         */
        RulesEngineService.prototype.canShortCircuitRuleGroup = /**
         * @template T
         * @param {?} ruleSetResult
         * @param {?} ruleGroup
         * @return {?}
         */
            function (ruleSetResult, ruleGroup) {
                var /** @type {?} */ ruleGroupOptions = ruleGroup.options || { resultRequirements: ResultsPassRequirement.AllPass };
                return (
                // it passed, and we only need one to pass
                (ruleSetResult == ProcessResultType.Passed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AnyPass)
                    ||
                        // if failed, and we need all to pass
                        (ruleSetResult == ProcessResultType.Failed && ruleGroupOptions.resultRequirements == ResultsPassRequirement.AllPass));
            };
        /**
         * @template T
         * @param {?} ruleSet
         * @return {?}
         */
        RulesEngineService.prototype.isRuleGroup = /**
         * @template T
         * @param {?} ruleSet
         * @return {?}
         */
            function (ruleSet) {
                var /** @type {?} */ rule = (ruleSet);
                return !rule.func && !rule.asyncFunc;
            };
        /**
         * @template T
         * @param {?} test
         * @return {?}
         */
        RulesEngineService.prototype.getDependencyPropertiesFromTest = /**
         * @template T
         * @param {?} test
         * @return {?}
         */
            function (test) {
                var /** @type {?} */ checkDeps = this.getDependencyPropertiesFromRuleSet(test.check);
                var /** @type {?} */ conditionDeps = this.getDependencyPropertiesFromRuleSet(test.condition);
                return this.commonSvc.unique(checkDeps.concat(conditionDeps));
            };
        /**
         * @template T
         * @param {?} ruleSet
         * @return {?}
         */
        RulesEngineService.prototype.getDependencyPropertiesFromRuleSet = /**
         * @template T
         * @param {?} ruleSet
         * @return {?}
         */
            function (ruleSet) {
                var _this = this;
                if (!ruleSet)
                    return [];
                var /** @type {?} */ result = [];
                if (this.isRuleGroup(ruleSet)) {
                    var /** @type {?} */ ruleGroup = (ruleSet);
                    ruleGroup.rules.forEach(function (x) {
                        result.push.apply(result, __spread(_this.commonSvc.unique(_this.getDependencyPropertiesFromRuleSet(x))));
                    });
                }
                var /** @type {?} */ rule = (ruleSet);
                if (rule.options && Array.isArray(rule.options.dependencyProperties)) {
                    result.push.apply(result, __spread(this.commonSvc.unique(rule.options.dependencyProperties)));
                }
                return this.commonSvc.unique(result);
            };
        /**
         * @param {?} properties
         * @param {?} modelSettingsName
         * @param {?=} currentAbsolutePath
         * @return {?}
         */
        RulesEngineService.prototype.setPropertyMetadata = /**
         * @param {?} properties
         * @param {?} modelSettingsName
         * @param {?=} currentAbsolutePath
         * @return {?}
         */
            function (properties, modelSettingsName, currentAbsolutePath) {
                var _this = this;
                if (currentAbsolutePath === void 0) {
                    currentAbsolutePath = '';
                }
                if (!properties)
                    return;
                properties.forEach(function (prop) {
                    var /** @type {?} */ newAbsolutePath = _this.setPropertyAbsolutePath(prop, currentAbsolutePath);
                    _this.fillInEmptyTestNames(prop);
                    prop.setOwnerModelSettingsName(modelSettingsName);
                    if (prop.properties) {
                        _this.setPropertyMetadata(prop.properties, modelSettingsName, newAbsolutePath);
                    }
                    else if (prop.arrayItemProperty) {
                        _this.setPropertyMetadata([prop.arrayItemProperty], modelSettingsName, newAbsolutePath);
                    }
                });
            };
        /**
         * @param {?} property
         * @param {?=} currentAbsolutePath
         * @return {?}
         */
        RulesEngineService.prototype.setPropertyAbsolutePath = /**
         * @param {?} property
         * @param {?=} currentAbsolutePath
         * @return {?}
         */
            function (property, currentAbsolutePath) {
                if (currentAbsolutePath === void 0) {
                    currentAbsolutePath = '';
                }
                var /** @type {?} */ isArrayItemProperty = PropertyBase.isArrayItemProperty(property);
                var /** @type {?} */ newAbsolutePathSegment = isArrayItemProperty ? '[]' : ((property)).name;
                var /** @type {?} */ isAtRoot = !currentAbsolutePath;
                var /** @type {?} */ newAbsolutePath = "" + currentAbsolutePath + (isAtRoot ? '' : '.') + newAbsolutePathSegment;
                // set absolute path for property
                property.setAbsolutePath(newAbsolutePath);
                return newAbsolutePath;
            };
        /**
         * @param {?} property
         * @return {?}
         */
        RulesEngineService.prototype.fillInEmptyTestNames = /**
         * @param {?} property
         * @return {?}
         */
            function (property) {
                property.valid
                    .filter(function (test) { return !test.name; })
                    .forEach(function (test, i) { return test.name = "validTest" + i; });
                property.edit
                    .filter(function (test) { return !test.name; })
                    .forEach(function (test, i) { return test.name = "editTest" + i; });
            };
        /**
         * @template T
         * @param {?} ruleSet
         * @return {?}
         */
        RulesEngineService.prototype.getConfiguredFuncTypes = /**
         * @template T
         * @param {?} ruleSet
         * @return {?}
         */
            function (ruleSet) {
                var _this = this;
                if (!ruleSet)
                    return { sync: false, async: false };
                var /** @type {?} */ isRuleGroup = this.isRuleGroup(ruleSet);
                if (isRuleGroup) {
                    var /** @type {?} */ ruleGroup = (ruleSet);
                    var /** @type {?} */ results = ruleGroup.rules
                        .map(function (rs) {
                        return _this.getConfiguredFuncTypes(rs);
                    });
                    return {
                        sync: results.findIndex(function (x) { return !!x.sync; }) >= 0,
                        async: results.findIndex(function (x) { return !!x.async; }) >= 0,
                    };
                }
                else {
                    var /** @type {?} */ rule = (ruleSet);
                    return {
                        sync: !!rule.func,
                        async: !!rule.asyncFunc
                    };
                }
            };
        RulesEngineService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        RulesEngineService.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MODEL_SETTINGS_TOKEN,] },] },
                { type: TraceService, },
                { type: CommonService, },
            ];
        };
        return RulesEngineService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * State of an Angular AbstractControl at the time of running a test
     */
    var /**
     * State of an Angular AbstractControl at the time of running a test
     */ ControlState = (function () {
        function ControlState(control) {
            this._pristine = control.pristine;
            this._untouched = control.untouched;
        }
        /**
         * Creates a ControlState object based on an Angular control
         * @param control Angular control to generate state from
         * @returns Control state base on Angular control
         */
        /**
         * Creates a ControlState object based on an Angular control
         * @param {?} control Angular control to generate state from
         * @return {?} Control state base on Angular control
         */
        ControlState.create = /**
         * Creates a ControlState object based on an Angular control
         * @param {?} control Angular control to generate state from
         * @return {?} Control state base on Angular control
         */
            function (control) {
                return new ControlState(control);
            };
        return ControlState;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Builds reactive forms using configured model settings
     */
    var ReactiveFormsRuleService = (function () {
        function ReactiveFormsRuleService(rulesEngineSvc, formBuilder, traceSvc, commonSvc) {
            this.rulesEngineSvc = rulesEngineSvc;
            this.formBuilder = formBuilder;
            this.traceSvc = traceSvc;
            this.commonSvc = commonSvc;
        }
        /**
         * Gets model settings with the provided name
         * @param name Name of model setting
         * @returns Model settings with the provided name
         */
        /**
         * Gets model settings with the provided name
         * @template T
         * @param {?} name Name of model setting
         * @return {?} Model settings with the provided name
         */
        ReactiveFormsRuleService.prototype.getModelSettings = /**
         * Gets model settings with the provided name
         * @template T
         * @param {?} name Name of model setting
         * @return {?} Model settings with the provided name
         */
            function (name) {
                return this.rulesEngineSvc.getModelSettings(name);
            };
        /**
         * Creates a form group using an instance of model settings
         * @param modelSettings Name of the model setting or an instance of model settings to use
         * @param initialValue Initial data to set the form values to
         * @returns Form group created according to defined model settings
         */
        /**
         * Creates a form group using an instance of model settings
         * @template T
         * @param {?} modelSettings Name of the model setting or an instance of model settings to use
         * @param {?=} initialValue Initial data to set the form values to
         * @return {?} Form group created according to defined model settings
         */
        ReactiveFormsRuleService.prototype.createFormGroup = /**
         * Creates a form group using an instance of model settings
         * @template T
         * @param {?} modelSettings Name of the model setting or an instance of model settings to use
         * @param {?=} initialValue Initial data to set the form values to
         * @return {?} Form group created according to defined model settings
         */
            function (modelSettings, initialValue) {
                var /** @type {?} */ settings;
                if (typeof modelSettings === "string") {
                    settings = this.rulesEngineSvc.getModelSettings(/** @type {?} */ (modelSettings));
                    if (!settings)
                        throw new Error("No model setting found with the name \"" + modelSettings + "\"");
                }
                else {
                    if (!modelSettings)
                        throw new Error("Adhoc model setting provided is invalid");
                    settings = /** @type {?} */ (modelSettings);
                    this.rulesEngineSvc.initializeModelSetting(settings);
                }
                this.traceSvc.trace("Creating form group using model settings \"" + settings.name + "\"");
                var /** @type {?} */ formGroup = this.buildGroup(settings.properties, initialValue);
                this.traceSvc.trace("Setting up dependency subscriptions");
                this.resetDependencySubscriptions(formGroup, settings.properties);
                this.traceSvc.trace("Patching form group with initial value");
                this.triggerValueChange(formGroup);
                this.traceSvc.trace("Attaching model settings to form");
                this.attachModelSettingsToForm(formGroup, settings);
                return formGroup;
            };
        /**
         * Adds an array item property to an existing form array
         * @param property ArrayItemProperty to for the array item to be added
         * @param parentFormArray The parent FormArray
         * @param initialValue Initial value of the form array item
         * @param options Options for adding new array item property
         */
        /**
         * Adds an array item property to an existing form array
         * @template T
         * @param {?} property ArrayItemProperty to for the array item to be added
         * @param {?} parentFormArray The parent FormArray
         * @param {?=} initialValue Initial value of the form array item
         * @param {?=} options Options for adding new array item property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.addArrayItemPropertyControl = /**
         * Adds an array item property to an existing form array
         * @template T
         * @param {?} property ArrayItemProperty to for the array item to be added
         * @param {?} parentFormArray The parent FormArray
         * @param {?=} initialValue Initial value of the form array item
         * @param {?=} options Options for adding new array item property
         * @return {?}
         */
            function (property, parentFormArray, initialValue, options) {
                var /** @type {?} */ control = this.buildAbstractControl(property, initialValue);
                var /** @type {?} */ willBeLastItem = !options || !this.commonSvc.isZeroOrGreater(options.index) || options.index >= parentFormArray.length;
                if (willBeLastItem)
                    parentFormArray.push(control);
                else
                    parentFormArray.insert(options.index, control);
                var /** @type {?} */ modelSettings = this.getModelSettingsFromForm(/** @type {?} */ (parentFormArray.root));
                this.resetDependencySubscriptions(parentFormArray.root, modelSettings.properties);
                // we need to do this because the item could have been added at any index in the array, and we need
                // trigger a value change to trigger any dependency propertiy valdidations
                this.triggerValueChange(parentFormArray);
            };
        /**
         * Extends validators generated by ng-form-rules with your own validators
         * @param control Control to extends the validators for
         * @param validator Validator to add
         */
        /**
         * Extends validators generated by ng-form-rules with your own validators
         * @param {?} control Control to extends the validators for
         * @param {?} validator Validator to add
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.extendValidator = /**
         * Extends validators generated by ng-form-rules with your own validators
         * @param {?} control Control to extends the validators for
         * @param {?} validator Validator to add
         * @return {?}
         */
            function (control, validator) {
                if (!validator)
                    return;
                var /** @type {?} */ validatorArray = Array.isArray(validator) ? validator : [validator];
                control.setValidators(__spread([control.validator], validatorArray).filter(function (validatorFn) { return !!validatorFn; }));
            };
        /**
         * Extends async validators generated by ng-form-rules with your own async validators
         * @param control Control to extends the async validators for
         * @param asyncValidator Async validator to add
         */
        /**
         * Extends async validators generated by ng-form-rules with your own async validators
         * @param {?} control Control to extends the async validators for
         * @param {?} asyncValidator Async validator to add
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.extendAsyncValidator = /**
         * Extends async validators generated by ng-form-rules with your own async validators
         * @param {?} control Control to extends the async validators for
         * @param {?} asyncValidator Async validator to add
         * @return {?}
         */
            function (control, asyncValidator) {
                if (!asyncValidator)
                    return;
                var /** @type {?} */ asyncValidatorArray = Array.isArray(asyncValidator) ? asyncValidator : [asyncValidator];
                control.setAsyncValidators(__spread([control.asyncValidator], asyncValidatorArray).filter(function (asyncValidatorFn) { return !!asyncValidatorFn; }));
            };
        /**
         * @template T
         * @param {?} property
         * @param {?=} initialValue
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildAbstractControl = /**
         * @template T
         * @param {?} property
         * @param {?=} initialValue
         * @return {?}
         */
            function (property, initialValue) {
                var _this = this;
                var /** @type {?} */ control;
                if (property.arrayItemProperty)
                    control = this.buildArray(property.arrayItemProperty, initialValue, property.updateOn);
                else if (property.properties)
                    control = this.buildGroup(property.properties, initialValue, property.updateOn);
                else
                    control = this.buildControl(initialValue, property.updateOn);
                // setup validation tests on value change
                control.setValidators(this.buildValidatorFunction(property));
                control.setAsyncValidators(this.buildAsyncValidatorFunction(property));
                // setup edit tests on value change
                control.valueChanges
                    .pipe(this.applyValueChangeOptions(property.valueChangeOptions.self.edit))
                    .subscribe(function (value) {
                    _this.persistEditTests(control, property);
                });
                return control;
            };
        /**
         * @template T
         * @param {?} initialValue
         * @param {?=} updateOn
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildControl = /**
         * @template T
         * @param {?} initialValue
         * @param {?=} updateOn
         * @return {?}
         */
            function (initialValue, updateOn) {
                return new forms.FormControl(initialValue, { updateOn: updateOn });
            };
        /**
         * @template T
         * @param {?} properties
         * @param {?} initialValue
         * @param {?=} updateOn
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildGroup = /**
         * @template T
         * @param {?} properties
         * @param {?} initialValue
         * @param {?=} updateOn
         * @return {?}
         */
            function (properties, initialValue, updateOn) {
                var _this = this;
                var /** @type {?} */ formGroup = new forms.FormGroup({}, { updateOn: updateOn });
                (properties || []).forEach(function (p) {
                    var /** @type {?} */ propertyValue = initialValue ? initialValue[p.name] : null;
                    var /** @type {?} */ ctrl = _this.buildAbstractControl(p, propertyValue);
                    formGroup.addControl(p.name, ctrl);
                });
                return formGroup;
            };
        /**
         * @template T
         * @param {?} property
         * @param {?} initialValue
         * @param {?=} updateOn
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildArray = /**
         * @template T
         * @param {?} property
         * @param {?} initialValue
         * @param {?=} updateOn
         * @return {?}
         */
            function (property, initialValue, updateOn) {
                var _this = this;
                initialValue = Array.isArray(initialValue) ? initialValue : [];
                return new forms.FormArray(initialValue.map(function (v) { return _this.buildAbstractControl(property, v); }), { updateOn: updateOn });
            };
        /**
         * @template T
         * @param {?} property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildValidatorFunction = /**
         * @template T
         * @param {?} property
         * @return {?}
         */
            function (property) {
                var _this = this;
                var /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
                if (!syncGroups.sync.length)
                    return null;
                return function (control) {
                    var /** @type {?} */ controlContextValues = _this.getControlContextValues(control, property);
                    var /** @type {?} */ testResults = _this.rulesEngineSvc
                        .runTests(controlContextValues.relative, syncGroups.sync, {
                        rootData: controlContextValues.root,
                        controlState: ControlState.create(control)
                    });
                    if (testResults.results.length) {
                        _this.traceSvc.trace("Validated property \"" + property.absolutePath + "\". " +
                            _this.buildTestResultStatsString(testResults));
                    }
                    return _this.mapToReactiveFormsValidationErrors(testResults);
                };
            };
        /**
         * @template T
         * @param {?} property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildAsyncValidatorFunction = /**
         * @template T
         * @param {?} property
         * @return {?}
         */
            function (property) {
                var _this = this;
                var /** @type {?} */ rawAsyncFunc = this.buildAsyncValidatorFunctionRaw(property);
                if (!rawAsyncFunc)
                    return null;
                var /** @type {?} */ values = new rxjs.BehaviorSubject(null);
                var /** @type {?} */ valid$ = values.pipe(this.applyAsyncValidValueChangeOptions(property.valueChangeOptions.self.asyncValid), operators.switchMap(function (x) {
                    // pass through means we did not execute the ng-form-rules async tests
                    if (x.passthrough) {
                        var /** @type {?} */ currentErrors = x.control.errors || {};
                        var /** @type {?} */ lastNgFormRulesErrors = _this.getLastErrorForControl(x.control);
                        // return the last ng-form-rules errors (if any) alongside non ng-form-rules errors.
                        // this handles scenario where debounce and distinct are used and state goes from:
                        //    invalid -> make changes and back them out -> valid
                        return rxjs.of(Object.assign(currentErrors, /** @type {?} */ ({ ngFormRules: lastNgFormRulesErrors })));
                    }
                    else {
                        return rawAsyncFunc(x.control);
                    }
                }), operators.take(1));
                return function (control) {
                    values.next(control);
                    return valid$;
                };
            };
        /**
         * @template T
         * @param {?} property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildAsyncValidatorFunctionRaw = /**
         * @template T
         * @param {?} property
         * @return {?}
         */
            function (property) {
                var _this = this;
                var /** @type {?} */ syncGroups = this.rulesEngineSvc.groupTestsBySyncType(property.valid);
                if (!syncGroups.async.length)
                    return null;
                return function (control) {
                    var /** @type {?} */ controlContextValues = _this.getControlContextValues(control, property);
                    return _this.rulesEngineSvc.runTestsAsync(controlContextValues.relative, syncGroups.async, {
                        rootData: controlContextValues.root,
                        controlState: ControlState.create(control)
                    }).pipe(operators.tap(function (testResults) {
                        if (testResults.results.length) {
                            _this.traceSvc.trace("Validated (async) property \"" + property.absolutePath + "\". " +
                                _this.buildTestResultStatsString(testResults));
                        }
                    }), operators.map(_this.mapToReactiveFormsValidationErrors), operators.tap(function (x) { return _this.setLastErrorForControl(control, (x || {})["ngFormRules"]); }));
                };
            };
        /**
         * @template T
         * @param {?} parentControl
         * @param {?} properties
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.resetDependencySubscriptions = /**
         * @template T
         * @param {?} parentControl
         * @param {?} properties
         * @return {?}
         */
            function (parentControl, properties) {
                this.removeDependencySubscriptions(properties);
                this.addDependencySubscriptions(parentControl, properties);
            };
        /**
         * @template T
         * @param {?} properties
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.removeDependencySubscriptions = /**
         * @template T
         * @param {?} properties
         * @return {?}
         */
            function (properties) {
                var _this = this;
                (properties || []).forEach(function (property) {
                    property.clearDependencyPropertySubscriptions();
                    if (property.properties) {
                        _this.removeDependencySubscriptions(property.properties);
                    }
                    if (property.arrayItemProperty) {
                        _this.removeDependencySubscriptions([property.arrayItemProperty]);
                    }
                });
            };
        /**
         * @template T
         * @param {?} parentControl
         * @param {?} properties
         * @param {?=} arrayIndex
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.addDependencySubscriptions = /**
         * @template T
         * @param {?} parentControl
         * @param {?} properties
         * @param {?=} arrayIndex
         * @return {?}
         */
            function (parentControl, properties, arrayIndex) {
                var _this = this;
                (properties || []).forEach(function (property) {
                    var /** @type {?} */ propertyControl = _this.getPropertyFromParent(parentControl, property, arrayIndex);
                    if (!propertyControl)
                        return;
                    _this.setupEditabilityDependencySubscriptions(propertyControl, parentControl, property);
                    _this.setupValidationDependencySubscriptions(propertyControl, parentControl, property);
                    if (property.properties) {
                        _this.addDependencySubscriptions(propertyControl, property.properties);
                    }
                    if (property.arrayItemProperty) {
                        // if there is an arrayItemProperty we know that we are working with a FormArray control
                        var /** @type {?} */ formArrayControl = ((propertyControl));
                        for (var /** @type {?} */ i = 0; i < formArrayControl.length; i++) {
                            _this.addDependencySubscriptions(formArrayControl, [property.arrayItemProperty], i);
                        }
                    }
                });
            };
        /**
         * @template T
         * @param {?} propertyControl
         * @param {?} parentControl
         * @param {?} property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.setupValidationDependencySubscriptions = /**
         * @template T
         * @param {?} propertyControl
         * @param {?} parentControl
         * @param {?} property
         * @return {?}
         */
            function (propertyControl, parentControl, property) {
                var _this = this;
                var /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.valid);
                dependencyPropNames.forEach(function (d) {
                    var /** @type {?} */ dependencyControl = _this.findControlRelatively(parentControl, d);
                    if (!dependencyControl)
                        return;
                    var /** @type {?} */ sub$ = dependencyControl.valueChanges
                        .pipe(_this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.valid))
                        .subscribe(function (value) {
                        _this.setForceAsyncValidationTestForControl(propertyControl, true);
                        propertyControl.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                    });
                    property.addDependencyPropertySubscription(sub$);
                });
            };
        /**
         * @template T
         * @param {?} propertyControl
         * @param {?} parentControl
         * @param {?} property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.setupEditabilityDependencySubscriptions = /**
         * @template T
         * @param {?} propertyControl
         * @param {?} parentControl
         * @param {?} property
         * @return {?}
         */
            function (propertyControl, parentControl, property) {
                var _this = this;
                var /** @type {?} */ dependencyPropNames = this.rulesEngineSvc.getDependencyProperties(property.edit);
                dependencyPropNames.forEach(function (dpn) {
                    var /** @type {?} */ dependencyControl = _this.findControlRelatively(parentControl, dpn);
                    if (!dependencyControl)
                        return;
                    // setup control to perform edit tests when dependency property changes
                    var /** @type {?} */ sub$ = dependencyControl.valueChanges
                        .pipe(_this.applyValueChangeOptions(property.valueChangeOptions.dependencyProperties.edit))
                        .subscribe(function (value) {
                        _this.persistEditTests(propertyControl, property);
                    });
                    property.addDependencyPropertySubscription(sub$);
                });
            };
        /**
         * @template T
         * @param {?} propertyControl
         * @param {?} property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.persistEditTests = /**
         * @template T
         * @param {?} propertyControl
         * @param {?} property
         * @return {?}
         */
            function (propertyControl, property) {
                var _this = this;
                var /** @type {?} */ controlContextValues = this.getControlContextValues(propertyControl, property);
                this.rulesEngineSvc.editable(controlContextValues.relative, property, {
                    rootData: controlContextValues.root,
                    controlState: ControlState.create(propertyControl)
                }).subscribe(function (testResults) {
                    if (testResults.results.length) {
                        _this.traceSvc.trace("Editable property \"" + property.absolutePath + "\". " +
                            _this.buildTestResultStatsString(testResults));
                    }
                    if (testResults.passed && propertyControl.disabled)
                        propertyControl.enable({ emitEvent: false });
                    else if (!testResults.passed && propertyControl.enabled)
                        propertyControl.disable({ emitEvent: false });
                });
            };
        /**
         * @param {?} valueChangeOptions
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.applyAsyncValidValueChangeOptions = /**
         * @param {?} valueChangeOptions
         * @return {?}
         */
            function (valueChangeOptions) {
                var _this = this;
                return function (source$) {
                    var /** @type {?} */ lastValue;
                    var /** @type {?} */ isForce;
                    return source$.pipe(operators.tap(function (control) {
                        isForce = _this.doesControlHaveForcedAsyncValidation(control);
                        _this.setForceAsyncValidationTestForControl(control, false);
                    }), operators.debounce(function (x) {
                        return isForce || valueChangeOptions.debounceMilliseconds > 0
                            ? rxjs.timer(valueChangeOptions.debounceMilliseconds)
                            : rxjs.EMPTY;
                    }), operators.map(function (control) {
                        return /** @type {?} */ ({
                            control: control,
                            passthrough: !(control.value !== lastValue || !valueChangeOptions.distinctUntilChanged || isForce)
                        });
                    }), operators.tap(function (x) {
                        if (!x.passthrough)
                            lastValue = x.control.value;
                    }));
                };
            };
        /**
         * @param {?} valueChangeOptions
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.applyValueChangeOptions = /**
         * @param {?} valueChangeOptions
         * @return {?}
         */
            function (valueChangeOptions) {
                return function (source$) {
                    return source$.pipe(operators.debounce(function (x) {
                        return valueChangeOptions.debounceMilliseconds > 0
                            ? rxjs.timer(valueChangeOptions.debounceMilliseconds)
                            : rxjs.EMPTY;
                    }), valueChangeOptions.distinctUntilChanged ? operators.distinctUntilChanged() : operators.tap());
                };
            };
        /**
         * @template T
         * @param {?} control
         * @param {?} property
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.getControlContextValues = /**
         * @template T
         * @param {?} control
         * @param {?} property
         * @return {?}
         */
            function (control, property) {
                var /** @type {?} */ rootValue = ((control.root)).getRawValue();
                // use the control value if an array item, otherwise use the parent control
                var /** @type {?} */ relativeValue = PropertyBase.isArrayItemProperty(property)
                    ? control.value
                    : control.parent.getRawValue();
                return {
                    root: rootValue,
                    relative: relativeValue
                };
            };
        /**
         * @template T
         * @param {?} parentControl
         * @param {?} property
         * @param {?=} arrayIndex
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.getPropertyFromParent = /**
         * @template T
         * @param {?} parentControl
         * @param {?} property
         * @param {?=} arrayIndex
         * @return {?}
         */
            function (parentControl, property, arrayIndex) {
                return PropertyBase.isArrayItemProperty(property)
                    ? ((parentControl)).at(arrayIndex)
                    : parentControl.get(((property)).name);
            };
        /**
         * @template T
         * @param {?} testResults
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.mapToReactiveFormsValidationErrors = /**
         * @template T
         * @param {?} testResults
         * @return {?}
         */
            function (testResults) {
                // if passed, Angular reactive forms wants us to return null, otherwise return an object with the validation info
                if (!testResults || testResults.passed)
                    return null;
                var /** @type {?} */ failed = {};
                testResults.failedResults.forEach(function (test) {
                    failed[test.name] = { message: test.message };
                });
                return {
                    ngFormRules: /** @type {?} */ ({
                        message: testResults.message,
                        failed: failed
                    })
                };
            };
        /**
         * @param {?} control
         * @param {?} path
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.findControlRelatively = /**
         * @param {?} control
         * @param {?} path
         * @return {?}
         */
            function (control, path) {
                var _this = this;
                var /** @type {?} */ relativePaths = this.buildControlRelativePathArray(path);
                if (!relativePaths.length)
                    return null;
                var /** @type {?} */ result;
                relativePaths.forEach(function (pathSegment) {
                    result = _this.getControlByPathSegment(result || control, pathSegment);
                    if (!result)
                        return;
                });
                return result;
            };
        /**
         * @param {?} relativePath
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildControlRelativePathArray = /**
         * @param {?} relativePath
         * @return {?}
         */
            function (relativePath) {
                var /** @type {?} */ result = [];
                if (!relativePath || typeof relativePath !== "string")
                    return result;
                // takes care of './', '../', and '/'
                var /** @type {?} */ slashSeparated = relativePath.split("/");
                slashSeparated.forEach(function (slashItem) {
                    var /** @type {?} */ dotSeparated = slashItem.split(".")
                        .filter(function (dotItem) { return !!dotItem; });
                    if (dotSeparated.length)
                        result.push.apply(result, __spread(dotSeparated));
                    else
                        result.push(slashItem);
                });
                return result;
            };
        /**
         * @param {?} control
         * @param {?} pathSegment
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.getControlByPathSegment = /**
         * @param {?} control
         * @param {?} pathSegment
         * @return {?}
         */
            function (control, pathSegment) {
                switch (pathSegment) {
                    case "":
                        return control.root;
                    case "..":
                        return control.parent;
                    case ".":
                        return control;
                    default:
                        return control.get(pathSegment);
                }
            };
        /**
         * @template T
         * @param {?} testResults
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.buildTestResultStatsString = /**
         * @template T
         * @param {?} testResults
         * @return {?}
         */
            function (testResults) {
                return "Executed " + testResults.results.length + " tests " +
                    ("(" + testResults.passedResults.length + " PASS | ") +
                    (testResults.failedResults.length + " FAIL | ")
                    + (testResults.skippedResults.length + " SKIP)");
            };
        /**
         * @template T
         * @param {?} formGroup
         * @param {?} modelSettings
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.attachModelSettingsToForm = /**
         * @template T
         * @param {?} formGroup
         * @param {?} modelSettings
         * @return {?}
         */
            function (formGroup, modelSettings) {
                formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME] = modelSettings;
            };
        /**
         * @template T
         * @param {?} formGroup
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.getModelSettingsFromForm = /**
         * @template T
         * @param {?} formGroup
         * @return {?}
         */
            function (formGroup) {
                return /** @type {?} */ (formGroup[ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME]);
            };
        /**
         * @param {?} control
         * @param {?} force
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.setForceAsyncValidationTestForControl = /**
         * @param {?} control
         * @param {?} force
         * @return {?}
         */
            function (control, force) {
                control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME] = force;
            };
        /**
         * @param {?} control
         * @param {?} errors
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.setLastErrorForControl = /**
         * @param {?} control
         * @param {?} errors
         * @return {?}
         */
            function (control, errors) {
                control[ReactiveFormsRuleService.CONTROL_LAST_ERROR] = errors;
            };
        /**
         * @param {?} control
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.getLastErrorForControl = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                return control[ReactiveFormsRuleService.CONTROL_LAST_ERROR];
            };
        /**
         * @param {?} control
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.doesControlHaveForcedAsyncValidation = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                return !!(control[ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME]);
            };
        /**
         * @param {?} control
         * @return {?}
         */
        ReactiveFormsRuleService.prototype.triggerValueChange = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                control.patchValue(control.value);
            };
        ReactiveFormsRuleService.FORM_MODEL_SETTINGS_PROPERTY_NAME = 'ngFormRulesModelSetting';
        ReactiveFormsRuleService.FORCE_ASYNC_VALID_TEST_RUN_PROPERTY_NAME = 'ngFormRulesForceAsyncValidTestRun';
        ReactiveFormsRuleService.CONTROL_LAST_ERROR = 'ngFormRulesControlLastError';
        ReactiveFormsRuleService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ReactiveFormsRuleService.ctorParameters = function () {
            return [
                { type: RulesEngineService, },
                { type: forms.FormBuilder, },
                { type: TraceService, },
                { type: CommonService, },
            ];
        };
        return ReactiveFormsRuleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UtilsModule = (function () {
        function UtilsModule() {
        }
        UtilsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [],
                        providers: [
                            TraceService,
                            CommonService
                        ]
                    },] },
        ];
        return UtilsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RulesEngineModule = (function () {
        function RulesEngineModule() {
        }
        RulesEngineModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            UtilsModule
                        ],
                        providers: [
                            RulesEngineService,
                            ReactiveFormsRuleService
                        ],
                        declarations: []
                    },] },
        ];
        return RulesEngineModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Main module for ng-form-rules
     */
    var FormRulesModule = (function () {
        function FormRulesModule() {
        }
        FormRulesModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            RulesEngineModule,
                        ],
                        declarations: [],
                        exports: [
                            RulesEngineModule,
                        ]
                    },] },
        ];
        return FormRulesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Non-array item property
     * @template T
     */
    var /**
     * Non-array item property
     * @template T
     */ Property = (function (_super) {
        __extends(Property, _super);
        function Property(name) {
            var _this = _super.call(this) || this;
            _this._name = name;
            return _this;
        }
        Object.defineProperty(Property.prototype, "name", {
            /**
             * Name of the property
             */
            get: /**
             * Name of the property
             * @return {?}
             */ function () {
                return this._name;
            },
            enumerable: true,
            configurable: true
        });
        return Property;
    }(PropertyBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * A property representing an array item (e.g. an array of Address objects)
     * @template T
     */
    var /**
     * A property representing an array item (e.g. an array of Address objects)
     * @template T
     */ ArrayItemProperty = (function (_super) {
        __extends(ArrayItemProperty, _super);
        function ArrayItemProperty() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ArrayItemProperty;
    }(PropertyBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Utility class for building model settings
     */
    var /**
     * Utility class for building model settings
     */ ModelSettingsBuilder = (function () {
        function ModelSettingsBuilder() {
        }
        /**
         * Creates a property
         * @param propertyName Property name
         * @param extend Function to extend the property
         * @returns Created property
         */
        /**
         * Creates a property
         * @template T
         * @param {?} propertyName Property name
         * @param {?=} extend Function to extend the property
         * @return {?} Created property
         */
        ModelSettingsBuilder.prototype.property = /**
         * Creates a property
         * @template T
         * @param {?} propertyName Property name
         * @param {?=} extend Function to extend the property
         * @return {?} Created property
         */
            function (propertyName, extend) {
                if (!propertyName || typeof propertyName !== 'string')
                    throw Error('Invalid property name');
                var /** @type {?} */ property = new Property(propertyName);
                if (extend)
                    extend(property);
                return property;
            };
        /**
         * Creates an array item property
         * @param extend Function to extend the array item property
         * @returns Created array item property
         */
        /**
         * Creates an array item property
         * @template T
         * @param {?=} extend Function to extend the array item property
         * @return {?} Created array item property
         */
        ModelSettingsBuilder.prototype.arrayItemProperty = /**
         * Creates an array item property
         * @template T
         * @param {?=} extend Function to extend the array item property
         * @return {?} Created array item property
         */
            function (extend) {
                var /** @type {?} */ property = new ArrayItemProperty();
                if (extend)
                    extend(property);
                return property;
            };
        /**
         * Creates a validation test
         * @param message Message when the test fails
         * @param check Check rule set for the test
         * @param condition Condition rule set for the test
         * @returns Created validation test
         */
        /**
         * Creates a validation test
         * @template T
         * @param {?} message Message when the test fails
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created validation test
         */
        ModelSettingsBuilder.prototype.validTest = /**
         * Creates a validation test
         * @template T
         * @param {?} message Message when the test fails
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created validation test
         */
            function (message, check, condition) {
                return this.validNamedTest(null, message, check, condition);
            };
        /**
         * Creates a named validation test
         * @param name Name of the test
         * @param message Message when the test fails
         * @param check Check rule set for the test
         * @param condition Condition rule set for the test
         * @returns Created named validation test
         */
        /**
         * Creates a named validation test
         * @template T
         * @param {?} name Name of the test
         * @param {?} message Message when the test fails
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created named validation test
         */
        ModelSettingsBuilder.prototype.validNamedTest = /**
         * Creates a named validation test
         * @template T
         * @param {?} name Name of the test
         * @param {?} message Message when the test fails
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created named validation test
         */
            function (name, message, check, condition) {
                return /** @type {?} */ ({
                    name: name,
                    message: message,
                    check: check,
                    condition: condition
                });
            };
        /**
         * Creates an edit test
         * @param check Check rule set for the test
         * @param condition Condition rule set for the test
         * @returns Created edit test
         */
        /**
         * Creates an edit test
         * @template T
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created edit test
         */
        ModelSettingsBuilder.prototype.editTest = /**
         * Creates an edit test
         * @template T
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created edit test
         */
            function (check, condition) {
                return this.editNamedTest(null, check, condition);
            };
        /**
         * Creates a named edit test
         * @param name Name of the test
         * @param check Check rule set for the test
         * @param condition Condition rule set for the test
         * @returns Created named edit test
         */
        /**
         * Creates a named edit test
         * @template T
         * @param {?} name Name of the test
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created named edit test
         */
        ModelSettingsBuilder.prototype.editNamedTest = /**
         * Creates a named edit test
         * @template T
         * @param {?} name Name of the test
         * @param {?} check Check rule set for the test
         * @param {?=} condition Condition rule set for the test
         * @return {?} Created named edit test
         */
            function (name, check, condition) {
                return /** @type {?} */ ({
                    name: name,
                    check: check,
                    condition: condition
                });
            };
        /**
         * Creates a rule
         * @param func Function for the rule
         * @param options Additional rule options
         * @returns Created rule
         */
        /**
         * Creates a rule
         * @template T, R
         * @param {?} func Function for the rule
         * @param {?=} options Additional rule options
         * @return {?} Created rule
         */
        ModelSettingsBuilder.prototype.rule = /**
         * Creates a rule
         * @template T, R
         * @param {?} func Function for the rule
         * @param {?=} options Additional rule options
         * @return {?} Created rule
         */
            function (func, options) {
                return this.ruleCombo(func, null, options);
            };
        /**
         * Creates an async rule
         * @param asyncFunc Async function for the rule
         * @param options Additional rule options
         * @returns Created rule
         */
        /**
         * Creates an async rule
         * @template T, R
         * @param {?} asyncFunc Async function for the rule
         * @param {?=} options Additional rule options
         * @return {?} Created rule
         */
        ModelSettingsBuilder.prototype.ruleAsync = /**
         * Creates an async rule
         * @template T, R
         * @param {?} asyncFunc Async function for the rule
         * @param {?=} options Additional rule options
         * @return {?} Created rule
         */
            function (asyncFunc, options) {
                return this.ruleCombo(null, asyncFunc, options);
            };
        /**
         * Creates a combo rule that has both syncronous and async functions
         * @param func Function for the rule
         * @param asyncFunc Async function for the rule
         * @param options Additional rule options
         * @returns Created rule
         */
        /**
         * Creates a combo rule that has both syncronous and async functions
         * @template T, R
         * @param {?} func Function for the rule
         * @param {?} asyncFunc Async function for the rule
         * @param {?=} options Additional rule options
         * @return {?} Created rule
         */
        ModelSettingsBuilder.prototype.ruleCombo = /**
         * Creates a combo rule that has both syncronous and async functions
         * @template T, R
         * @param {?} func Function for the rule
         * @param {?} asyncFunc Async function for the rule
         * @param {?=} options Additional rule options
         * @return {?} Created rule
         */
            function (func, asyncFunc, options) {
                return /** @type {?} */ ({
                    func: func,
                    asyncFunc: asyncFunc,
                    options: options
                });
            };
        /**
         * Creates a rule group
         * @param ruleSets Rule sets for the rule group
         * @param options Additional rule group options
         * @returns Created rule group
         */
        /**
         * Creates a rule group
         * @template T
         * @param {?} ruleSets Rule sets for the rule group
         * @param {?=} options Additional rule group options
         * @return {?} Created rule group
         */
        ModelSettingsBuilder.prototype.ruleGroup = /**
         * Creates a rule group
         * @template T
         * @param {?} ruleSets Rule sets for the rule group
         * @param {?=} options Additional rule group options
         * @return {?} Created rule group
         */
            function (ruleSets, options) {
                return /** @type {?} */ ({
                    rules: ruleSets,
                    options: options || { resultRequirements: ResultsPassRequirement.AllPass }
                });
            };
        return ModelSettingsBuilder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Base class for model settings
     * @abstract
     * @template T
     */
    var /**
     * Base class for model settings
     * @abstract
     * @template T
     */ AbstractModelSettings = (function () {
        /**
         * Creates model settings
         * @param name Name of the model settings
         */
        function AbstractModelSettings(name) {
            this.builder = new ModelSettingsBuilder();
            this._name = name;
            this.properties = this.buildProperties() || [];
        }
        Object.defineProperty(AbstractModelSettings.prototype, "name", {
            /**
             * Name of the model setting
             */
            get: /**
             * Name of the model setting
             * @return {?}
             */ function () {
                return this._name;
            },
            enumerable: true,
            configurable: true
        });
        return AbstractModelSettings;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ PropertyTestResults = (function (_super) {
        __extends(PropertyTestResults, _super);
        function PropertyTestResults(propertyName, results) {
            var _this = _super.call(this, results) || this;
            _this.propertyName = propertyName;
            return _this;
        }
        return PropertyTestResults;
    }(TestResultsBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Class for creating adhoc (non-registered) model settings
     * @template T
     */
    var /**
     * Class for creating adhoc (non-registered) model settings
     * @template T
     */ AdhocModelSettings = (function (_super) {
        __extends(AdhocModelSettings, _super);
        function AdhocModelSettings() {
            // since these settings are not registered, just use a static name
            return _super.call(this, 'adhoc') || this;
        }
        /**
         * Creates model settings
         * @param propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties
         * @returns Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter
         */
        /**
         * Creates model settings
         * @template T
         * @param {?} propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties
         * @return {?} Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter
         */
        AdhocModelSettings.create = /**
         * Creates model settings
         * @template T
         * @param {?} propertyBuilderFunc Function that takes a ModelSettingsBuilder and uses it to return an array of properties
         * @return {?} Model settings configured with properties returned from the 'propertyBuilderFunc' function parameter
         */
            function (propertyBuilderFunc) {
                var /** @type {?} */ instance = new AdhocModelSettings();
                instance.properties = !!propertyBuilderFunc ? propertyBuilderFunc(instance.builder) || [] : [];
                return instance;
            };
        /**
         * @return {?}
         */
        AdhocModelSettings.prototype.buildProperties = /**
         * @return {?}
         */
            function () {
                // this is just needed to satisfy the AbstractModelSettings<T> contract
                return [];
            };
        return AdhocModelSettings;
    }(AbstractModelSettings));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Options for how and when to process value changes in a form control
     */
    var /**
     * Options for how and when to process value changes in a form control
     */ ValueChangeOptions = (function () {
        function ValueChangeOptions() {
        }
        return ValueChangeOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.FormRulesModule = FormRulesModule;
    exports.MODEL_SETTINGS_TOKEN = MODEL_SETTINGS_TOKEN;
    exports.TRACE_SETTINGS_TOKEN = TRACE_SETTINGS_TOKEN;
    exports.ReactiveFormsRuleService = ReactiveFormsRuleService;
    exports.AbstractModelSettings = AbstractModelSettings;
    exports.ArrayItemProperty = ArrayItemProperty;
    exports.ControlState = ControlState;
    exports.PropertyBase = PropertyBase;
    exports.PropertyTestResults = PropertyTestResults;
    exports.Property = Property;
    exports.TestResultsBase = TestResultsBase;
    exports.AdhocModelSettings = AdhocModelSettings;
    exports.ValueChangeOptions = ValueChangeOptions;
    exports.ResultsPassRequirement = ResultsPassRequirement;
    exports.ModelSettingsBuilder = ModelSettingsBuilder;
    exports.ɵa = RulesEngineModule;
    exports.ɵe = RulesEngineService;
    exports.ɵd = CommonService;
    exports.ɵc = TraceService;
    exports.ɵb = UtilsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,